/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * App.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_App_H_
#define COM_ONESIGNAL_CLIENT_MODEL_App_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace onesignal {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  App
    : public ModelBase
{
public:
    App();
    virtual ~App();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// App members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// The name of your app, as displayed on your apps list on the dashboard.  This can be renamed.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPlayers() const;
    bool playersIsSet() const;
    void unsetPlayers();

    void setPlayers(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMessageablePlayers() const;
    bool messageablePlayersIsSet() const;
    void unsetMessageable_players();

    void setMessageablePlayers(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdated_at();

    void setUpdatedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// Android: Your Google Project number.  Also known as Sender ID.
    /// </summary>
    utility::string_t getAndroidGcmSenderId() const;
    bool androidGcmSenderIdIsSet() const;
    void unsetAndroid_gcm_sender_id();

    void setAndroidGcmSenderId(const utility::string_t& value);

    /// <summary>
    /// Android: Your Google Push Messaging Auth Key
    /// </summary>
    utility::string_t getGcmKey() const;
    bool gcmKeyIsSet() const;
    void unsetGcm_key();

    void setGcmKey(const utility::string_t& value);

    /// <summary>
    /// Chrome (All Browsers except Safari) (Recommended): The URL to your website.  This field is required if you wish to enable web push and specify other web push parameters.
    /// </summary>
    utility::string_t getChromeWebOrigin() const;
    bool chromeWebOriginIsSet() const;
    void unsetChrome_web_origin();

    void setChromeWebOrigin(const utility::string_t& value);

    /// <summary>
    /// Not for web push.  Your Google Push Messaging Auth Key if you use Chrome Apps / Extensions.
    /// </summary>
    utility::string_t getChromeKey() const;
    bool chromeKeyIsSet() const;
    void unsetChrome_key();

    void setChromeKey(const utility::string_t& value);

    /// <summary>
    /// Chrome (All Browsers except Safari): Your default notification icon. Should be 256x256 pixels, min 80x80.
    /// </summary>
    utility::string_t getChromeWebDefaultNotificationIcon() const;
    bool chromeWebDefaultNotificationIconIsSet() const;
    void unsetChrome_web_default_notification_icon();

    void setChromeWebDefaultNotificationIcon(const utility::string_t& value);

    /// <summary>
    /// Chrome (All Browsers except Safari): A subdomain of your choice in order to support Web Push on non-HTTPS websites. This field must be set in order for the chrome_web_gcm_sender_id property to be processed.
    /// </summary>
    utility::string_t getChromeWebSubDomain() const;
    bool chromeWebSubDomainIsSet() const;
    void unsetChrome_web_sub_domain();

    void setChromeWebSubDomain(const utility::string_t& value);

    /// <summary>
    /// iOS: Either sandbox or production
    /// </summary>
    utility::string_t getApnsEnv() const;
    bool apnsEnvIsSet() const;
    void unsetApns_env();

    void setApnsEnv(const utility::string_t& value);

    /// <summary>
    /// iOS: Your apple push notification p12 certificate file, converted to a string and Base64 encoded.
    /// </summary>
    utility::string_t getApnsP12() const;
    bool apnsP12IsSet() const;
    void unsetApns_p12();

    void setApnsP12(const utility::string_t& value);

    /// <summary>
    /// iOS: Required if using p12 certificate.  Password for the apns_p12 file.
    /// </summary>
    utility::string_t getApnsP12Password() const;
    bool apnsP12PasswordIsSet() const;
    void unsetApns_p12_password();

    void setApnsP12Password(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getApnsCertificates() const;
    bool apnsCertificatesIsSet() const;
    void unsetApns_certificates();

    void setApnsCertificates(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSafariApnsCertificates() const;
    bool safariApnsCertificatesIsSet() const;
    void unsetSafari_apns_certificates();

    void setSafariApnsCertificates(const utility::string_t& value);

    /// <summary>
    /// Safari: Your apple push notification p12 certificate file for Safari Push Notifications, converted to a string and Base64 encoded.
    /// </summary>
    utility::string_t getSafariApnsP12() const;
    bool safariApnsP12IsSet() const;
    void unsetSafari_apns_p12();

    void setSafariApnsP12(const utility::string_t& value);

    /// <summary>
    /// Safari: Password for safari_apns_p12 file
    /// </summary>
    utility::string_t getSafariApnsP12Password() const;
    bool safariApnsP12PasswordIsSet() const;
    void unsetSafari_apns_p12_password();

    void setSafariApnsP12Password(const utility::string_t& value);

    /// <summary>
    /// iOS: Required if using p8. Unique identifier for the p8 authentication key.
    /// </summary>
    utility::string_t getApnsKeyId() const;
    bool apnsKeyIdIsSet() const;
    void unsetApns_key_id();

    void setApnsKeyId(const utility::string_t& value);

    /// <summary>
    /// iOS: Required if using p8. Team ID generated by Apple for your developer account.
    /// </summary>
    utility::string_t getApnsTeamId() const;
    bool apnsTeamIdIsSet() const;
    void unsetApns_team_id();

    void setApnsTeamId(const utility::string_t& value);

    /// <summary>
    /// iOS: Required if using p8. Bundle ID for your app in the Apple ecosystem.
    /// </summary>
    utility::string_t getApnsBundleId() const;
    bool apnsBundleIdIsSet() const;
    void unsetApns_bundle_id();

    void setApnsBundleId(const utility::string_t& value);

    /// <summary>
    /// iOS: Required if using p8. Base64 encoded p8 key
    /// </summary>
    utility::string_t getApnsP8() const;
    bool apnsP8IsSet() const;
    void unsetApns_p8();

    void setApnsP8(const utility::string_t& value);

    /// <summary>
    /// Safari (Recommended): The hostname to your website including http(s)://
    /// </summary>
    utility::string_t getSafariSiteOrigin() const;
    bool safariSiteOriginIsSet() const;
    void unsetSafari_site_origin();

    void setSafariSiteOrigin(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSafariPushId() const;
    bool safariPushIdIsSet() const;
    void unsetSafari_push_id();

    void setSafariPushId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSafariIcon1616() const;
    bool safariIcon1616IsSet() const;
    void unsetSafari_icon_16_16();

    void setSafariIcon1616(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSafariIcon3232() const;
    bool safariIcon3232IsSet() const;
    void unsetSafari_icon_32_32();

    void setSafariIcon3232(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSafariIcon6464() const;
    bool safariIcon6464IsSet() const;
    void unsetSafari_icon_64_64();

    void setSafariIcon6464(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSafariIcon128128() const;
    bool safariIcon128128IsSet() const;
    void unsetSafari_icon_128_128();

    void setSafariIcon128128(const utility::string_t& value);

    /// <summary>
    /// Safari: A url for a 256x256 png notification icon. This is the only Safari icon URL you need to provide.
    /// </summary>
    utility::string_t getSafariIcon256256() const;
    bool safariIcon256256IsSet() const;
    void unsetSafari_icon_256_256();

    void setSafariIcon256256(const utility::string_t& value);

    /// <summary>
    /// All Browsers (Recommended): The Site Name. Requires both chrome_web_origin and safari_site_origin to be set to add or update it.
    /// </summary>
    utility::string_t getSiteName() const;
    bool siteNameIsSet() const;
    void unsetSite_name();

    void setSiteName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBasicAuthKey() const;
    bool basicAuthKeyIsSet() const;
    void unsetBasic_auth_key();

    void setBasicAuthKey(const utility::string_t& value);

    /// <summary>
    /// The Id of the Organization you would like to add this app to.
    /// </summary>
    utility::string_t getOrganizationId() const;
    bool organizationIdIsSet() const;
    void unsetOrganization_id();

    void setOrganizationId(const utility::string_t& value);

    /// <summary>
    /// iOS: Notification data (additional data) values will be added to the root of the apns payload when sent to the device.  Ignore if you&#39;re not using any other plugins, or not using OneSignal SDK methods to read the payload.
    /// </summary>
    bool isAdditionalDataIsRootPayload() const;
    bool additionalDataIsRootPayloadIsSet() const;
    void unsetAdditional_data_is_root_payload();

    void setAdditionalDataIsRootPayload(bool value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    int32_t m_Players;
    bool m_PlayersIsSet;
    int32_t m_Messageable_players;
    bool m_Messageable_playersIsSet;
    utility::datetime m_Updated_at;
    bool m_Updated_atIsSet;
    utility::datetime m_Created_at;
    bool m_Created_atIsSet;
    utility::string_t m_Android_gcm_sender_id;
    bool m_Android_gcm_sender_idIsSet;
    utility::string_t m_Gcm_key;
    bool m_Gcm_keyIsSet;
    utility::string_t m_Chrome_web_origin;
    bool m_Chrome_web_originIsSet;
    utility::string_t m_Chrome_key;
    bool m_Chrome_keyIsSet;
    utility::string_t m_Chrome_web_default_notification_icon;
    bool m_Chrome_web_default_notification_iconIsSet;
    utility::string_t m_Chrome_web_sub_domain;
    bool m_Chrome_web_sub_domainIsSet;
    utility::string_t m_Apns_env;
    bool m_Apns_envIsSet;
    utility::string_t m_Apns_p12;
    bool m_Apns_p12IsSet;
    utility::string_t m_Apns_p12_password;
    bool m_Apns_p12_passwordIsSet;
    utility::string_t m_Apns_certificates;
    bool m_Apns_certificatesIsSet;
    utility::string_t m_Safari_apns_certificates;
    bool m_Safari_apns_certificatesIsSet;
    utility::string_t m_Safari_apns_p12;
    bool m_Safari_apns_p12IsSet;
    utility::string_t m_Safari_apns_p12_password;
    bool m_Safari_apns_p12_passwordIsSet;
    utility::string_t m_Apns_key_id;
    bool m_Apns_key_idIsSet;
    utility::string_t m_Apns_team_id;
    bool m_Apns_team_idIsSet;
    utility::string_t m_Apns_bundle_id;
    bool m_Apns_bundle_idIsSet;
    utility::string_t m_Apns_p8;
    bool m_Apns_p8IsSet;
    utility::string_t m_Safari_site_origin;
    bool m_Safari_site_originIsSet;
    utility::string_t m_Safari_push_id;
    bool m_Safari_push_idIsSet;
    utility::string_t m_Safari_icon_16_16;
    bool m_Safari_icon_16_16IsSet;
    utility::string_t m_Safari_icon_32_32;
    bool m_Safari_icon_32_32IsSet;
    utility::string_t m_Safari_icon_64_64;
    bool m_Safari_icon_64_64IsSet;
    utility::string_t m_Safari_icon_128_128;
    bool m_Safari_icon_128_128IsSet;
    utility::string_t m_Safari_icon_256_256;
    bool m_Safari_icon_256_256IsSet;
    utility::string_t m_Site_name;
    bool m_Site_nameIsSet;
    utility::string_t m_Basic_auth_key;
    bool m_Basic_auth_keyIsSet;
    utility::string_t m_Organization_id;
    bool m_Organization_idIsSet;
    bool m_Additional_data_is_root_payload;
    bool m_Additional_data_is_root_payloadIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_App_H_ */
