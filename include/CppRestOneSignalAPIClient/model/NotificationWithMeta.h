/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * NotificationWithMeta.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_NotificationWithMeta_H_
#define COM_ONESIGNAL_CLIENT_MODEL_NotificationWithMeta_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include "CppRestOneSignalAPIClient/model/PlatformDeliveryData.h"
#include "CppRestOneSignalAPIClient/model/Button.h"
#include "CppRestOneSignalAPIClient/model/BasicNotification.h"
#include "CppRestOneSignalAPIClient/model/StringMap.h"
#include "CppRestOneSignalAPIClient/model/BasicNotification_allOf_android_background_layout.h"
#include "CppRestOneSignalAPIClient/model/DeliveryData.h"
#include "CppRestOneSignalAPIClient/model/OutcomeData.h"
#include "CppRestOneSignalAPIClient/model/PlayerNotificationTarget_include_aliases.h"
#include "CppRestOneSignalAPIClient/model/Filter.h"
#include <vector>
#include "CppRestOneSignalAPIClient/Object.h"
#include "CppRestOneSignalAPIClient/model/OutcomesData.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOneSignalAPIClient/model/NotificationWithMeta_allOf.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {

class PlayerNotificationTarget_include_aliases;
class StringMap;
class Button;
class BasicNotification_allOf_android_background_layout;
class Filter;
class OutcomeData;
class PlatformDeliveryData;

/// <summary>
/// 
/// </summary>
class  NotificationWithMeta
    : public ModelBase
{
public:
    NotificationWithMeta();
    virtual ~NotificationWithMeta();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// NotificationWithMeta members

    /// <summary>
    /// The segment names you want to target. Users in these segments will receive a notification. This targeting parameter is only compatible with excluded_segments. Example: [\&quot;Active Users\&quot;, \&quot;Inactive Users\&quot;] 
    /// </summary>
    std::vector<utility::string_t>& getIncludedSegments();
    bool includedSegmentsIsSet() const;
    void unsetIncluded_segments();

    void setIncludedSegments(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Segment that will be excluded when sending. Users in these segments will not receive a notification, even if they were included in included_segments. This targeting parameter is only compatible with included_segments. Example: [\&quot;Active Users\&quot;, \&quot;Inactive Users\&quot;] 
    /// </summary>
    std::vector<utility::string_t>& getExcludedSegments();
    bool excludedSegmentsIsSet() const;
    void unsetExcluded_segments();

    void setExcludedSegments(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Specific playerids to send your notification to. _Does not require API Auth Key. Do not combine with other targeting parameters. Not compatible with any other targeting parameters. Example: [\&quot;1dd608f2-c6a1-11e3-851d-000c2940e62c\&quot;] Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludePlayerIds();
    bool includePlayerIdsIsSet() const;
    void unsetInclude_player_ids();

    void setIncludePlayerIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Target specific devices by custom user IDs assigned via API. Not compatible with any other targeting parameters Example: [\&quot;custom-id-assigned-by-api\&quot;] REQUIRED: REST API Key Authentication Limit of 2,000 entries per REST API call. Note: If targeting push, email, or sms subscribers with same ids, use with channel_for_external_user_ids to indicate you are sending a push or email or sms. 
    /// </summary>
    std::vector<utility::string_t>& getIncludeExternalUserIds();
    bool includeExternalUserIdsIsSet() const;
    void unsetInclude_external_user_ids();

    void setIncludeExternalUserIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Recommended for Sending Emails - Target specific email addresses. If an email does not correspond to an existing user, a new user will be created. Example: nick@catfac.ts Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeEmailTokens();
    bool includeEmailTokensIsSet() const;
    void unsetInclude_email_tokens();

    void setIncludeEmailTokens(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Recommended for Sending SMS - Target specific phone numbers. The phone number should be in the E.164 format. Phone number should be an existing subscriber on OneSignal. Refer our docs to learn how to add phone numbers to OneSignal. Example phone number: +1999999999 Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludePhoneNumbers();
    bool includePhoneNumbersIsSet() const;
    void unsetInclude_phone_numbers();

    void setIncludePhoneNumbers(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using iOS device tokens. Warning: Only works with Production tokens. All non-alphanumeric characters must be removed from each token. If a token does not correspond to an existing user, a new user will be created. Example: ce777617da7f548fe7a9ab6febb56cf39fba6d38203... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeIosTokens();
    bool includeIosTokensIsSet() const;
    void unsetInclude_ios_tokens();

    void setIncludeIosTokens(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Windows URIs. If a token does not correspond to an existing user, a new user will be created. Example: http://s.notify.live.net/u/1/bn1/HmQAAACPaLDr-... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeWpWnsUris();
    bool includeWpWnsUrisIsSet() const;
    void unsetInclude_wp_wns_uris();

    void setIncludeWpWnsUris(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Amazon ADM registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: amzn1.adm-registration.v1.XpvSSUk0Rc3hTVVV... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeAmazonRegIds();
    bool includeAmazonRegIdsIsSet() const;
    void unsetInclude_amazon_reg_ids();

    void setIncludeAmazonRegIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Chrome App registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeChromeRegIds();
    bool includeChromeRegIdsIsSet() const;
    void unsetInclude_chrome_reg_ids();

    void setIncludeChromeRegIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Chrome Web Push registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeChromeWebRegIds();
    bool includeChromeWebRegIdsIsSet() const;
    void unsetInclude_chrome_web_reg_ids();

    void setIncludeChromeWebRegIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Android device registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeAndroidRegIds();
    bool includeAndroidRegIdsIsSet() const;
    void unsetInclude_android_reg_ids();

    void setIncludeAndroidRegIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlayerNotificationTarget_include_aliases> getIncludeAliases() const;
    bool includeAliasesIsSet() const;
    void unsetInclude_aliases();

    void setIncludeAliases(const std::shared_ptr<PlayerNotificationTarget_include_aliases>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetChannel() const;
    bool targetChannelIsSet() const;
    void unsetTarget_channel();

    void setTargetChannel(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getValue() const;
    bool valueIsSet() const;
    void unsetValue();

    void setValue(int32_t value);

    /// <summary>
    /// Required for SMS Messages. An identifier for tracking message within the OneSignal dashboard or export analytics. Not shown to end user.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAggregation() const;
    bool aggregationIsSet() const;
    void unsetAggregation();

    void setAggregation(const utility::string_t& value);

    /// <summary>
    /// Indicates whether to send to all devices registered under your app&#39;s Apple iOS platform.
    /// </summary>
    bool isIsIos() const;
    bool isIosIsSet() const;
    void unsetIsIos();

    void setIsIos(bool value);

    /// <summary>
    /// Indicates whether to send to all devices registered under your app&#39;s Google Android platform.
    /// </summary>
    bool isIsAndroid() const;
    bool isAndroidIsSet() const;
    void unsetIsAndroid();

    void setIsAndroid(bool value);

    /// <summary>
    /// Indicates whether to send to all devices registered under your app&#39;s Huawei Android platform.
    /// </summary>
    bool isIsHuawei() const;
    bool isHuaweiIsSet() const;
    void unsetIsHuawei();

    void setIsHuawei(bool value);

    /// <summary>
    /// Indicates whether to send to all subscribed web browser users, including Chrome, Firefox, and Safari. You may use this instead as a combined flag instead of separately enabling isChromeWeb, isFirefox, and isSafari, though the three options are equivalent to this one. 
    /// </summary>
    bool isIsAnyWeb() const;
    bool isAnyWebIsSet() const;
    void unsetIsAnyWeb();

    void setIsAnyWeb(bool value);

    /// <summary>
    /// Indicates whether to send to all Google Chrome, Chrome on Android, and Mozilla Firefox users registered under your Chrome &amp; Firefox web push platform.
    /// </summary>
    bool isIsChromeWeb() const;
    bool isChromeWebIsSet() const;
    void unsetIsChromeWeb();

    void setIsChromeWeb(bool value);

    /// <summary>
    /// Indicates whether to send to all Mozilla Firefox desktop users registered under your Firefox web push platform.
    /// </summary>
    bool isIsFirefox() const;
    bool isFirefoxIsSet() const;
    void unsetIsFirefox();

    void setIsFirefox(bool value);

    /// <summary>
    /// Does not support iOS Safari. Indicates whether to send to all Apple&#39;s Safari desktop users registered under your Safari web push platform. Read more iOS Safari
    /// </summary>
    bool isIsSafari() const;
    bool isSafariIsSet() const;
    void unsetIsSafari();

    void setIsSafari(bool value);

    /// <summary>
    /// Indicates whether to send to all devices registered under your app&#39;s Windows platform.
    /// </summary>
    bool isIsWPWNS() const;
    bool isWPWNSIsSet() const;
    void unsetIsWP_WNS();

    void setIsWPWNS(bool value);

    /// <summary>
    /// Indicates whether to send to all devices registered under your app&#39;s Amazon Fire platform.
    /// </summary>
    bool isIsAdm() const;
    bool isAdmIsSet() const;
    void unsetIsAdm();

    void setIsAdm(bool value);

    /// <summary>
    /// This flag is not used for web push Please see isChromeWeb for sending to web push users. This flag only applies to Google Chrome Apps &amp; Extensions. Indicates whether to send to all devices registered under your app&#39;s Google Chrome Apps &amp; Extension platform. 
    /// </summary>
    bool isIsChrome() const;
    bool isChromeIsSet() const;
    void unsetIsChrome();

    void setIsChrome(bool value);

    /// <summary>
    /// Indicates if the message type when targeting with include_external_user_ids for cases where an email, sms, and/or push subscribers have the same external user id. Example: Use the string \&quot;push\&quot; to indicate you are sending a push notification or the string \&quot;email\&quot;for sending emails or \&quot;sms\&quot;for sending SMS. 
    /// </summary>
    utility::string_t getChannelForExternalUserIds() const;
    bool channelForExternalUserIdsIsSet() const;
    void unsetChannel_for_external_user_ids();

    void setChannelForExternalUserIds(const utility::string_t& value);

    /// <summary>
    /// Required: Your OneSignal Application ID, which can be found in Keys &amp; IDs. It is a UUID and looks similar to 8250eaf6-1a58-489e-b136-7c74a864b434. 
    /// </summary>
    utility::string_t getAppId() const;
    bool appIdIsSet() const;
    void unsetApp_id();

    void setAppId(const utility::string_t& value);

    /// <summary>
    /// [DEPRECATED] Correlation and idempotency key. A request received with this parameter will first look for another notification with the same external_id. If one exists, a notification will not be sent, and result of the previous operation will instead be returned. Therefore, if you plan on using this feature, it&#39;s important to use a good source of randomness to generate the UUID passed here. This key is only idempotent for 30 days. After 30 days, the notification could be removed from our system and a notification with the same external_id will be sent again.   See Idempotent Notification Requests for more details writeOnly: true 
    /// </summary>
    utility::string_t getExternalId() const;
    bool externalIdIsSet() const;
    void unsetExternal_id();

    void setExternalId(const utility::string_t& value);

    /// <summary>
    /// Correlation and idempotency key. A request received with this parameter will first look for another notification with the same idempotency key. If one exists, a notification will not be sent, and result of the previous operation will instead be returned. Therefore, if you plan on using this feature, it&#39;s important to use a good source of randomness to generate the UUID passed here. This key is only idempotent for 30 days. After 30 days, the notification could be removed from our system and a notification with the same idempotency key will be sent again.   See Idempotent Notification Requests for more details writeOnly: true 
    /// </summary>
    utility::string_t getIdempotencyKey() const;
    bool idempotencyKeyIsSet() const;
    void unsetIdempotency_key();

    void setIdempotencyKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<StringMap> getContents() const;
    bool contentsIsSet() const;
    void unsetContents();

    void setContents(const std::shared_ptr<StringMap>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<StringMap> getHeadings() const;
    bool headingsIsSet() const;
    void unsetHeadings();

    void setHeadings(const std::shared_ptr<StringMap>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<StringMap> getSubtitle() const;
    bool subtitleIsSet() const;
    void unsetSubtitle();

    void setSubtitle(const std::shared_ptr<StringMap>& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Huawei A custom map of data that is passed back to your app. Same as using Additional Data within the dashboard. Can use up to 2048 bytes of data. Example: {\&quot;abc\&quot;: 123, \&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;event_performed\&quot;: true, \&quot;amount\&quot;: 12.1} 
    /// </summary>
    std::shared_ptr<Object> getData() const;
    bool dataIsSet() const;
    void unsetData();

    void setData(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Huawei Use \&quot;data\&quot; or \&quot;message\&quot; depending on the type of notification you are sending. More details in Data &amp; Background Notifications. 
    /// </summary>
    utility::string_t getHuaweiMsgType() const;
    bool huaweiMsgTypeIsSet() const;
    void unsetHuawei_msg_type();

    void setHuaweiMsgType(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: All The URL to open in the browser when a user clicks on the notification. Note: iOS needs https or updated NSAppTransportSecurity in plist This field supports inline substitutions. Omit if including web_url or app_url Example: https://onesignal.com 
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();

    void setUrl(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: All Browsers Same as url but only sent to web push platforms. Including Chrome, Firefox, Safari, Opera, etc. Example: https://onesignal.com 
    /// </summary>
    utility::string_t getWebUrl() const;
    bool webUrlIsSet() const;
    void unsetWeb_url();

    void setWebUrl(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: All Browsers Same as url but only sent to web push platforms. Including iOS, Android, macOS, Windows, ChromeApps, etc. Example: https://onesignal.com 
    /// </summary>
    utility::string_t getAppUrl() const;
    bool appUrlIsSet() const;
    void unsetApp_url();

    void setAppUrl(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS 10+ Adds media attachments to notifications. Set as JSON object, key as a media id of your choice and the value as a valid local filename or URL. User must press and hold on the notification to view. Do not set mutable_content to download attachments. The OneSignal SDK does this automatically Example: {\&quot;id1\&quot;: \&quot;https://domain.com/image.jpg\&quot;} 
    /// </summary>
    std::shared_ptr<Object> getIosAttachments() const;
    bool iosAttachmentsIsSet() const;
    void unsetIos_attachments();

    void setIosAttachments(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Channel: Push Notifications Platform: All Use a template you setup on our dashboard. The template_id is the UUID found in the URL when viewing a template on our dashboard. Example: be4a8044-bbd6-11e4-a581-000c2940e62c 
    /// </summary>
    utility::string_t getTemplateId() const;
    bool templateIdIsSet() const;
    void unsetTemplate_id();

    void setTemplateId(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS Sending true wakes your app from background to run custom native code (Apple interprets this as content-available&#x3D;1). Note: Not applicable if the app is in the \&quot;force-quit\&quot; state (i.e app was swiped away). Omit the contents field to prevent displaying a visible notification. 
    /// </summary>
    bool isContentAvailable() const;
    bool contentAvailableIsSet() const;
    void unsetContent_available();

    void setContentAvailable(bool value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS 10+ Always defaults to true and cannot be turned off. Allows tracking of notification receives and changing of the notification content in your app before it is displayed. Triggers didReceive(_:withContentHandler:) on your UNNotificationServiceExtension. 
    /// </summary>
    bool isMutableContent() const;
    bool mutableContentIsSet() const;
    void unsetMutable_content();

    void setMutableContent(bool value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS 13+ Use to target a specific experience in your App Clip, or to target your notification to a specific window in a multi-scene App. 
    /// </summary>
    utility::string_t getTargetContentIdentifier() const;
    bool targetContentIdentifierIsSet() const;
    void unsetTarget_content_identifier();

    void setTargetContentIdentifier(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android Picture to display in the expanded view. Can be a drawable resource name or a URL. 
    /// </summary>
    utility::string_t getBigPicture() const;
    bool bigPictureIsSet() const;
    void unsetBig_picture();

    void setBigPicture(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Huawei Picture to display in the expanded view. Can be a drawable resource name or a URL. 
    /// </summary>
    utility::string_t getHuaweiBigPicture() const;
    bool huaweiBigPictureIsSet() const;
    void unsetHuawei_big_picture();

    void setHuaweiBigPicture(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Amazon Picture to display in the expanded view. Can be a drawable resource name or a URL. 
    /// </summary>
    utility::string_t getAdmBigPicture() const;
    bool admBigPictureIsSet() const;
    void unsetAdm_big_picture();

    void setAdmBigPicture(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: ChromeApp Large picture to display below the notification text. Must be a local URL. 
    /// </summary>
    utility::string_t getChromeBigPicture() const;
    bool chromeBigPictureIsSet() const;
    void unsetChrome_big_picture();

    void setChromeBigPicture(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Chrome 56+ Sets the web push notification&#39;s large image to be shown below the notification&#39;s title and text. Please see Web Push Notification Icons. 
    /// </summary>
    utility::string_t getChromeWebImage() const;
    bool chromeWebImageIsSet() const;
    void unsetChrome_web_image();

    void setChromeWebImage(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS 8.0+, Android 4.1+, and derivatives like Amazon Buttons to add to the notification. Icon only works for Android. Buttons show in reverse order of array position i.e. Last item in array shows as first button on device. Example: [{\&quot;id\&quot;: \&quot;id2\&quot;, \&quot;text\&quot;: \&quot;second button\&quot;, \&quot;icon\&quot;: \&quot;ic_menu_share\&quot;}, {\&quot;id\&quot;: \&quot;id1\&quot;, \&quot;text\&quot;: \&quot;first button\&quot;, \&quot;icon\&quot;: \&quot;ic_menu_send\&quot;}] 
    /// </summary>
    std::vector<std::shared_ptr<Button>>& getButtons();
    bool buttonsIsSet() const;
    void unsetButtons();

    void setButtons(const std::vector<std::shared_ptr<Button>>& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Chrome 48+ Add action buttons to the notification. The id field is required. Example: [{\&quot;id\&quot;: \&quot;like-button\&quot;, \&quot;text\&quot;: \&quot;Like\&quot;, \&quot;icon\&quot;: \&quot;http://i.imgur.com/N8SN8ZS.png\&quot;, \&quot;url\&quot;: \&quot;https://yoursite.com\&quot;}, {\&quot;id\&quot;: \&quot;read-more-button\&quot;, \&quot;text\&quot;: \&quot;Read more\&quot;, \&quot;icon\&quot;: \&quot;http://i.imgur.com/MIxJp1L.png\&quot;, \&quot;url\&quot;: \&quot;https://yoursite.com\&quot;}] 
    /// </summary>
    std::vector<std::shared_ptr<Button>>& getWebButtons();
    bool webButtonsIsSet() const;
    void unsetWeb_buttons();

    void setWebButtons(const std::vector<std::shared_ptr<Button>>& value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS Category APS payload, use with registerUserNotificationSettings:categories in your Objective-C / Swift code. Example: calendar category which contains actions like accept and decline iOS 10+ This will trigger your UNNotificationContentExtension whose ID matches this category. 
    /// </summary>
    utility::string_t getIosCategory() const;
    bool iosCategoryIsSet() const;
    void unsetIos_category();

    void setIosCategory(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android The Android Oreo Notification Category to send the notification under. See the Category documentation on creating one and getting it&#39;s id. 
    /// </summary>
    utility::string_t getAndroidChannelId() const;
    bool androidChannelIdIsSet() const;
    void unsetAndroid_channel_id();

    void setAndroidChannelId(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Huawei The Android Oreo Notification Category to send the notification under. See the Category documentation on creating one and getting it&#39;s id. 
    /// </summary>
    utility::string_t getHuaweiChannelId() const;
    bool huaweiChannelIdIsSet() const;
    void unsetHuawei_channel_id();

    void setHuaweiChannelId(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android Use this if you have client side Android Oreo Channels you have already defined in your app with code. 
    /// </summary>
    utility::string_t getExistingAndroidChannelId() const;
    bool existingAndroidChannelIdIsSet() const;
    void unsetExisting_android_channel_id();

    void setExistingAndroidChannelId(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Huawei Use this if you have client side Android Oreo Channels you have already defined in your app with code. 
    /// </summary>
    utility::string_t getHuaweiExistingChannelId() const;
    bool huaweiExistingChannelIdIsSet() const;
    void unsetHuawei_existing_channel_id();

    void setHuaweiExistingChannelId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BasicNotification_allOf_android_background_layout> getAndroidBackgroundLayout() const;
    bool androidBackgroundLayoutIsSet() const;
    void unsetAndroid_background_layout();

    void setAndroidBackgroundLayout(const std::shared_ptr<BasicNotification_allOf_android_background_layout>& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android Icon shown in the status bar and on the top left of the notification. If not set a bell icon will be used or ic_stat_onesignal_default if you have set this resource name. See: How to create small icons 
    /// </summary>
    utility::string_t getSmallIcon() const;
    bool smallIconIsSet() const;
    void unsetSmall_icon();

    void setSmallIcon(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Huawei Icon shown in the status bar and on the top left of the notification. Use an Android resource path (E.g. /drawable/small_icon). Defaults to your app icon if not set. 
    /// </summary>
    utility::string_t getHuaweiSmallIcon() const;
    bool huaweiSmallIconIsSet() const;
    void unsetHuawei_small_icon();

    void setHuaweiSmallIcon(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android Can be a drawable resource name or a URL. See: How to create large icons 
    /// </summary>
    utility::string_t getLargeIcon() const;
    bool largeIconIsSet() const;
    void unsetLarge_icon();

    void setLargeIcon(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Huawei Can be a drawable resource name or a URL. See: How to create large icons 
    /// </summary>
    utility::string_t getHuaweiLargeIcon() const;
    bool huaweiLargeIconIsSet() const;
    void unsetHuawei_large_icon();

    void setHuaweiLargeIcon(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Amazon If not set a bell icon will be used or ic_stat_onesignal_default if you have set this resource name. See: How to create small icons 
    /// </summary>
    utility::string_t getAdmSmallIcon() const;
    bool admSmallIconIsSet() const;
    void unsetAdm_small_icon();

    void setAdmSmallIcon(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Amazon If blank the small_icon is used. Can be a drawable resource name or a URL. See: How to create large icons 
    /// </summary>
    utility::string_t getAdmLargeIcon() const;
    bool admLargeIconIsSet() const;
    void unsetAdm_large_icon();

    void setAdmLargeIcon(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Chrome Sets the web push notification&#39;s icon. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices. Firefox will also use this icon, unless you specify firefox_icon. 
    /// </summary>
    utility::string_t getChromeWebIcon() const;
    bool chromeWebIconIsSet() const;
    void unsetChrome_web_icon();

    void setChromeWebIcon(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Chrome Sets the web push notification icon for Android devices in the notification shade. Please see Web Push Notification Badge. 
    /// </summary>
    utility::string_t getChromeWebBadge() const;
    bool chromeWebBadgeIsSet() const;
    void unsetChrome_web_badge();

    void setChromeWebBadge(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Firefox Not recommended Few people need to set Firefox-specific icons. We recommend setting chrome_web_icon instead, which Firefox will also use. Sets the web push notification&#39;s icon for Firefox. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices. 
    /// </summary>
    utility::string_t getFirefoxIcon() const;
    bool firefoxIconIsSet() const;
    void unsetFirefox_icon();

    void setFirefoxIcon(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: ChromeApp This flag is not used for web push For web push, please see chrome_web_icon instead. The local URL to an icon to use. If blank, the app icon will be used. 
    /// </summary>
    utility::string_t getChromeIcon() const;
    bool chromeIconIsSet() const;
    void unsetChrome_icon();

    void setChromeIcon(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable vibration and sound for the notification. Example: \&quot;notification.wav\&quot; 
    /// </summary>
    utility::string_t getIosSound() const;
    bool iosSoundIsSet() const;
    void unsetIos_sound();

    void setIosSound(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android &amp;#9888;&amp;#65039;Deprecated, this field doesn&#39;t work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable sound for the notification. NOTE: Leave off file extension for Android. Example: \&quot;notification\&quot; 
    /// </summary>
    utility::string_t getAndroidSound() const;
    bool androidSoundIsSet() const;
    void unsetAndroid_sound();

    void setAndroidSound(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Huawei &amp;#9888;&amp;#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. Sound file that is included in your app to play instead of the default device notification sound. NOTE: Leave off file extension for and include the full path.  Example: \&quot;/res/raw/notification\&quot; 
    /// </summary>
    utility::string_t getHuaweiSound() const;
    bool huaweiSoundIsSet() const;
    void unsetHuawei_sound();

    void setHuaweiSound(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Amazon &amp;#9888;&amp;#65039;Deprecated, this field doesn&#39;t work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable sound for the notification. NOTE: Leave off file extension for Android. Example: \&quot;notification\&quot; 
    /// </summary>
    utility::string_t getAdmSound() const;
    bool admSoundIsSet() const;
    void unsetAdm_sound();

    void setAdmSound(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Windows Sound file that is included in your app to play instead of the default device notification sound. Example: \&quot;notification.wav\&quot; 
    /// </summary>
    utility::string_t getWpWnsSound() const;
    bool wpWnsSoundIsSet() const;
    void unsetWp_wns_sound();

    void setWpWnsSound(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android &amp;#9888;&amp;#65039;Deprecated, this field doesn&#39;t work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sets the devices LED notification light if the device has one. ARGB Hex format. Example(Blue): \&quot;FF0000FF\&quot; 
    /// </summary>
    utility::string_t getAndroidLedColor() const;
    bool androidLedColorIsSet() const;
    void unsetAndroid_led_color();

    void setAndroidLedColor(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Huawei &amp;#9888;&amp;#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. Sets the devices LED notification light if the device has one. RGB Hex format. Example(Blue): \&quot;0000FF\&quot; 
    /// </summary>
    utility::string_t getHuaweiLedColor() const;
    bool huaweiLedColorIsSet() const;
    void unsetHuawei_led_color();

    void setHuaweiLedColor(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android Sets the background color of the notification circle to the left of the notification text. Only applies to apps targeting Android API level 21+ on Android 5.0+ devices. Example(Red): \&quot;FFFF0000\&quot; 
    /// </summary>
    utility::string_t getAndroidAccentColor() const;
    bool androidAccentColorIsSet() const;
    void unsetAndroid_accent_color();

    void setAndroidAccentColor(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Huawei Accent Color used on Action Buttons and Group overflow count. Uses RGB Hex value (E.g. #9900FF). Defaults to device&#39;s theme color if not set. 
    /// </summary>
    utility::string_t getHuaweiAccentColor() const;
    bool huaweiAccentColorIsSet() const;
    void unsetHuawei_accent_color();

    void setHuaweiAccentColor(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android 5.0_ &amp;#9888;&amp;#65039;Deprecated, this field doesn&#39;t work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. 1 &#x3D; Public (default) (Shows the full message on the lock screen unless the user has disabled all notifications from showing on the lock screen. Please consider the user and mark private if the contents are.) 0 &#x3D; Private (Hides message contents on lock screen if the user set \&quot;Hide sensitive notification content\&quot; in the system settings) -1 &#x3D; Secret (Notification does not show on the lock screen at all) 
    /// </summary>
    int32_t getAndroidVisibility() const;
    bool androidVisibilityIsSet() const;
    void unsetAndroid_visibility();

    void setAndroidVisibility(int32_t value);

    /// <summary>
    /// Channel: Push Notifications Platform: Huawei &amp;#9888;&amp;#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. 1 &#x3D; Public (default) (Shows the full message on the lock screen unless the user has disabled all notifications from showing on the lock screen. Please consider the user and mark private if the contents are.) 0 &#x3D; Private (Hides message contents on lock screen if the user set \&quot;Hide sensitive notification content\&quot; in the system settings) -1 &#x3D; Secret (Notification does not show on the lock screen at all) 
    /// </summary>
    int32_t getHuaweiVisibility() const;
    bool huaweiVisibilityIsSet() const;
    void unsetHuawei_visibility();

    void setHuaweiVisibility(int32_t value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS Describes whether to set or increase/decrease your app&#39;s iOS badge count by the ios_badgeCount specified count. Can specify None, SetTo, or Increase. &#x60;None&#x60; leaves the count unaffected. &#x60;SetTo&#x60; directly sets the badge count to the number specified in ios_badgeCount. &#x60;Increase&#x60; adds the number specified in ios_badgeCount to the total. Use a negative number to decrease the badge count. 
    /// </summary>
    utility::string_t getIosBadgeType() const;
    bool iosBadgeTypeIsSet() const;
    void unsetIos_badgeType();

    void setIosBadgeType(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS Used with ios_badgeType, describes the value to set or amount to increase/decrease your app&#39;s iOS badge count by. You can use a negative number to decrease the badge count when used with an ios_badgeType of Increase. 
    /// </summary>
    int32_t getIosBadgeCount() const;
    bool iosBadgeCountIsSet() const;
    void unsetIos_badgeCount();

    void setIosBadgeCount(int32_t value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS 10+, Android Only one notification with the same id will be shown on the device. Use the same id to update an existing notification instead of showing a new one. Limit of 64 characters. 
    /// </summary>
    utility::string_t getCollapseId() const;
    bool collapseIdIsSet() const;
    void unsetCollapse_id();

    void setCollapseId(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: All Browsers Display multiple notifications at once with different topics. 
    /// </summary>
    utility::string_t getWebPushTopic() const;
    bool webPushTopicIsSet() const;
    void unsetWeb_push_topic();

    void setWebPushTopic(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS 10+ iOS can localize push notification messages on the client using special parameters such as loc-key. When using the Create Notification endpoint, you must include these parameters inside of a field called apns_alert. Please see Apple&#39;s guide on localizing push notifications to learn more. 
    /// </summary>
    std::shared_ptr<Object> getApnsAlert() const;
    bool apnsAlertIsSet() const;
    void unsetApns_alert();

    void setApnsAlert(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Channel: All Possible values are: timezone (Deliver at a specific time-of-day in each users own timezone) last-active Same as Intelligent Delivery . (Deliver at the same time of day as each user last used your app). If send_after is used, this takes effect after the send_after time has elapsed. 
    /// </summary>
    utility::string_t getDelayedOption() const;
    bool delayedOptionIsSet() const;
    void unsetDelayed_option();

    void setDelayedOption(const utility::string_t& value);

    /// <summary>
    /// Channel: All Use with delayed_option&#x3D;timezone. Examples: \&quot;9:00AM\&quot; \&quot;21:45\&quot; \&quot;9:45:30\&quot; 
    /// </summary>
    utility::string_t getDeliveryTimeOfDay() const;
    bool deliveryTimeOfDayIsSet() const;
    void unsetDelivery_time_of_day();

    void setDeliveryTimeOfDay(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS, Android, Chrome, Firefox, Safari, ChromeWeb Time To Live - In seconds. The notification will be expired if the device does not come back online within this time. The default is 259,200 seconds (3 days). Max value to set is 2419200 seconds (28 days). 
    /// </summary>
    int32_t getTtl() const;
    bool ttlIsSet() const;
    void unsetTtl();

    void setTtl(int32_t value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android, Chrome, ChromeWeb Delivery priority through the push server (example GCM/FCM). Pass 10 for high priority or any other integer for normal priority. Defaults to normal priority for Android and high for iOS. For Android 6.0+ devices setting priority to high will wake the device out of doze mode. 
    /// </summary>
    int32_t getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();

    void setPriority(int32_t value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS valid values: voip Set the value to voip for sending VoIP Notifications This field maps to the APNS header apns-push-type. Note: alert and background are automatically set by OneSignal 
    /// </summary>
    utility::string_t getApnsPushTypeOverride() const;
    bool apnsPushTypeOverrideIsSet() const;
    void unsetApns_push_type_override();

    void setApnsPushTypeOverride(const utility::string_t& value);

    /// <summary>
    /// number of push notifications sent per minute. Paid Feature Only. If throttling is not enabled for the app or the notification, and for free accounts, null is returned. Refer to Throttling for more details.
    /// </summary>
    int32_t getThrottleRatePerMinute() const;
    bool throttleRatePerMinuteIsSet() const;
    void unsetThrottle_rate_per_minute();

    void setThrottleRatePerMinute(int32_t value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android Notifications with the same group will be stacked together using Android&#39;s Notification Grouping feature. 
    /// </summary>
    utility::string_t getAndroidGroup() const;
    bool androidGroupIsSet() const;
    void unsetAndroid_group();

    void setAndroidGroup(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Android Note: This only works for Android 6 and older. Android 7+ allows full expansion of all message. Summary message to display when 2+ notifications are stacked together. Default is \&quot;# new messages\&quot;. Include $[notif_count] in your message and it will be replaced with the current number. Languages - The value of each key is the message that will be sent to users for that language. \&quot;en\&quot; (English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese. Read more: supported languages. Example: {\&quot;en\&quot;: \&quot;You have $[notif_count] new messages\&quot;} 
    /// </summary>
    utility::string_t getAndroidGroupMessage() const;
    bool androidGroupMessageIsSet() const;
    void unsetAndroid_group_message();

    void setAndroidGroupMessage(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Amazon Notifications with the same group will be stacked together using Android&#39;s Notification Grouping feature. 
    /// </summary>
    utility::string_t getAdmGroup() const;
    bool admGroupIsSet() const;
    void unsetAdm_group();

    void setAdmGroup(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: Amazon Summary message to display when 2+ notifications are stacked together. Default is \&quot;# new messages\&quot;. Include $[notif_count] in your message and it will be replaced with the current number. \&quot;en\&quot; (English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese. The value of each key is the message that will be sent to users for that language. Example: {\&quot;en\&quot;: \&quot;You have $[notif_count] new messages\&quot;} 
    /// </summary>
    std::shared_ptr<Object> getAdmGroupMessage() const;
    bool admGroupMessageIsSet() const;
    void unsetAdm_group_message();

    void setAdmGroupMessage(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS 12+ This parameter is supported in iOS 12 and above. It allows you to group related notifications together. If two notifications have the same thread-id, they will both be added to the same group. 
    /// </summary>
    utility::string_t getThreadId() const;
    bool threadIdIsSet() const;
    void unsetThread_id();

    void setThreadId(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS 12+ When using thread_id to create grouped notifications in iOS 12+, you can also control the summary. For example, a grouped notification can say \&quot;12 more notifications from John Doe\&quot;. The summary_arg lets you set the name of the person/thing the notifications are coming from, and will show up as \&quot;X more notifications from summary_arg\&quot; 
    /// </summary>
    utility::string_t getSummaryArg() const;
    bool summaryArgIsSet() const;
    void unsetSummary_arg();

    void setSummaryArg(const utility::string_t& value);

    /// <summary>
    /// Channel: Push Notifications Platform: iOS 12+ When using thread_id, you can also control the count of the number of notifications in the group. For example, if the group already has 12 notifications, and you send a new notification with summary_arg_count &#x3D; 2, the new total will be 14 and the summary will be \&quot;14 more notifications from summary_arg\&quot; 
    /// </summary>
    int32_t getSummaryArgCount() const;
    bool summaryArgCountIsSet() const;
    void unsetSummary_arg_count();

    void setSummaryArgCount(int32_t value);

    /// <summary>
    /// Channel: Email Required.  The subject of the email. 
    /// </summary>
    utility::string_t getEmailSubject() const;
    bool emailSubjectIsSet() const;
    void unsetEmail_subject();

    void setEmailSubject(const utility::string_t& value);

    /// <summary>
    /// Channel: Email Required unless template_id is set. HTML suported The body of the email you wish to send. Typically, customers include their own HTML templates here. Must include [unsubscribe_url] in an &lt;a&gt; tag somewhere in the email. Note: any malformed HTML content will be sent to users. Please double-check your HTML is valid. 
    /// </summary>
    utility::string_t getEmailBody() const;
    bool emailBodyIsSet() const;
    void unsetEmail_body();

    void setEmailBody(const utility::string_t& value);

    /// <summary>
    /// Channel: Email The name the email is from. If not specified, will default to \&quot;from name\&quot; set in the OneSignal Dashboard Email Settings. 
    /// </summary>
    utility::string_t getEmailFromName() const;
    bool emailFromNameIsSet() const;
    void unsetEmail_from_name();

    void setEmailFromName(const utility::string_t& value);

    /// <summary>
    /// Channel: Email The email address the email is from. If not specified, will default to \&quot;from email\&quot; set in the OneSignal Dashboard Email Settings. 
    /// </summary>
    utility::string_t getEmailFromAddress() const;
    bool emailFromAddressIsSet() const;
    void unsetEmail_from_address();

    void setEmailFromAddress(const utility::string_t& value);

    /// <summary>
    /// Channel: Email The preheader text of the email. Preheader is the preview text displayed immediately after an email subject that provides additional context about the email content. If not specified, will default to null. 
    /// </summary>
    utility::string_t getEmailPreheader() const;
    bool emailPreheaderIsSet() const;
    void unsetEmail_preheader();

    void setEmailPreheader(const utility::string_t& value);

    /// <summary>
    /// Channel: Email Default is &#x60;false&#x60;. This field is used to send transactional notifications. If set to &#x60;true&#x60;, this notification will also be sent to unsubscribed emails. If a &#x60;template_id&#x60; is provided, the &#x60;include_unsubscribed&#x60; value from the template will be inherited. If you are using a third-party ESP, this field requires the ESP&#39;s list of unsubscribed emails to be cleared.
    /// </summary>
    bool isIncludeUnsubscribed() const;
    bool includeUnsubscribedIsSet() const;
    void unsetInclude_unsubscribed();

    void setIncludeUnsubscribed(bool value);

    /// <summary>
    /// Channel: SMS Phone Number used to send SMS. Should be a registered Twilio phone number in E.164 format. 
    /// </summary>
    utility::string_t getSmsFrom() const;
    bool smsFromIsSet() const;
    void unsetSms_from();

    void setSmsFrom(const utility::string_t& value);

    /// <summary>
    /// Channel: SMS URLs for the media files to be attached to the SMS content. Limit: 10 media urls with a total max. size of 5MBs. 
    /// </summary>
    std::vector<utility::string_t>& getSmsMediaUrls();
    bool smsMediaUrlsIsSet() const;
    void unsetSms_media_urls();

    void setSmsMediaUrls(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Filter>>& getFilters();
    bool filtersIsSet() const;
    void unsetFilters();

    void setFilters(const std::vector<std::shared_ptr<Filter>>& value);

    /// <summary>
    /// Channel: All JSON object that can be used as a source of message personalization data for fields that support tag variable substitution. Push, SMS: Can accept up to 2048 bytes of valid JSON. Email: Can accept up to 10000 bytes of valid JSON. Example: {\&quot;order_id\&quot;: 123, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;amount\&quot;: 25} 
    /// </summary>
    std::shared_ptr<Object> getCustomData() const;
    bool customDataIsSet() const;
    void unsetCustom_data();

    void setCustomData(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Number of notifications that were successfully delivered.
    /// </summary>
    int32_t getSuccessful() const;
    bool successfulIsSet() const;
    void unsetSuccessful();

    void setSuccessful(int32_t value);

    /// <summary>
    /// Number of notifications that could not be delivered due to those devices being unsubscribed.
    /// </summary>
    int32_t getFailed() const;
    bool failedIsSet() const;
    void unsetFailed();

    void setFailed(int32_t value);

    /// <summary>
    /// Number of notifications that could not be delivered due to an error. You can find more information by viewing the notification in the dashboard.
    /// </summary>
    int32_t getErrored() const;
    bool erroredIsSet() const;
    void unsetErrored();

    void setErrored(int32_t value);

    /// <summary>
    /// Number of users who have clicked / tapped on your notification.
    /// </summary>
    int32_t getConverted() const;
    bool convertedIsSet() const;
    void unsetConverted();

    void setConverted(int32_t value);

    /// <summary>
    /// Confirmed Deliveries number of devices that received the push notification. Paid Feature Only. Free accounts will see 0.
    /// </summary>
    int32_t getReceived() const;
    bool receivedIsSet() const;
    void unsetReceived();

    void setReceived(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<OutcomeData>>& getOutcomes();
    bool outcomesIsSet() const;
    void unsetOutcomes();

    void setOutcomes(const std::vector<std::shared_ptr<OutcomeData>>& value);

    /// <summary>
    /// Number of notifications that have not been sent out yet. This can mean either our system is still processing the notification or you have delayed options set.
    /// </summary>
    int32_t getRemaining() const;
    bool remainingIsSet() const;
    void unsetRemaining();

    void setRemaining(int32_t value);

    /// <summary>
    /// Unix timestamp indicating when the notification was created.
    /// </summary>
    int64_t getQueuedAt() const;
    bool queuedAtIsSet() const;
    void unsetQueued_at();

    void setQueuedAt(int64_t value);

    /// <summary>
    /// Unix timestamp indicating when notification delivery should begin.
    /// </summary>
    int64_t getSendAfter() const;
    bool sendAfterIsSet() const;
    void unsetSend_after();

    void setSendAfter(int64_t value);

    /// <summary>
    /// Unix timestamp indicating when notification delivery completed. The delivery duration from start to finish can be calculated with completed_at - send_after.
    /// </summary>
    int64_t getCompletedAt() const;
    bool completedAtIsSet() const;
    void unsetCompleted_at();

    void setCompletedAt(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlatformDeliveryData> getPlatformDeliveryStats() const;
    bool platformDeliveryStatsIsSet() const;
    void unsetPlatform_delivery_stats();

    void setPlatformDeliveryStats(const std::shared_ptr<PlatformDeliveryData>& value);


protected:
    std::vector<utility::string_t> m_Included_segments;
    bool m_Included_segmentsIsSet;
    std::vector<utility::string_t> m_Excluded_segments;
    bool m_Excluded_segmentsIsSet;
    std::vector<utility::string_t> m_Include_player_ids;
    bool m_Include_player_idsIsSet;
    std::vector<utility::string_t> m_Include_external_user_ids;
    bool m_Include_external_user_idsIsSet;
    std::vector<utility::string_t> m_Include_email_tokens;
    bool m_Include_email_tokensIsSet;
    std::vector<utility::string_t> m_Include_phone_numbers;
    bool m_Include_phone_numbersIsSet;
    std::vector<utility::string_t> m_Include_ios_tokens;
    bool m_Include_ios_tokensIsSet;
    std::vector<utility::string_t> m_Include_wp_wns_uris;
    bool m_Include_wp_wns_urisIsSet;
    std::vector<utility::string_t> m_Include_amazon_reg_ids;
    bool m_Include_amazon_reg_idsIsSet;
    std::vector<utility::string_t> m_Include_chrome_reg_ids;
    bool m_Include_chrome_reg_idsIsSet;
    std::vector<utility::string_t> m_Include_chrome_web_reg_ids;
    bool m_Include_chrome_web_reg_idsIsSet;
    std::vector<utility::string_t> m_Include_android_reg_ids;
    bool m_Include_android_reg_idsIsSet;
    std::shared_ptr<PlayerNotificationTarget_include_aliases> m_Include_aliases;
    bool m_Include_aliasesIsSet;
    utility::string_t m_Target_channel;
    bool m_Target_channelIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    int32_t m_Value;
    bool m_ValueIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Aggregation;
    bool m_AggregationIsSet;
    bool m_IsIos;
    bool m_IsIosIsSet;
    bool m_IsAndroid;
    bool m_IsAndroidIsSet;
    bool m_IsHuawei;
    bool m_IsHuaweiIsSet;
    bool m_IsAnyWeb;
    bool m_IsAnyWebIsSet;
    bool m_IsChromeWeb;
    bool m_IsChromeWebIsSet;
    bool m_IsFirefox;
    bool m_IsFirefoxIsSet;
    bool m_IsSafari;
    bool m_IsSafariIsSet;
    bool m_IsWP_WNS;
    bool m_IsWP_WNSIsSet;
    bool m_IsAdm;
    bool m_IsAdmIsSet;
    bool m_IsChrome;
    bool m_IsChromeIsSet;
    utility::string_t m_Channel_for_external_user_ids;
    bool m_Channel_for_external_user_idsIsSet;
    utility::string_t m_App_id;
    bool m_App_idIsSet;
    utility::string_t m_External_id;
    bool m_External_idIsSet;
    utility::string_t m_Idempotency_key;
    bool m_Idempotency_keyIsSet;
    std::shared_ptr<StringMap> m_Contents;
    bool m_ContentsIsSet;
    std::shared_ptr<StringMap> m_Headings;
    bool m_HeadingsIsSet;
    std::shared_ptr<StringMap> m_Subtitle;
    bool m_SubtitleIsSet;
    std::shared_ptr<Object> m_Data;
    bool m_DataIsSet;
    utility::string_t m_Huawei_msg_type;
    bool m_Huawei_msg_typeIsSet;
    utility::string_t m_Url;
    bool m_UrlIsSet;
    utility::string_t m_Web_url;
    bool m_Web_urlIsSet;
    utility::string_t m_App_url;
    bool m_App_urlIsSet;
    std::shared_ptr<Object> m_Ios_attachments;
    bool m_Ios_attachmentsIsSet;
    utility::string_t m_Template_id;
    bool m_Template_idIsSet;
    bool m_Content_available;
    bool m_Content_availableIsSet;
    bool m_Mutable_content;
    bool m_Mutable_contentIsSet;
    utility::string_t m_Target_content_identifier;
    bool m_Target_content_identifierIsSet;
    utility::string_t m_Big_picture;
    bool m_Big_pictureIsSet;
    utility::string_t m_Huawei_big_picture;
    bool m_Huawei_big_pictureIsSet;
    utility::string_t m_Adm_big_picture;
    bool m_Adm_big_pictureIsSet;
    utility::string_t m_Chrome_big_picture;
    bool m_Chrome_big_pictureIsSet;
    utility::string_t m_Chrome_web_image;
    bool m_Chrome_web_imageIsSet;
    std::vector<std::shared_ptr<Button>> m_Buttons;
    bool m_ButtonsIsSet;
    std::vector<std::shared_ptr<Button>> m_Web_buttons;
    bool m_Web_buttonsIsSet;
    utility::string_t m_Ios_category;
    bool m_Ios_categoryIsSet;
    utility::string_t m_Android_channel_id;
    bool m_Android_channel_idIsSet;
    utility::string_t m_Huawei_channel_id;
    bool m_Huawei_channel_idIsSet;
    utility::string_t m_Existing_android_channel_id;
    bool m_Existing_android_channel_idIsSet;
    utility::string_t m_Huawei_existing_channel_id;
    bool m_Huawei_existing_channel_idIsSet;
    std::shared_ptr<BasicNotification_allOf_android_background_layout> m_Android_background_layout;
    bool m_Android_background_layoutIsSet;
    utility::string_t m_Small_icon;
    bool m_Small_iconIsSet;
    utility::string_t m_Huawei_small_icon;
    bool m_Huawei_small_iconIsSet;
    utility::string_t m_Large_icon;
    bool m_Large_iconIsSet;
    utility::string_t m_Huawei_large_icon;
    bool m_Huawei_large_iconIsSet;
    utility::string_t m_Adm_small_icon;
    bool m_Adm_small_iconIsSet;
    utility::string_t m_Adm_large_icon;
    bool m_Adm_large_iconIsSet;
    utility::string_t m_Chrome_web_icon;
    bool m_Chrome_web_iconIsSet;
    utility::string_t m_Chrome_web_badge;
    bool m_Chrome_web_badgeIsSet;
    utility::string_t m_Firefox_icon;
    bool m_Firefox_iconIsSet;
    utility::string_t m_Chrome_icon;
    bool m_Chrome_iconIsSet;
    utility::string_t m_Ios_sound;
    bool m_Ios_soundIsSet;
    utility::string_t m_Android_sound;
    bool m_Android_soundIsSet;
    utility::string_t m_Huawei_sound;
    bool m_Huawei_soundIsSet;
    utility::string_t m_Adm_sound;
    bool m_Adm_soundIsSet;
    utility::string_t m_Wp_wns_sound;
    bool m_Wp_wns_soundIsSet;
    utility::string_t m_Android_led_color;
    bool m_Android_led_colorIsSet;
    utility::string_t m_Huawei_led_color;
    bool m_Huawei_led_colorIsSet;
    utility::string_t m_Android_accent_color;
    bool m_Android_accent_colorIsSet;
    utility::string_t m_Huawei_accent_color;
    bool m_Huawei_accent_colorIsSet;
    int32_t m_Android_visibility;
    bool m_Android_visibilityIsSet;
    int32_t m_Huawei_visibility;
    bool m_Huawei_visibilityIsSet;
    utility::string_t m_Ios_badgeType;
    bool m_Ios_badgeTypeIsSet;
    int32_t m_Ios_badgeCount;
    bool m_Ios_badgeCountIsSet;
    utility::string_t m_Collapse_id;
    bool m_Collapse_idIsSet;
    utility::string_t m_Web_push_topic;
    bool m_Web_push_topicIsSet;
    std::shared_ptr<Object> m_Apns_alert;
    bool m_Apns_alertIsSet;
    utility::string_t m_Delayed_option;
    bool m_Delayed_optionIsSet;
    utility::string_t m_Delivery_time_of_day;
    bool m_Delivery_time_of_dayIsSet;
    int32_t m_Ttl;
    bool m_TtlIsSet;
    int32_t m_Priority;
    bool m_PriorityIsSet;
    utility::string_t m_Apns_push_type_override;
    bool m_Apns_push_type_overrideIsSet;
    int32_t m_Throttle_rate_per_minute;
    bool m_Throttle_rate_per_minuteIsSet;
    utility::string_t m_Android_group;
    bool m_Android_groupIsSet;
    utility::string_t m_Android_group_message;
    bool m_Android_group_messageIsSet;
    utility::string_t m_Adm_group;
    bool m_Adm_groupIsSet;
    std::shared_ptr<Object> m_Adm_group_message;
    bool m_Adm_group_messageIsSet;
    utility::string_t m_Thread_id;
    bool m_Thread_idIsSet;
    utility::string_t m_Summary_arg;
    bool m_Summary_argIsSet;
    int32_t m_Summary_arg_count;
    bool m_Summary_arg_countIsSet;
    utility::string_t m_Email_subject;
    bool m_Email_subjectIsSet;
    utility::string_t m_Email_body;
    bool m_Email_bodyIsSet;
    utility::string_t m_Email_from_name;
    bool m_Email_from_nameIsSet;
    utility::string_t m_Email_from_address;
    bool m_Email_from_addressIsSet;
    utility::string_t m_Email_preheader;
    bool m_Email_preheaderIsSet;
    bool m_Include_unsubscribed;
    bool m_Include_unsubscribedIsSet;
    utility::string_t m_Sms_from;
    bool m_Sms_fromIsSet;
    std::vector<utility::string_t> m_Sms_media_urls;
    bool m_Sms_media_urlsIsSet;
    std::vector<std::shared_ptr<Filter>> m_Filters;
    bool m_FiltersIsSet;
    std::shared_ptr<Object> m_Custom_data;
    bool m_Custom_dataIsSet;
    int32_t m_Successful;
    bool m_SuccessfulIsSet;
    int32_t m_Failed;
    bool m_FailedIsSet;
    int32_t m_Errored;
    bool m_ErroredIsSet;
    int32_t m_Converted;
    bool m_ConvertedIsSet;
    int32_t m_Received;
    bool m_ReceivedIsSet;
    std::vector<std::shared_ptr<OutcomeData>> m_Outcomes;
    bool m_OutcomesIsSet;
    int32_t m_Remaining;
    bool m_RemainingIsSet;
    int64_t m_Queued_at;
    bool m_Queued_atIsSet;
    int64_t m_Send_after;
    bool m_Send_afterIsSet;
    int64_t m_Completed_at;
    bool m_Completed_atIsSet;
    std::shared_ptr<PlatformDeliveryData> m_Platform_delivery_stats;
    bool m_Platform_delivery_statsIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_NotificationWithMeta_H_ */
