/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * NotificationWithMeta_allOf.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_NotificationWithMeta_allOf_H_
#define COM_ONESIGNAL_CLIENT_MODEL_NotificationWithMeta_allOf_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include "CppRestOneSignalAPIClient/model/PlatformDeliveryData.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {

class PlatformDeliveryData;

/// <summary>
/// 
/// </summary>
class  NotificationWithMeta_allOf
    : public ModelBase
{
public:
    NotificationWithMeta_allOf();
    virtual ~NotificationWithMeta_allOf();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// NotificationWithMeta_allOf members

    /// <summary>
    /// Number of notifications that have not been sent out yet. This can mean either our system is still processing the notification or you have delayed options set.
    /// </summary>
    int32_t getRemaining() const;
    bool remainingIsSet() const;
    void unsetRemaining();

    void setRemaining(int32_t value);

    /// <summary>
    /// Number of notifications that were successfully delivered.
    /// </summary>
    int32_t getSuccessful() const;
    bool successfulIsSet() const;
    void unsetSuccessful();

    void setSuccessful(int32_t value);

    /// <summary>
    /// Number of notifications that could not be delivered due to those devices being unsubscribed.
    /// </summary>
    int32_t getFailed() const;
    bool failedIsSet() const;
    void unsetFailed();

    void setFailed(int32_t value);

    /// <summary>
    /// Number of notifications that could not be delivered due to an error. You can find more information by viewing the notification in the dashboard.
    /// </summary>
    int32_t getErrored() const;
    bool erroredIsSet() const;
    void unsetErrored();

    void setErrored(int32_t value);

    /// <summary>
    /// Number of users who have clicked / tapped on your notification.
    /// </summary>
    int32_t getConverted() const;
    bool convertedIsSet() const;
    void unsetConverted();

    void setConverted(int32_t value);

    /// <summary>
    /// Unix timestamp indicating when the notification was created.
    /// </summary>
    int64_t getQueuedAt() const;
    bool queuedAtIsSet() const;
    void unsetQueued_at();

    void setQueuedAt(int64_t value);

    /// <summary>
    /// Unix timestamp indicating when notification delivery should begin.
    /// </summary>
    int64_t getSendAfter() const;
    bool sendAfterIsSet() const;
    void unsetSend_after();

    void setSendAfter(int64_t value);

    /// <summary>
    /// Unix timestamp indicating when notification delivery completed. The delivery duration from start to finish can be calculated with completed_at - send_after.
    /// </summary>
    int64_t getCompletedAt() const;
    bool completedAtIsSet() const;
    void unsetCompleted_at();

    void setCompletedAt(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlatformDeliveryData> getPlatformDeliveryStats() const;
    bool platformDeliveryStatsIsSet() const;
    void unsetPlatform_delivery_stats();

    void setPlatformDeliveryStats(const std::shared_ptr<PlatformDeliveryData>& value);

    /// <summary>
    /// Confirmed Deliveries number of devices that received the push notification. Paid Feature Only. Free accounts will see 0.
    /// </summary>
    int32_t getReceived() const;
    bool receivedIsSet() const;
    void unsetReceived();

    void setReceived(int32_t value);

    /// <summary>
    /// number of push notifications sent per minute. Paid Feature Only. If throttling is not enabled for the app or the notification, and for free accounts, null is returned. Refer to Throttling for more details.
    /// </summary>
    int32_t getThrottleRatePerMinute() const;
    bool throttleRatePerMinuteIsSet() const;
    void unsetThrottle_rate_per_minute();

    void setThrottleRatePerMinute(int32_t value);


protected:
    int32_t m_Remaining;
    bool m_RemainingIsSet;
    int32_t m_Successful;
    bool m_SuccessfulIsSet;
    int32_t m_Failed;
    bool m_FailedIsSet;
    int32_t m_Errored;
    bool m_ErroredIsSet;
    int32_t m_Converted;
    bool m_ConvertedIsSet;
    int64_t m_Queued_at;
    bool m_Queued_atIsSet;
    int64_t m_Send_after;
    bool m_Send_afterIsSet;
    int64_t m_Completed_at;
    bool m_Completed_atIsSet;
    std::shared_ptr<PlatformDeliveryData> m_Platform_delivery_stats;
    bool m_Platform_delivery_statsIsSet;
    int32_t m_Received;
    bool m_ReceivedIsSet;
    int32_t m_Throttle_rate_per_minute;
    bool m_Throttle_rate_per_minuteIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_NotificationWithMeta_allOf_H_ */
