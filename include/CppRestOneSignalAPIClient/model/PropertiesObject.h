/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PropertiesObject.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_PropertiesObject_H_
#define COM_ONESIGNAL_CLIENT_MODEL_PropertiesObject_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include "CppRestOneSignalAPIClient/model/Purchase.h"
#include <vector>

namespace com {
namespace onesignal {
namespace client {
namespace model {

class Purchase;

/// <summary>
/// 
/// </summary>
class  PropertiesObject
    : public ModelBase
{
public:
    PropertiesObject();
    virtual ~PropertiesObject();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PropertiesObject members

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();

    void setTags(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLanguage() const;
    bool languageIsSet() const;
    void unsetLanguage();

    void setLanguage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTimezoneId() const;
    bool timezoneIdIsSet() const;
    void unsetTimezone_id();

    void setTimezoneId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getLat() const;
    bool latIsSet() const;
    void unsetLat();

    void setLat(double value);

    /// <summary>
    /// 
    /// </summary>
    double getLong() const;
    bool r_longIsSet() const;
    void unsetlong();

    void setLong(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getFirstActive() const;
    bool firstActiveIsSet() const;
    void unsetFirst_active();

    void setFirstActive(double value);

    /// <summary>
    /// 
    /// </summary>
    double getLastActive() const;
    bool lastActiveIsSet() const;
    void unsetLast_active();

    void setLastActive(double value);

    /// <summary>
    /// 
    /// </summary>
    double getAmountSpent() const;
    bool amountSpentIsSet() const;
    void unsetAmount_spent();

    void setAmountSpent(double value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Purchase>>& getPurchases();
    bool purchasesIsSet() const;
    void unsetPurchases();

    void setPurchases(const std::vector<std::shared_ptr<Purchase>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIp() const;
    bool ipIsSet() const;
    void unsetIp();

    void setIp(const utility::string_t& value);


protected:
    std::map<utility::string_t, utility::string_t> m_Tags;
    bool m_TagsIsSet;
    utility::string_t m_Language;
    bool m_LanguageIsSet;
    utility::string_t m_Timezone_id;
    bool m_Timezone_idIsSet;
    double m_Lat;
    bool m_LatIsSet;
    double m_long;
    bool m_longIsSet;
    utility::string_t m_Country;
    bool m_CountryIsSet;
    double m_First_active;
    bool m_First_activeIsSet;
    double m_Last_active;
    bool m_Last_activeIsSet;
    double m_Amount_spent;
    bool m_Amount_spentIsSet;
    std::vector<std::shared_ptr<Purchase>> m_Purchases;
    bool m_PurchasesIsSet;
    utility::string_t m_Ip;
    bool m_IpIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_PropertiesObject_H_ */
