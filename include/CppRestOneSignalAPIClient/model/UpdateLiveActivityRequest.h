/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateLiveActivityRequest.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_UpdateLiveActivityRequest_H_
#define COM_ONESIGNAL_CLIENT_MODEL_UpdateLiveActivityRequest_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include "CppRestOneSignalAPIClient/Object.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace onesignal {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  UpdateLiveActivityRequest
    : public ModelBase
{
public:
    UpdateLiveActivityRequest();
    virtual ~UpdateLiveActivityRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UpdateLiveActivityRequest members

    /// <summary>
    /// Type of live activity
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEvent() const;
    bool eventIsSet() const;
    void unsetEvent();

    void setEvent(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getEventUpdates() const;
    bool eventUpdatesIsSet() const;
    void unsetEvent_updates();

    void setEventUpdates(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Timestamp; only allowed if event is \&quot;end\&quot;
    /// </summary>
    double getDismissAt() const;
    bool dismissAtIsSet() const;
    void unsetDismiss_at();

    void setDismissAt(double value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Event;
    bool m_EventIsSet;
    std::shared_ptr<Object> m_Event_updates;
    bool m_Event_updatesIsSet;
    double m_Dismiss_at;
    bool m_Dismiss_atIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_UpdateLiveActivityRequest_H_ */
