/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * User.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_User_H_
#define COM_ONESIGNAL_CLIENT_MODEL_User_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include "CppRestOneSignalAPIClient/model/PropertiesObject.h"
#include <map>
#include <vector>
#include "CppRestOneSignalAPIClient/model/SubscriptionObject.h"
#include "CppRestOneSignalAPIClient/model/User_subscription_options.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {

class PropertiesObject;
class SubscriptionObject;
class User_subscription_options;

/// <summary>
/// 
/// </summary>
class  User
    : public ModelBase
{
public:
    User();
    virtual ~User();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// User members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PropertiesObject> getProperties() const;
    bool propertiesIsSet() const;
    void unsetProperties();

    void setProperties(const std::shared_ptr<PropertiesObject>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getIdentity();
    bool identityIsSet() const;
    void unsetIdentity();

    void setIdentity(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SubscriptionObject>>& getSubscriptions();
    bool subscriptionsIsSet() const;
    void unsetSubscriptions();

    void setSubscriptions(const std::vector<std::shared_ptr<SubscriptionObject>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<User_subscription_options> getSubscriptionOptions() const;
    bool subscriptionOptionsIsSet() const;
    void unsetSubscription_options();

    void setSubscriptionOptions(const std::shared_ptr<User_subscription_options>& value);


protected:
    std::shared_ptr<PropertiesObject> m_Properties;
    bool m_PropertiesIsSet;
    std::map<utility::string_t, utility::string_t> m_Identity;
    bool m_IdentityIsSet;
    std::vector<std::shared_ptr<SubscriptionObject>> m_Subscriptions;
    bool m_SubscriptionsIsSet;
    std::shared_ptr<User_subscription_options> m_Subscription_options;
    bool m_Subscription_optionsIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_User_H_ */
