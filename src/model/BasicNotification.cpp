/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/BasicNotification.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



BasicNotification::BasicNotification()
{
    m_Included_segmentsIsSet = false;
    m_Excluded_segmentsIsSet = false;
    m_Include_player_idsIsSet = false;
    m_Include_external_user_idsIsSet = false;
    m_Include_email_tokensIsSet = false;
    m_Include_phone_numbersIsSet = false;
    m_Include_ios_tokensIsSet = false;
    m_Include_wp_wns_urisIsSet = false;
    m_Include_amazon_reg_idsIsSet = false;
    m_Include_chrome_reg_idsIsSet = false;
    m_Include_chrome_web_reg_idsIsSet = false;
    m_Include_android_reg_idsIsSet = false;
    m_Include_aliasesIsSet = false;
    m_Target_channel = utility::conversions::to_string_t("");
    m_Target_channelIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Value = 0;
    m_ValueIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Aggregation = utility::conversions::to_string_t("");
    m_AggregationIsSet = false;
    m_IsIos = false;
    m_IsIosIsSet = false;
    m_IsAndroid = false;
    m_IsAndroidIsSet = false;
    m_IsHuawei = false;
    m_IsHuaweiIsSet = false;
    m_IsAnyWeb = false;
    m_IsAnyWebIsSet = false;
    m_IsChromeWeb = false;
    m_IsChromeWebIsSet = false;
    m_IsFirefox = false;
    m_IsFirefoxIsSet = false;
    m_IsSafari = false;
    m_IsSafariIsSet = false;
    m_IsWP_WNS = false;
    m_IsWP_WNSIsSet = false;
    m_IsAdm = false;
    m_IsAdmIsSet = false;
    m_IsChrome = false;
    m_IsChromeIsSet = false;
    m_Channel_for_external_user_ids = utility::conversions::to_string_t("");
    m_Channel_for_external_user_idsIsSet = false;
    m_App_id = utility::conversions::to_string_t("");
    m_App_idIsSet = false;
    m_External_id = utility::conversions::to_string_t("");
    m_External_idIsSet = false;
    m_Idempotency_key = utility::conversions::to_string_t("");
    m_Idempotency_keyIsSet = false;
    m_ContentsIsSet = false;
    m_HeadingsIsSet = false;
    m_SubtitleIsSet = false;
    m_DataIsSet = false;
    m_Huawei_msg_type = utility::conversions::to_string_t("");
    m_Huawei_msg_typeIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Web_url = utility::conversions::to_string_t("");
    m_Web_urlIsSet = false;
    m_App_url = utility::conversions::to_string_t("");
    m_App_urlIsSet = false;
    m_Ios_attachmentsIsSet = false;
    m_Template_id = utility::conversions::to_string_t("");
    m_Template_idIsSet = false;
    m_Content_available = false;
    m_Content_availableIsSet = false;
    m_Mutable_content = false;
    m_Mutable_contentIsSet = false;
    m_Target_content_identifier = utility::conversions::to_string_t("");
    m_Target_content_identifierIsSet = false;
    m_Big_picture = utility::conversions::to_string_t("");
    m_Big_pictureIsSet = false;
    m_Huawei_big_picture = utility::conversions::to_string_t("");
    m_Huawei_big_pictureIsSet = false;
    m_Adm_big_picture = utility::conversions::to_string_t("");
    m_Adm_big_pictureIsSet = false;
    m_Chrome_big_picture = utility::conversions::to_string_t("");
    m_Chrome_big_pictureIsSet = false;
    m_Chrome_web_image = utility::conversions::to_string_t("");
    m_Chrome_web_imageIsSet = false;
    m_ButtonsIsSet = false;
    m_Web_buttonsIsSet = false;
    m_Ios_category = utility::conversions::to_string_t("");
    m_Ios_categoryIsSet = false;
    m_Android_channel_id = utility::conversions::to_string_t("");
    m_Android_channel_idIsSet = false;
    m_Huawei_channel_id = utility::conversions::to_string_t("");
    m_Huawei_channel_idIsSet = false;
    m_Existing_android_channel_id = utility::conversions::to_string_t("");
    m_Existing_android_channel_idIsSet = false;
    m_Huawei_existing_channel_id = utility::conversions::to_string_t("");
    m_Huawei_existing_channel_idIsSet = false;
    m_Android_background_layoutIsSet = false;
    m_Small_icon = utility::conversions::to_string_t("");
    m_Small_iconIsSet = false;
    m_Huawei_small_icon = utility::conversions::to_string_t("");
    m_Huawei_small_iconIsSet = false;
    m_Large_icon = utility::conversions::to_string_t("");
    m_Large_iconIsSet = false;
    m_Huawei_large_icon = utility::conversions::to_string_t("");
    m_Huawei_large_iconIsSet = false;
    m_Adm_small_icon = utility::conversions::to_string_t("");
    m_Adm_small_iconIsSet = false;
    m_Adm_large_icon = utility::conversions::to_string_t("");
    m_Adm_large_iconIsSet = false;
    m_Chrome_web_icon = utility::conversions::to_string_t("");
    m_Chrome_web_iconIsSet = false;
    m_Chrome_web_badge = utility::conversions::to_string_t("");
    m_Chrome_web_badgeIsSet = false;
    m_Firefox_icon = utility::conversions::to_string_t("");
    m_Firefox_iconIsSet = false;
    m_Chrome_icon = utility::conversions::to_string_t("");
    m_Chrome_iconIsSet = false;
    m_Ios_sound = utility::conversions::to_string_t("");
    m_Ios_soundIsSet = false;
    m_Android_sound = utility::conversions::to_string_t("");
    m_Android_soundIsSet = false;
    m_Huawei_sound = utility::conversions::to_string_t("");
    m_Huawei_soundIsSet = false;
    m_Adm_sound = utility::conversions::to_string_t("");
    m_Adm_soundIsSet = false;
    m_Wp_wns_sound = utility::conversions::to_string_t("");
    m_Wp_wns_soundIsSet = false;
    m_Android_led_color = utility::conversions::to_string_t("");
    m_Android_led_colorIsSet = false;
    m_Huawei_led_color = utility::conversions::to_string_t("");
    m_Huawei_led_colorIsSet = false;
    m_Android_accent_color = utility::conversions::to_string_t("");
    m_Android_accent_colorIsSet = false;
    m_Huawei_accent_color = utility::conversions::to_string_t("");
    m_Huawei_accent_colorIsSet = false;
    m_Android_visibility = 0;
    m_Android_visibilityIsSet = false;
    m_Huawei_visibility = 0;
    m_Huawei_visibilityIsSet = false;
    m_Ios_badgeType = utility::conversions::to_string_t("");
    m_Ios_badgeTypeIsSet = false;
    m_Ios_badgeCount = 0;
    m_Ios_badgeCountIsSet = false;
    m_Collapse_id = utility::conversions::to_string_t("");
    m_Collapse_idIsSet = false;
    m_Web_push_topic = utility::conversions::to_string_t("");
    m_Web_push_topicIsSet = false;
    m_Apns_alertIsSet = false;
    m_Delayed_option = utility::conversions::to_string_t("");
    m_Delayed_optionIsSet = false;
    m_Delivery_time_of_day = utility::conversions::to_string_t("");
    m_Delivery_time_of_dayIsSet = false;
    m_Ttl = 0;
    m_TtlIsSet = false;
    m_Priority = 0;
    m_PriorityIsSet = false;
    m_Apns_push_type_override = utility::conversions::to_string_t("");
    m_Apns_push_type_overrideIsSet = false;
    m_Throttle_rate_per_minute = utility::conversions::to_string_t("");
    m_Throttle_rate_per_minuteIsSet = false;
    m_Android_group = utility::conversions::to_string_t("");
    m_Android_groupIsSet = false;
    m_Android_group_message = utility::conversions::to_string_t("");
    m_Android_group_messageIsSet = false;
    m_Adm_group = utility::conversions::to_string_t("");
    m_Adm_groupIsSet = false;
    m_Adm_group_messageIsSet = false;
    m_Thread_id = utility::conversions::to_string_t("");
    m_Thread_idIsSet = false;
    m_Summary_arg = utility::conversions::to_string_t("");
    m_Summary_argIsSet = false;
    m_Summary_arg_count = 0;
    m_Summary_arg_countIsSet = false;
    m_Email_subject = utility::conversions::to_string_t("");
    m_Email_subjectIsSet = false;
    m_Email_body = utility::conversions::to_string_t("");
    m_Email_bodyIsSet = false;
    m_Email_from_name = utility::conversions::to_string_t("");
    m_Email_from_nameIsSet = false;
    m_Email_from_address = utility::conversions::to_string_t("");
    m_Email_from_addressIsSet = false;
    m_Email_preheader = utility::conversions::to_string_t("");
    m_Email_preheaderIsSet = false;
    m_Include_unsubscribed = false;
    m_Include_unsubscribedIsSet = false;
    m_Sms_from = utility::conversions::to_string_t("");
    m_Sms_fromIsSet = false;
    m_Sms_media_urlsIsSet = false;
    m_FiltersIsSet = false;
    m_Custom_dataIsSet = false;
}

BasicNotification::~BasicNotification()
{
}

void BasicNotification::validate()
{
    // TODO: implement validation
}

web::json::value BasicNotification::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Included_segmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("included_segments"))] = ModelBase::toJson(m_Included_segments);
    }
    if(m_Excluded_segmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("excluded_segments"))] = ModelBase::toJson(m_Excluded_segments);
    }
    if(m_Include_player_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_player_ids"))] = ModelBase::toJson(m_Include_player_ids);
    }
    if(m_Include_external_user_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_external_user_ids"))] = ModelBase::toJson(m_Include_external_user_ids);
    }
    if(m_Include_email_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("include_email_tokens"))] = ModelBase::toJson(m_Include_email_tokens);
    }
    if(m_Include_phone_numbersIsSet)
    {
        val[utility::conversions::to_string_t(U("include_phone_numbers"))] = ModelBase::toJson(m_Include_phone_numbers);
    }
    if(m_Include_ios_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("include_ios_tokens"))] = ModelBase::toJson(m_Include_ios_tokens);
    }
    if(m_Include_wp_wns_urisIsSet)
    {
        val[utility::conversions::to_string_t(U("include_wp_wns_uris"))] = ModelBase::toJson(m_Include_wp_wns_uris);
    }
    if(m_Include_amazon_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_amazon_reg_ids"))] = ModelBase::toJson(m_Include_amazon_reg_ids);
    }
    if(m_Include_chrome_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_chrome_reg_ids"))] = ModelBase::toJson(m_Include_chrome_reg_ids);
    }
    if(m_Include_chrome_web_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))] = ModelBase::toJson(m_Include_chrome_web_reg_ids);
    }
    if(m_Include_android_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_android_reg_ids"))] = ModelBase::toJson(m_Include_android_reg_ids);
    }
    if(m_Include_aliasesIsSet)
    {
        val[utility::conversions::to_string_t(U("include_aliases"))] = ModelBase::toJson(m_Include_aliases);
    }
    if(m_Target_channelIsSet)
    {
        val[utility::conversions::to_string_t(U("target_channel"))] = ModelBase::toJson(m_Target_channel);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_AggregationIsSet)
    {
        val[utility::conversions::to_string_t(U("aggregation"))] = ModelBase::toJson(m_Aggregation);
    }
    if(m_IsIosIsSet)
    {
        val[utility::conversions::to_string_t(U("isIos"))] = ModelBase::toJson(m_IsIos);
    }
    if(m_IsAndroidIsSet)
    {
        val[utility::conversions::to_string_t(U("isAndroid"))] = ModelBase::toJson(m_IsAndroid);
    }
    if(m_IsHuaweiIsSet)
    {
        val[utility::conversions::to_string_t(U("isHuawei"))] = ModelBase::toJson(m_IsHuawei);
    }
    if(m_IsAnyWebIsSet)
    {
        val[utility::conversions::to_string_t(U("isAnyWeb"))] = ModelBase::toJson(m_IsAnyWeb);
    }
    if(m_IsChromeWebIsSet)
    {
        val[utility::conversions::to_string_t(U("isChromeWeb"))] = ModelBase::toJson(m_IsChromeWeb);
    }
    if(m_IsFirefoxIsSet)
    {
        val[utility::conversions::to_string_t(U("isFirefox"))] = ModelBase::toJson(m_IsFirefox);
    }
    if(m_IsSafariIsSet)
    {
        val[utility::conversions::to_string_t(U("isSafari"))] = ModelBase::toJson(m_IsSafari);
    }
    if(m_IsWP_WNSIsSet)
    {
        val[utility::conversions::to_string_t(U("isWP_WNS"))] = ModelBase::toJson(m_IsWP_WNS);
    }
    if(m_IsAdmIsSet)
    {
        val[utility::conversions::to_string_t(U("isAdm"))] = ModelBase::toJson(m_IsAdm);
    }
    if(m_IsChromeIsSet)
    {
        val[utility::conversions::to_string_t(U("isChrome"))] = ModelBase::toJson(m_IsChrome);
    }
    if(m_Channel_for_external_user_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("channel_for_external_user_ids"))] = ModelBase::toJson(m_Channel_for_external_user_ids);
    }
    if(m_App_idIsSet)
    {
        val[utility::conversions::to_string_t(U("app_id"))] = ModelBase::toJson(m_App_id);
    }
    if(m_External_idIsSet)
    {
        val[utility::conversions::to_string_t(U("external_id"))] = ModelBase::toJson(m_External_id);
    }
    if(m_Idempotency_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("idempotency_key"))] = ModelBase::toJson(m_Idempotency_key);
    }
    if(m_ContentsIsSet)
    {
        val[utility::conversions::to_string_t(U("contents"))] = ModelBase::toJson(m_Contents);
    }
    if(m_HeadingsIsSet)
    {
        val[utility::conversions::to_string_t(U("headings"))] = ModelBase::toJson(m_Headings);
    }
    if(m_SubtitleIsSet)
    {
        val[utility::conversions::to_string_t(U("subtitle"))] = ModelBase::toJson(m_Subtitle);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t(U("data"))] = ModelBase::toJson(m_Data);
    }
    if(m_Huawei_msg_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_msg_type"))] = ModelBase::toJson(m_Huawei_msg_type);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_Web_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("web_url"))] = ModelBase::toJson(m_Web_url);
    }
    if(m_App_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("app_url"))] = ModelBase::toJson(m_App_url);
    }
    if(m_Ios_attachmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_attachments"))] = ModelBase::toJson(m_Ios_attachments);
    }
    if(m_Template_idIsSet)
    {
        val[utility::conversions::to_string_t(U("template_id"))] = ModelBase::toJson(m_Template_id);
    }
    if(m_Content_availableIsSet)
    {
        val[utility::conversions::to_string_t(U("content_available"))] = ModelBase::toJson(m_Content_available);
    }
    if(m_Mutable_contentIsSet)
    {
        val[utility::conversions::to_string_t(U("mutable_content"))] = ModelBase::toJson(m_Mutable_content);
    }
    if(m_Target_content_identifierIsSet)
    {
        val[utility::conversions::to_string_t(U("target_content_identifier"))] = ModelBase::toJson(m_Target_content_identifier);
    }
    if(m_Big_pictureIsSet)
    {
        val[utility::conversions::to_string_t(U("big_picture"))] = ModelBase::toJson(m_Big_picture);
    }
    if(m_Huawei_big_pictureIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_big_picture"))] = ModelBase::toJson(m_Huawei_big_picture);
    }
    if(m_Adm_big_pictureIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_big_picture"))] = ModelBase::toJson(m_Adm_big_picture);
    }
    if(m_Chrome_big_pictureIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_big_picture"))] = ModelBase::toJson(m_Chrome_big_picture);
    }
    if(m_Chrome_web_imageIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_web_image"))] = ModelBase::toJson(m_Chrome_web_image);
    }
    if(m_ButtonsIsSet)
    {
        val[utility::conversions::to_string_t(U("buttons"))] = ModelBase::toJson(m_Buttons);
    }
    if(m_Web_buttonsIsSet)
    {
        val[utility::conversions::to_string_t(U("web_buttons"))] = ModelBase::toJson(m_Web_buttons);
    }
    if(m_Ios_categoryIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_category"))] = ModelBase::toJson(m_Ios_category);
    }
    if(m_Android_channel_idIsSet)
    {
        val[utility::conversions::to_string_t(U("android_channel_id"))] = ModelBase::toJson(m_Android_channel_id);
    }
    if(m_Huawei_channel_idIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_channel_id"))] = ModelBase::toJson(m_Huawei_channel_id);
    }
    if(m_Existing_android_channel_idIsSet)
    {
        val[utility::conversions::to_string_t(U("existing_android_channel_id"))] = ModelBase::toJson(m_Existing_android_channel_id);
    }
    if(m_Huawei_existing_channel_idIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_existing_channel_id"))] = ModelBase::toJson(m_Huawei_existing_channel_id);
    }
    if(m_Android_background_layoutIsSet)
    {
        val[utility::conversions::to_string_t(U("android_background_layout"))] = ModelBase::toJson(m_Android_background_layout);
    }
    if(m_Small_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("small_icon"))] = ModelBase::toJson(m_Small_icon);
    }
    if(m_Huawei_small_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_small_icon"))] = ModelBase::toJson(m_Huawei_small_icon);
    }
    if(m_Large_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("large_icon"))] = ModelBase::toJson(m_Large_icon);
    }
    if(m_Huawei_large_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_large_icon"))] = ModelBase::toJson(m_Huawei_large_icon);
    }
    if(m_Adm_small_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_small_icon"))] = ModelBase::toJson(m_Adm_small_icon);
    }
    if(m_Adm_large_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_large_icon"))] = ModelBase::toJson(m_Adm_large_icon);
    }
    if(m_Chrome_web_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_web_icon"))] = ModelBase::toJson(m_Chrome_web_icon);
    }
    if(m_Chrome_web_badgeIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_web_badge"))] = ModelBase::toJson(m_Chrome_web_badge);
    }
    if(m_Firefox_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("firefox_icon"))] = ModelBase::toJson(m_Firefox_icon);
    }
    if(m_Chrome_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_icon"))] = ModelBase::toJson(m_Chrome_icon);
    }
    if(m_Ios_soundIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_sound"))] = ModelBase::toJson(m_Ios_sound);
    }
    if(m_Android_soundIsSet)
    {
        val[utility::conversions::to_string_t(U("android_sound"))] = ModelBase::toJson(m_Android_sound);
    }
    if(m_Huawei_soundIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_sound"))] = ModelBase::toJson(m_Huawei_sound);
    }
    if(m_Adm_soundIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_sound"))] = ModelBase::toJson(m_Adm_sound);
    }
    if(m_Wp_wns_soundIsSet)
    {
        val[utility::conversions::to_string_t(U("wp_wns_sound"))] = ModelBase::toJson(m_Wp_wns_sound);
    }
    if(m_Android_led_colorIsSet)
    {
        val[utility::conversions::to_string_t(U("android_led_color"))] = ModelBase::toJson(m_Android_led_color);
    }
    if(m_Huawei_led_colorIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_led_color"))] = ModelBase::toJson(m_Huawei_led_color);
    }
    if(m_Android_accent_colorIsSet)
    {
        val[utility::conversions::to_string_t(U("android_accent_color"))] = ModelBase::toJson(m_Android_accent_color);
    }
    if(m_Huawei_accent_colorIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_accent_color"))] = ModelBase::toJson(m_Huawei_accent_color);
    }
    if(m_Android_visibilityIsSet)
    {
        val[utility::conversions::to_string_t(U("android_visibility"))] = ModelBase::toJson(m_Android_visibility);
    }
    if(m_Huawei_visibilityIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_visibility"))] = ModelBase::toJson(m_Huawei_visibility);
    }
    if(m_Ios_badgeTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_badgeType"))] = ModelBase::toJson(m_Ios_badgeType);
    }
    if(m_Ios_badgeCountIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_badgeCount"))] = ModelBase::toJson(m_Ios_badgeCount);
    }
    if(m_Collapse_idIsSet)
    {
        val[utility::conversions::to_string_t(U("collapse_id"))] = ModelBase::toJson(m_Collapse_id);
    }
    if(m_Web_push_topicIsSet)
    {
        val[utility::conversions::to_string_t(U("web_push_topic"))] = ModelBase::toJson(m_Web_push_topic);
    }
    if(m_Apns_alertIsSet)
    {
        val[utility::conversions::to_string_t(U("apns_alert"))] = ModelBase::toJson(m_Apns_alert);
    }
    if(m_Delayed_optionIsSet)
    {
        val[utility::conversions::to_string_t(U("delayed_option"))] = ModelBase::toJson(m_Delayed_option);
    }
    if(m_Delivery_time_of_dayIsSet)
    {
        val[utility::conversions::to_string_t(U("delivery_time_of_day"))] = ModelBase::toJson(m_Delivery_time_of_day);
    }
    if(m_TtlIsSet)
    {
        val[utility::conversions::to_string_t(U("ttl"))] = ModelBase::toJson(m_Ttl);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t(U("priority"))] = ModelBase::toJson(m_Priority);
    }
    if(m_Apns_push_type_overrideIsSet)
    {
        val[utility::conversions::to_string_t(U("apns_push_type_override"))] = ModelBase::toJson(m_Apns_push_type_override);
    }
    if(m_Throttle_rate_per_minuteIsSet)
    {
        val[utility::conversions::to_string_t(U("throttle_rate_per_minute"))] = ModelBase::toJson(m_Throttle_rate_per_minute);
    }
    if(m_Android_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("android_group"))] = ModelBase::toJson(m_Android_group);
    }
    if(m_Android_group_messageIsSet)
    {
        val[utility::conversions::to_string_t(U("android_group_message"))] = ModelBase::toJson(m_Android_group_message);
    }
    if(m_Adm_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_group"))] = ModelBase::toJson(m_Adm_group);
    }
    if(m_Adm_group_messageIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_group_message"))] = ModelBase::toJson(m_Adm_group_message);
    }
    if(m_Thread_idIsSet)
    {
        val[utility::conversions::to_string_t(U("thread_id"))] = ModelBase::toJson(m_Thread_id);
    }
    if(m_Summary_argIsSet)
    {
        val[utility::conversions::to_string_t(U("summary_arg"))] = ModelBase::toJson(m_Summary_arg);
    }
    if(m_Summary_arg_countIsSet)
    {
        val[utility::conversions::to_string_t(U("summary_arg_count"))] = ModelBase::toJson(m_Summary_arg_count);
    }
    if(m_Email_subjectIsSet)
    {
        val[utility::conversions::to_string_t(U("email_subject"))] = ModelBase::toJson(m_Email_subject);
    }
    if(m_Email_bodyIsSet)
    {
        val[utility::conversions::to_string_t(U("email_body"))] = ModelBase::toJson(m_Email_body);
    }
    if(m_Email_from_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("email_from_name"))] = ModelBase::toJson(m_Email_from_name);
    }
    if(m_Email_from_addressIsSet)
    {
        val[utility::conversions::to_string_t(U("email_from_address"))] = ModelBase::toJson(m_Email_from_address);
    }
    if(m_Email_preheaderIsSet)
    {
        val[utility::conversions::to_string_t(U("email_preheader"))] = ModelBase::toJson(m_Email_preheader);
    }
    if(m_Include_unsubscribedIsSet)
    {
        val[utility::conversions::to_string_t(U("include_unsubscribed"))] = ModelBase::toJson(m_Include_unsubscribed);
    }
    if(m_Sms_fromIsSet)
    {
        val[utility::conversions::to_string_t(U("sms_from"))] = ModelBase::toJson(m_Sms_from);
    }
    if(m_Sms_media_urlsIsSet)
    {
        val[utility::conversions::to_string_t(U("sms_media_urls"))] = ModelBase::toJson(m_Sms_media_urls);
    }
    if(m_FiltersIsSet)
    {
        val[utility::conversions::to_string_t(U("filters"))] = ModelBase::toJson(m_Filters);
    }
    if(m_Custom_dataIsSet)
    {
        val[utility::conversions::to_string_t(U("custom_data"))] = ModelBase::toJson(m_Custom_data);
    }

    return val;
}

bool BasicNotification::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("included_segments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("included_segments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludedSegments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludedSegments);
            setIncludedSegments(refVal_setIncludedSegments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("excluded_segments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("excluded_segments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setExcludedSegments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExcludedSegments);
            setExcludedSegments(refVal_setExcludedSegments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_player_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_player_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludePlayerIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludePlayerIds);
            setIncludePlayerIds(refVal_setIncludePlayerIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_external_user_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_external_user_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludeExternalUserIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeExternalUserIds);
            setIncludeExternalUserIds(refVal_setIncludeExternalUserIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_email_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_email_tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludeEmailTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeEmailTokens);
            setIncludeEmailTokens(refVal_setIncludeEmailTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_phone_numbers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_phone_numbers")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludePhoneNumbers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludePhoneNumbers);
            setIncludePhoneNumbers(refVal_setIncludePhoneNumbers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_ios_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_ios_tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludeIosTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeIosTokens);
            setIncludeIosTokens(refVal_setIncludeIosTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_wp_wns_uris"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_wp_wns_uris")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludeWpWnsUris;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeWpWnsUris);
            setIncludeWpWnsUris(refVal_setIncludeWpWnsUris);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_amazon_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_amazon_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludeAmazonRegIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeAmazonRegIds);
            setIncludeAmazonRegIds(refVal_setIncludeAmazonRegIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_chrome_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_chrome_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludeChromeRegIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeChromeRegIds);
            setIncludeChromeRegIds(refVal_setIncludeChromeRegIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_chrome_web_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludeChromeWebRegIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeChromeWebRegIds);
            setIncludeChromeWebRegIds(refVal_setIncludeChromeWebRegIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_android_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_android_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludeAndroidRegIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeAndroidRegIds);
            setIncludeAndroidRegIds(refVal_setIncludeAndroidRegIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_aliases"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_aliases")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlayerNotificationTarget_include_aliases> refVal_setIncludeAliases;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeAliases);
            setIncludeAliases(refVal_setIncludeAliases);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("target_channel"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("target_channel")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTargetChannel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetChannel);
            setTargetChannel(refVal_setTargetChannel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aggregation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aggregation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAggregation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAggregation);
            setAggregation(refVal_setAggregation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isIos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isIos")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsIos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsIos);
            setIsIos(refVal_setIsIos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isAndroid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isAndroid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAndroid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAndroid);
            setIsAndroid(refVal_setIsAndroid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isHuawei"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isHuawei")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsHuawei;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsHuawei);
            setIsHuawei(refVal_setIsHuawei);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isAnyWeb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isAnyWeb")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAnyWeb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAnyWeb);
            setIsAnyWeb(refVal_setIsAnyWeb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isChromeWeb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isChromeWeb")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsChromeWeb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsChromeWeb);
            setIsChromeWeb(refVal_setIsChromeWeb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isFirefox"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isFirefox")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsFirefox;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsFirefox);
            setIsFirefox(refVal_setIsFirefox);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isSafari"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isSafari")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSafari;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSafari);
            setIsSafari(refVal_setIsSafari);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isWP_WNS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isWP_WNS")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsWPWNS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsWPWNS);
            setIsWPWNS(refVal_setIsWPWNS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isAdm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isAdm")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAdm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAdm);
            setIsAdm(refVal_setIsAdm);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isChrome"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isChrome")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsChrome;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsChrome);
            setIsChrome(refVal_setIsChrome);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("channel_for_external_user_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("channel_for_external_user_ids")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChannelForExternalUserIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChannelForExternalUserIds);
            setChannelForExternalUserIds(refVal_setChannelForExternalUserIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAppId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAppId);
            setAppId(refVal_setAppId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("external_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("external_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExternalId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExternalId);
            setExternalId(refVal_setExternalId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("idempotency_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("idempotency_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIdempotencyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIdempotencyKey);
            setIdempotencyKey(refVal_setIdempotencyKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contents"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contents")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<StringMap> refVal_setContents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContents);
            setContents(refVal_setContents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("headings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("headings")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<StringMap> refVal_setHeadings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeadings);
            setHeadings(refVal_setHeadings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subtitle"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subtitle")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<StringMap> refVal_setSubtitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubtitle);
            setSubtitle(refVal_setSubtitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("data")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setData);
            setData(refVal_setData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_msg_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_msg_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHuaweiMsgType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHuaweiMsgType);
            setHuaweiMsgType(refVal_setHuaweiMsgType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("web_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("web_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebUrl);
            setWebUrl(refVal_setWebUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAppUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAppUrl);
            setAppUrl(refVal_setAppUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_attachments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_attachments")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setIosAttachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIosAttachments);
            setIosAttachments(refVal_setIosAttachments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content_available"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content_available")));
        if(!fieldValue.is_null())
        {
            bool refVal_setContentAvailable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentAvailable);
            setContentAvailable(refVal_setContentAvailable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mutable_content"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mutable_content")));
        if(!fieldValue.is_null())
        {
            bool refVal_setMutableContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMutableContent);
            setMutableContent(refVal_setMutableContent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("target_content_identifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("target_content_identifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTargetContentIdentifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetContentIdentifier);
            setTargetContentIdentifier(refVal_setTargetContentIdentifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("big_picture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("big_picture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBigPicture;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBigPicture);
            setBigPicture(refVal_setBigPicture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_big_picture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_big_picture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHuaweiBigPicture;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHuaweiBigPicture);
            setHuaweiBigPicture(refVal_setHuaweiBigPicture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_big_picture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_big_picture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdmBigPicture;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdmBigPicture);
            setAdmBigPicture(refVal_setAdmBigPicture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_big_picture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_big_picture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChromeBigPicture;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChromeBigPicture);
            setChromeBigPicture(refVal_setChromeBigPicture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_web_image"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_web_image")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChromeWebImage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChromeWebImage);
            setChromeWebImage(refVal_setChromeWebImage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buttons"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buttons")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Button>> refVal_setButtons;
            ok &= ModelBase::fromJson(fieldValue, refVal_setButtons);
            setButtons(refVal_setButtons);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("web_buttons"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("web_buttons")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Button>> refVal_setWebButtons;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebButtons);
            setWebButtons(refVal_setWebButtons);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIosCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIosCategory);
            setIosCategory(refVal_setIosCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_channel_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_channel_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAndroidChannelId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAndroidChannelId);
            setAndroidChannelId(refVal_setAndroidChannelId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_channel_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_channel_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHuaweiChannelId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHuaweiChannelId);
            setHuaweiChannelId(refVal_setHuaweiChannelId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("existing_android_channel_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("existing_android_channel_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExistingAndroidChannelId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExistingAndroidChannelId);
            setExistingAndroidChannelId(refVal_setExistingAndroidChannelId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_existing_channel_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_existing_channel_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHuaweiExistingChannelId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHuaweiExistingChannelId);
            setHuaweiExistingChannelId(refVal_setHuaweiExistingChannelId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_background_layout"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_background_layout")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BasicNotification_allOf_android_background_layout> refVal_setAndroidBackgroundLayout;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAndroidBackgroundLayout);
            setAndroidBackgroundLayout(refVal_setAndroidBackgroundLayout);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("small_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("small_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmallIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmallIcon);
            setSmallIcon(refVal_setSmallIcon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_small_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_small_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHuaweiSmallIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHuaweiSmallIcon);
            setHuaweiSmallIcon(refVal_setHuaweiSmallIcon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("large_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("large_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLargeIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLargeIcon);
            setLargeIcon(refVal_setLargeIcon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_large_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_large_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHuaweiLargeIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHuaweiLargeIcon);
            setHuaweiLargeIcon(refVal_setHuaweiLargeIcon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_small_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_small_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdmSmallIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdmSmallIcon);
            setAdmSmallIcon(refVal_setAdmSmallIcon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_large_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_large_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdmLargeIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdmLargeIcon);
            setAdmLargeIcon(refVal_setAdmLargeIcon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_web_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_web_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChromeWebIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChromeWebIcon);
            setChromeWebIcon(refVal_setChromeWebIcon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_web_badge"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_web_badge")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChromeWebBadge;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChromeWebBadge);
            setChromeWebBadge(refVal_setChromeWebBadge);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("firefox_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("firefox_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFirefoxIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFirefoxIcon);
            setFirefoxIcon(refVal_setFirefoxIcon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChromeIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChromeIcon);
            setChromeIcon(refVal_setChromeIcon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_sound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_sound")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIosSound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIosSound);
            setIosSound(refVal_setIosSound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_sound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_sound")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAndroidSound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAndroidSound);
            setAndroidSound(refVal_setAndroidSound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_sound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_sound")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHuaweiSound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHuaweiSound);
            setHuaweiSound(refVal_setHuaweiSound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_sound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_sound")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdmSound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdmSound);
            setAdmSound(refVal_setAdmSound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wp_wns_sound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wp_wns_sound")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWpWnsSound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWpWnsSound);
            setWpWnsSound(refVal_setWpWnsSound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_led_color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_led_color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAndroidLedColor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAndroidLedColor);
            setAndroidLedColor(refVal_setAndroidLedColor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_led_color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_led_color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHuaweiLedColor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHuaweiLedColor);
            setHuaweiLedColor(refVal_setHuaweiLedColor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_accent_color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_accent_color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAndroidAccentColor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAndroidAccentColor);
            setAndroidAccentColor(refVal_setAndroidAccentColor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_accent_color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_accent_color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHuaweiAccentColor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHuaweiAccentColor);
            setHuaweiAccentColor(refVal_setHuaweiAccentColor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_visibility"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_visibility")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAndroidVisibility;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAndroidVisibility);
            setAndroidVisibility(refVal_setAndroidVisibility);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_visibility"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_visibility")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHuaweiVisibility;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHuaweiVisibility);
            setHuaweiVisibility(refVal_setHuaweiVisibility);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_badgeType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_badgeType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIosBadgeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIosBadgeType);
            setIosBadgeType(refVal_setIosBadgeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_badgeCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_badgeCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIosBadgeCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIosBadgeCount);
            setIosBadgeCount(refVal_setIosBadgeCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collapse_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collapse_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollapseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollapseId);
            setCollapseId(refVal_setCollapseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("web_push_topic"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("web_push_topic")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebPushTopic;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebPushTopic);
            setWebPushTopic(refVal_setWebPushTopic);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("apns_alert"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("apns_alert")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setApnsAlert;
            ok &= ModelBase::fromJson(fieldValue, refVal_setApnsAlert);
            setApnsAlert(refVal_setApnsAlert);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delayed_option"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delayed_option")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDelayedOption;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDelayedOption);
            setDelayedOption(refVal_setDelayedOption);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delivery_time_of_day"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delivery_time_of_day")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeliveryTimeOfDay;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryTimeOfDay);
            setDeliveryTimeOfDay(refVal_setDeliveryTimeOfDay);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ttl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ttl")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTtl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTtl);
            setTtl(refVal_setTtl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priority")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriority);
            setPriority(refVal_setPriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("apns_push_type_override"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("apns_push_type_override")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setApnsPushTypeOverride;
            ok &= ModelBase::fromJson(fieldValue, refVal_setApnsPushTypeOverride);
            setApnsPushTypeOverride(refVal_setApnsPushTypeOverride);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("throttle_rate_per_minute"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("throttle_rate_per_minute")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setThrottleRatePerMinute;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThrottleRatePerMinute);
            setThrottleRatePerMinute(refVal_setThrottleRatePerMinute);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAndroidGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAndroidGroup);
            setAndroidGroup(refVal_setAndroidGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_group_message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_group_message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAndroidGroupMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAndroidGroupMessage);
            setAndroidGroupMessage(refVal_setAndroidGroupMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdmGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdmGroup);
            setAdmGroup(refVal_setAdmGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_group_message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_group_message")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setAdmGroupMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdmGroupMessage);
            setAdmGroupMessage(refVal_setAdmGroupMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thread_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thread_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setThreadId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadId);
            setThreadId(refVal_setThreadId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("summary_arg"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("summary_arg")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSummaryArg;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSummaryArg);
            setSummaryArg(refVal_setSummaryArg);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("summary_arg_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("summary_arg_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSummaryArgCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSummaryArgCount);
            setSummaryArgCount(refVal_setSummaryArgCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailSubject);
            setEmailSubject(refVal_setEmailSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailBody);
            setEmailBody(refVal_setEmailBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_from_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_from_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailFromName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailFromName);
            setEmailFromName(refVal_setEmailFromName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_from_address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_from_address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailFromAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailFromAddress);
            setEmailFromAddress(refVal_setEmailFromAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_preheader"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_preheader")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailPreheader;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailPreheader);
            setEmailPreheader(refVal_setEmailPreheader);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_unsubscribed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_unsubscribed")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIncludeUnsubscribed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeUnsubscribed);
            setIncludeUnsubscribed(refVal_setIncludeUnsubscribed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sms_from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sms_from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmsFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmsFrom);
            setSmsFrom(refVal_setSmsFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sms_media_urls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sms_media_urls")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSmsMediaUrls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmsMediaUrls);
            setSmsMediaUrls(refVal_setSmsMediaUrls);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filters")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Filter>> refVal_setFilters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilters);
            setFilters(refVal_setFilters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_data")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setCustomData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomData);
            setCustomData(refVal_setCustomData);
        }
    }
    return ok;
}

void BasicNotification::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Included_segmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("included_segments")), m_Included_segments));
    }
    if(m_Excluded_segmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("excluded_segments")), m_Excluded_segments));
    }
    if(m_Include_player_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_player_ids")), m_Include_player_ids));
    }
    if(m_Include_external_user_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_external_user_ids")), m_Include_external_user_ids));
    }
    if(m_Include_email_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_email_tokens")), m_Include_email_tokens));
    }
    if(m_Include_phone_numbersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_phone_numbers")), m_Include_phone_numbers));
    }
    if(m_Include_ios_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_ios_tokens")), m_Include_ios_tokens));
    }
    if(m_Include_wp_wns_urisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_wp_wns_uris")), m_Include_wp_wns_uris));
    }
    if(m_Include_amazon_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_amazon_reg_ids")), m_Include_amazon_reg_ids));
    }
    if(m_Include_chrome_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_chrome_reg_ids")), m_Include_chrome_reg_ids));
    }
    if(m_Include_chrome_web_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_chrome_web_reg_ids")), m_Include_chrome_web_reg_ids));
    }
    if(m_Include_android_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_android_reg_ids")), m_Include_android_reg_ids));
    }
    if(m_Include_aliasesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_aliases")), m_Include_aliases));
    }
    if(m_Target_channelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("target_channel")), m_Target_channel));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_AggregationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aggregation")), m_Aggregation));
    }
    if(m_IsIosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isIos")), m_IsIos));
    }
    if(m_IsAndroidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isAndroid")), m_IsAndroid));
    }
    if(m_IsHuaweiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isHuawei")), m_IsHuawei));
    }
    if(m_IsAnyWebIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isAnyWeb")), m_IsAnyWeb));
    }
    if(m_IsChromeWebIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isChromeWeb")), m_IsChromeWeb));
    }
    if(m_IsFirefoxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isFirefox")), m_IsFirefox));
    }
    if(m_IsSafariIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isSafari")), m_IsSafari));
    }
    if(m_IsWP_WNSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isWP_WNS")), m_IsWP_WNS));
    }
    if(m_IsAdmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isAdm")), m_IsAdm));
    }
    if(m_IsChromeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isChrome")), m_IsChrome));
    }
    if(m_Channel_for_external_user_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("channel_for_external_user_ids")), m_Channel_for_external_user_ids));
    }
    if(m_App_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_id")), m_App_id));
    }
    if(m_External_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("external_id")), m_External_id));
    }
    if(m_Idempotency_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("idempotency_key")), m_Idempotency_key));
    }
    if(m_ContentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contents")), m_Contents));
    }
    if(m_HeadingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("headings")), m_Headings));
    }
    if(m_SubtitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subtitle")), m_Subtitle));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("data")), m_Data));
    }
    if(m_Huawei_msg_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_msg_type")), m_Huawei_msg_type));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_Web_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("web_url")), m_Web_url));
    }
    if(m_App_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_url")), m_App_url));
    }
    if(m_Ios_attachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_attachments")), m_Ios_attachments));
    }
    if(m_Template_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template_id")), m_Template_id));
    }
    if(m_Content_availableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content_available")), m_Content_available));
    }
    if(m_Mutable_contentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mutable_content")), m_Mutable_content));
    }
    if(m_Target_content_identifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("target_content_identifier")), m_Target_content_identifier));
    }
    if(m_Big_pictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("big_picture")), m_Big_picture));
    }
    if(m_Huawei_big_pictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_big_picture")), m_Huawei_big_picture));
    }
    if(m_Adm_big_pictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_big_picture")), m_Adm_big_picture));
    }
    if(m_Chrome_big_pictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_big_picture")), m_Chrome_big_picture));
    }
    if(m_Chrome_web_imageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_web_image")), m_Chrome_web_image));
    }
    if(m_ButtonsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buttons")), m_Buttons));
    }
    if(m_Web_buttonsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("web_buttons")), m_Web_buttons));
    }
    if(m_Ios_categoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_category")), m_Ios_category));
    }
    if(m_Android_channel_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_channel_id")), m_Android_channel_id));
    }
    if(m_Huawei_channel_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_channel_id")), m_Huawei_channel_id));
    }
    if(m_Existing_android_channel_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("existing_android_channel_id")), m_Existing_android_channel_id));
    }
    if(m_Huawei_existing_channel_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_existing_channel_id")), m_Huawei_existing_channel_id));
    }
    if(m_Android_background_layoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_background_layout")), m_Android_background_layout));
    }
    if(m_Small_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("small_icon")), m_Small_icon));
    }
    if(m_Huawei_small_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_small_icon")), m_Huawei_small_icon));
    }
    if(m_Large_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("large_icon")), m_Large_icon));
    }
    if(m_Huawei_large_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_large_icon")), m_Huawei_large_icon));
    }
    if(m_Adm_small_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_small_icon")), m_Adm_small_icon));
    }
    if(m_Adm_large_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_large_icon")), m_Adm_large_icon));
    }
    if(m_Chrome_web_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_web_icon")), m_Chrome_web_icon));
    }
    if(m_Chrome_web_badgeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_web_badge")), m_Chrome_web_badge));
    }
    if(m_Firefox_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("firefox_icon")), m_Firefox_icon));
    }
    if(m_Chrome_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_icon")), m_Chrome_icon));
    }
    if(m_Ios_soundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_sound")), m_Ios_sound));
    }
    if(m_Android_soundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_sound")), m_Android_sound));
    }
    if(m_Huawei_soundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_sound")), m_Huawei_sound));
    }
    if(m_Adm_soundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_sound")), m_Adm_sound));
    }
    if(m_Wp_wns_soundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wp_wns_sound")), m_Wp_wns_sound));
    }
    if(m_Android_led_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_led_color")), m_Android_led_color));
    }
    if(m_Huawei_led_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_led_color")), m_Huawei_led_color));
    }
    if(m_Android_accent_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_accent_color")), m_Android_accent_color));
    }
    if(m_Huawei_accent_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_accent_color")), m_Huawei_accent_color));
    }
    if(m_Android_visibilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_visibility")), m_Android_visibility));
    }
    if(m_Huawei_visibilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_visibility")), m_Huawei_visibility));
    }
    if(m_Ios_badgeTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_badgeType")), m_Ios_badgeType));
    }
    if(m_Ios_badgeCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_badgeCount")), m_Ios_badgeCount));
    }
    if(m_Collapse_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collapse_id")), m_Collapse_id));
    }
    if(m_Web_push_topicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("web_push_topic")), m_Web_push_topic));
    }
    if(m_Apns_alertIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("apns_alert")), m_Apns_alert));
    }
    if(m_Delayed_optionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delayed_option")), m_Delayed_option));
    }
    if(m_Delivery_time_of_dayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delivery_time_of_day")), m_Delivery_time_of_day));
    }
    if(m_TtlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ttl")), m_Ttl));
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priority")), m_Priority));
    }
    if(m_Apns_push_type_overrideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("apns_push_type_override")), m_Apns_push_type_override));
    }
    if(m_Throttle_rate_per_minuteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("throttle_rate_per_minute")), m_Throttle_rate_per_minute));
    }
    if(m_Android_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_group")), m_Android_group));
    }
    if(m_Android_group_messageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_group_message")), m_Android_group_message));
    }
    if(m_Adm_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_group")), m_Adm_group));
    }
    if(m_Adm_group_messageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_group_message")), m_Adm_group_message));
    }
    if(m_Thread_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thread_id")), m_Thread_id));
    }
    if(m_Summary_argIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("summary_arg")), m_Summary_arg));
    }
    if(m_Summary_arg_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("summary_arg_count")), m_Summary_arg_count));
    }
    if(m_Email_subjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_subject")), m_Email_subject));
    }
    if(m_Email_bodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_body")), m_Email_body));
    }
    if(m_Email_from_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_from_name")), m_Email_from_name));
    }
    if(m_Email_from_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_from_address")), m_Email_from_address));
    }
    if(m_Email_preheaderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_preheader")), m_Email_preheader));
    }
    if(m_Include_unsubscribedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_unsubscribed")), m_Include_unsubscribed));
    }
    if(m_Sms_fromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sms_from")), m_Sms_from));
    }
    if(m_Sms_media_urlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sms_media_urls")), m_Sms_media_urls));
    }
    if(m_FiltersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filters")), m_Filters));
    }
    if(m_Custom_dataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_data")), m_Custom_data));
    }
}

bool BasicNotification::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("included_segments"))))
    {
        std::vector<utility::string_t> refVal_setIncludedSegments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("included_segments"))), refVal_setIncludedSegments );
        setIncludedSegments(refVal_setIncludedSegments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("excluded_segments"))))
    {
        std::vector<utility::string_t> refVal_setExcludedSegments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("excluded_segments"))), refVal_setExcludedSegments );
        setExcludedSegments(refVal_setExcludedSegments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_player_ids"))))
    {
        std::vector<utility::string_t> refVal_setIncludePlayerIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_player_ids"))), refVal_setIncludePlayerIds );
        setIncludePlayerIds(refVal_setIncludePlayerIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_external_user_ids"))))
    {
        std::vector<utility::string_t> refVal_setIncludeExternalUserIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_external_user_ids"))), refVal_setIncludeExternalUserIds );
        setIncludeExternalUserIds(refVal_setIncludeExternalUserIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_email_tokens"))))
    {
        std::vector<utility::string_t> refVal_setIncludeEmailTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_email_tokens"))), refVal_setIncludeEmailTokens );
        setIncludeEmailTokens(refVal_setIncludeEmailTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_phone_numbers"))))
    {
        std::vector<utility::string_t> refVal_setIncludePhoneNumbers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_phone_numbers"))), refVal_setIncludePhoneNumbers );
        setIncludePhoneNumbers(refVal_setIncludePhoneNumbers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_ios_tokens"))))
    {
        std::vector<utility::string_t> refVal_setIncludeIosTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_ios_tokens"))), refVal_setIncludeIosTokens );
        setIncludeIosTokens(refVal_setIncludeIosTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_wp_wns_uris"))))
    {
        std::vector<utility::string_t> refVal_setIncludeWpWnsUris;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_wp_wns_uris"))), refVal_setIncludeWpWnsUris );
        setIncludeWpWnsUris(refVal_setIncludeWpWnsUris);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_amazon_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_setIncludeAmazonRegIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_amazon_reg_ids"))), refVal_setIncludeAmazonRegIds );
        setIncludeAmazonRegIds(refVal_setIncludeAmazonRegIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_chrome_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_setIncludeChromeRegIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_chrome_reg_ids"))), refVal_setIncludeChromeRegIds );
        setIncludeChromeRegIds(refVal_setIncludeChromeRegIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_setIncludeChromeWebRegIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))), refVal_setIncludeChromeWebRegIds );
        setIncludeChromeWebRegIds(refVal_setIncludeChromeWebRegIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_android_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_setIncludeAndroidRegIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_android_reg_ids"))), refVal_setIncludeAndroidRegIds );
        setIncludeAndroidRegIds(refVal_setIncludeAndroidRegIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_aliases"))))
    {
        std::shared_ptr<PlayerNotificationTarget_include_aliases> refVal_setIncludeAliases;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_aliases"))), refVal_setIncludeAliases );
        setIncludeAliases(refVal_setIncludeAliases);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("target_channel"))))
    {
        utility::string_t refVal_setTargetChannel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("target_channel"))), refVal_setTargetChannel );
        setTargetChannel(refVal_setTargetChannel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        int32_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aggregation"))))
    {
        utility::string_t refVal_setAggregation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aggregation"))), refVal_setAggregation );
        setAggregation(refVal_setAggregation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isIos"))))
    {
        bool refVal_setIsIos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isIos"))), refVal_setIsIos );
        setIsIos(refVal_setIsIos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isAndroid"))))
    {
        bool refVal_setIsAndroid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isAndroid"))), refVal_setIsAndroid );
        setIsAndroid(refVal_setIsAndroid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isHuawei"))))
    {
        bool refVal_setIsHuawei;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isHuawei"))), refVal_setIsHuawei );
        setIsHuawei(refVal_setIsHuawei);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isAnyWeb"))))
    {
        bool refVal_setIsAnyWeb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isAnyWeb"))), refVal_setIsAnyWeb );
        setIsAnyWeb(refVal_setIsAnyWeb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isChromeWeb"))))
    {
        bool refVal_setIsChromeWeb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isChromeWeb"))), refVal_setIsChromeWeb );
        setIsChromeWeb(refVal_setIsChromeWeb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isFirefox"))))
    {
        bool refVal_setIsFirefox;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isFirefox"))), refVal_setIsFirefox );
        setIsFirefox(refVal_setIsFirefox);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isSafari"))))
    {
        bool refVal_setIsSafari;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isSafari"))), refVal_setIsSafari );
        setIsSafari(refVal_setIsSafari);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isWP_WNS"))))
    {
        bool refVal_setIsWPWNS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isWP_WNS"))), refVal_setIsWPWNS );
        setIsWPWNS(refVal_setIsWPWNS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isAdm"))))
    {
        bool refVal_setIsAdm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isAdm"))), refVal_setIsAdm );
        setIsAdm(refVal_setIsAdm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isChrome"))))
    {
        bool refVal_setIsChrome;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isChrome"))), refVal_setIsChrome );
        setIsChrome(refVal_setIsChrome);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("channel_for_external_user_ids"))))
    {
        utility::string_t refVal_setChannelForExternalUserIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("channel_for_external_user_ids"))), refVal_setChannelForExternalUserIds );
        setChannelForExternalUserIds(refVal_setChannelForExternalUserIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_id"))))
    {
        utility::string_t refVal_setAppId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_id"))), refVal_setAppId );
        setAppId(refVal_setAppId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("external_id"))))
    {
        utility::string_t refVal_setExternalId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("external_id"))), refVal_setExternalId );
        setExternalId(refVal_setExternalId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("idempotency_key"))))
    {
        utility::string_t refVal_setIdempotencyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("idempotency_key"))), refVal_setIdempotencyKey );
        setIdempotencyKey(refVal_setIdempotencyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contents"))))
    {
        std::shared_ptr<StringMap> refVal_setContents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contents"))), refVal_setContents );
        setContents(refVal_setContents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("headings"))))
    {
        std::shared_ptr<StringMap> refVal_setHeadings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("headings"))), refVal_setHeadings );
        setHeadings(refVal_setHeadings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subtitle"))))
    {
        std::shared_ptr<StringMap> refVal_setSubtitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subtitle"))), refVal_setSubtitle );
        setSubtitle(refVal_setSubtitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("data"))))
    {
        std::shared_ptr<Object> refVal_setData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("data"))), refVal_setData );
        setData(refVal_setData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_msg_type"))))
    {
        utility::string_t refVal_setHuaweiMsgType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_msg_type"))), refVal_setHuaweiMsgType );
        setHuaweiMsgType(refVal_setHuaweiMsgType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("web_url"))))
    {
        utility::string_t refVal_setWebUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("web_url"))), refVal_setWebUrl );
        setWebUrl(refVal_setWebUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_url"))))
    {
        utility::string_t refVal_setAppUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_url"))), refVal_setAppUrl );
        setAppUrl(refVal_setAppUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_attachments"))))
    {
        std::shared_ptr<Object> refVal_setIosAttachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_attachments"))), refVal_setIosAttachments );
        setIosAttachments(refVal_setIosAttachments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template_id"))))
    {
        utility::string_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template_id"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content_available"))))
    {
        bool refVal_setContentAvailable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content_available"))), refVal_setContentAvailable );
        setContentAvailable(refVal_setContentAvailable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mutable_content"))))
    {
        bool refVal_setMutableContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mutable_content"))), refVal_setMutableContent );
        setMutableContent(refVal_setMutableContent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("target_content_identifier"))))
    {
        utility::string_t refVal_setTargetContentIdentifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("target_content_identifier"))), refVal_setTargetContentIdentifier );
        setTargetContentIdentifier(refVal_setTargetContentIdentifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("big_picture"))))
    {
        utility::string_t refVal_setBigPicture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("big_picture"))), refVal_setBigPicture );
        setBigPicture(refVal_setBigPicture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_big_picture"))))
    {
        utility::string_t refVal_setHuaweiBigPicture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_big_picture"))), refVal_setHuaweiBigPicture );
        setHuaweiBigPicture(refVal_setHuaweiBigPicture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_big_picture"))))
    {
        utility::string_t refVal_setAdmBigPicture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_big_picture"))), refVal_setAdmBigPicture );
        setAdmBigPicture(refVal_setAdmBigPicture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_big_picture"))))
    {
        utility::string_t refVal_setChromeBigPicture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_big_picture"))), refVal_setChromeBigPicture );
        setChromeBigPicture(refVal_setChromeBigPicture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_web_image"))))
    {
        utility::string_t refVal_setChromeWebImage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_web_image"))), refVal_setChromeWebImage );
        setChromeWebImage(refVal_setChromeWebImage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buttons"))))
    {
        std::vector<std::shared_ptr<Button>> refVal_setButtons;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buttons"))), refVal_setButtons );
        setButtons(refVal_setButtons);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("web_buttons"))))
    {
        std::vector<std::shared_ptr<Button>> refVal_setWebButtons;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("web_buttons"))), refVal_setWebButtons );
        setWebButtons(refVal_setWebButtons);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_category"))))
    {
        utility::string_t refVal_setIosCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_category"))), refVal_setIosCategory );
        setIosCategory(refVal_setIosCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_channel_id"))))
    {
        utility::string_t refVal_setAndroidChannelId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_channel_id"))), refVal_setAndroidChannelId );
        setAndroidChannelId(refVal_setAndroidChannelId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_channel_id"))))
    {
        utility::string_t refVal_setHuaweiChannelId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_channel_id"))), refVal_setHuaweiChannelId );
        setHuaweiChannelId(refVal_setHuaweiChannelId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("existing_android_channel_id"))))
    {
        utility::string_t refVal_setExistingAndroidChannelId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("existing_android_channel_id"))), refVal_setExistingAndroidChannelId );
        setExistingAndroidChannelId(refVal_setExistingAndroidChannelId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_existing_channel_id"))))
    {
        utility::string_t refVal_setHuaweiExistingChannelId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_existing_channel_id"))), refVal_setHuaweiExistingChannelId );
        setHuaweiExistingChannelId(refVal_setHuaweiExistingChannelId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_background_layout"))))
    {
        std::shared_ptr<BasicNotification_allOf_android_background_layout> refVal_setAndroidBackgroundLayout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_background_layout"))), refVal_setAndroidBackgroundLayout );
        setAndroidBackgroundLayout(refVal_setAndroidBackgroundLayout);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("small_icon"))))
    {
        utility::string_t refVal_setSmallIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("small_icon"))), refVal_setSmallIcon );
        setSmallIcon(refVal_setSmallIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_small_icon"))))
    {
        utility::string_t refVal_setHuaweiSmallIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_small_icon"))), refVal_setHuaweiSmallIcon );
        setHuaweiSmallIcon(refVal_setHuaweiSmallIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("large_icon"))))
    {
        utility::string_t refVal_setLargeIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("large_icon"))), refVal_setLargeIcon );
        setLargeIcon(refVal_setLargeIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_large_icon"))))
    {
        utility::string_t refVal_setHuaweiLargeIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_large_icon"))), refVal_setHuaweiLargeIcon );
        setHuaweiLargeIcon(refVal_setHuaweiLargeIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_small_icon"))))
    {
        utility::string_t refVal_setAdmSmallIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_small_icon"))), refVal_setAdmSmallIcon );
        setAdmSmallIcon(refVal_setAdmSmallIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_large_icon"))))
    {
        utility::string_t refVal_setAdmLargeIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_large_icon"))), refVal_setAdmLargeIcon );
        setAdmLargeIcon(refVal_setAdmLargeIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_web_icon"))))
    {
        utility::string_t refVal_setChromeWebIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_web_icon"))), refVal_setChromeWebIcon );
        setChromeWebIcon(refVal_setChromeWebIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_web_badge"))))
    {
        utility::string_t refVal_setChromeWebBadge;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_web_badge"))), refVal_setChromeWebBadge );
        setChromeWebBadge(refVal_setChromeWebBadge);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("firefox_icon"))))
    {
        utility::string_t refVal_setFirefoxIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("firefox_icon"))), refVal_setFirefoxIcon );
        setFirefoxIcon(refVal_setFirefoxIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_icon"))))
    {
        utility::string_t refVal_setChromeIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_icon"))), refVal_setChromeIcon );
        setChromeIcon(refVal_setChromeIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_sound"))))
    {
        utility::string_t refVal_setIosSound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_sound"))), refVal_setIosSound );
        setIosSound(refVal_setIosSound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_sound"))))
    {
        utility::string_t refVal_setAndroidSound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_sound"))), refVal_setAndroidSound );
        setAndroidSound(refVal_setAndroidSound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_sound"))))
    {
        utility::string_t refVal_setHuaweiSound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_sound"))), refVal_setHuaweiSound );
        setHuaweiSound(refVal_setHuaweiSound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_sound"))))
    {
        utility::string_t refVal_setAdmSound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_sound"))), refVal_setAdmSound );
        setAdmSound(refVal_setAdmSound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wp_wns_sound"))))
    {
        utility::string_t refVal_setWpWnsSound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wp_wns_sound"))), refVal_setWpWnsSound );
        setWpWnsSound(refVal_setWpWnsSound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_led_color"))))
    {
        utility::string_t refVal_setAndroidLedColor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_led_color"))), refVal_setAndroidLedColor );
        setAndroidLedColor(refVal_setAndroidLedColor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_led_color"))))
    {
        utility::string_t refVal_setHuaweiLedColor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_led_color"))), refVal_setHuaweiLedColor );
        setHuaweiLedColor(refVal_setHuaweiLedColor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_accent_color"))))
    {
        utility::string_t refVal_setAndroidAccentColor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_accent_color"))), refVal_setAndroidAccentColor );
        setAndroidAccentColor(refVal_setAndroidAccentColor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_accent_color"))))
    {
        utility::string_t refVal_setHuaweiAccentColor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_accent_color"))), refVal_setHuaweiAccentColor );
        setHuaweiAccentColor(refVal_setHuaweiAccentColor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_visibility"))))
    {
        int32_t refVal_setAndroidVisibility;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_visibility"))), refVal_setAndroidVisibility );
        setAndroidVisibility(refVal_setAndroidVisibility);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_visibility"))))
    {
        int32_t refVal_setHuaweiVisibility;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_visibility"))), refVal_setHuaweiVisibility );
        setHuaweiVisibility(refVal_setHuaweiVisibility);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_badgeType"))))
    {
        utility::string_t refVal_setIosBadgeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_badgeType"))), refVal_setIosBadgeType );
        setIosBadgeType(refVal_setIosBadgeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_badgeCount"))))
    {
        int32_t refVal_setIosBadgeCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_badgeCount"))), refVal_setIosBadgeCount );
        setIosBadgeCount(refVal_setIosBadgeCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collapse_id"))))
    {
        utility::string_t refVal_setCollapseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collapse_id"))), refVal_setCollapseId );
        setCollapseId(refVal_setCollapseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("web_push_topic"))))
    {
        utility::string_t refVal_setWebPushTopic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("web_push_topic"))), refVal_setWebPushTopic );
        setWebPushTopic(refVal_setWebPushTopic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("apns_alert"))))
    {
        std::shared_ptr<Object> refVal_setApnsAlert;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("apns_alert"))), refVal_setApnsAlert );
        setApnsAlert(refVal_setApnsAlert);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delayed_option"))))
    {
        utility::string_t refVal_setDelayedOption;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delayed_option"))), refVal_setDelayedOption );
        setDelayedOption(refVal_setDelayedOption);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delivery_time_of_day"))))
    {
        utility::string_t refVal_setDeliveryTimeOfDay;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delivery_time_of_day"))), refVal_setDeliveryTimeOfDay );
        setDeliveryTimeOfDay(refVal_setDeliveryTimeOfDay);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ttl"))))
    {
        int32_t refVal_setTtl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ttl"))), refVal_setTtl );
        setTtl(refVal_setTtl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priority"))))
    {
        int32_t refVal_setPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priority"))), refVal_setPriority );
        setPriority(refVal_setPriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("apns_push_type_override"))))
    {
        utility::string_t refVal_setApnsPushTypeOverride;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("apns_push_type_override"))), refVal_setApnsPushTypeOverride );
        setApnsPushTypeOverride(refVal_setApnsPushTypeOverride);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("throttle_rate_per_minute"))))
    {
        utility::string_t refVal_setThrottleRatePerMinute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("throttle_rate_per_minute"))), refVal_setThrottleRatePerMinute );
        setThrottleRatePerMinute(refVal_setThrottleRatePerMinute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_group"))))
    {
        utility::string_t refVal_setAndroidGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_group"))), refVal_setAndroidGroup );
        setAndroidGroup(refVal_setAndroidGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_group_message"))))
    {
        utility::string_t refVal_setAndroidGroupMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_group_message"))), refVal_setAndroidGroupMessage );
        setAndroidGroupMessage(refVal_setAndroidGroupMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_group"))))
    {
        utility::string_t refVal_setAdmGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_group"))), refVal_setAdmGroup );
        setAdmGroup(refVal_setAdmGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_group_message"))))
    {
        std::shared_ptr<Object> refVal_setAdmGroupMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_group_message"))), refVal_setAdmGroupMessage );
        setAdmGroupMessage(refVal_setAdmGroupMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thread_id"))))
    {
        utility::string_t refVal_setThreadId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thread_id"))), refVal_setThreadId );
        setThreadId(refVal_setThreadId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("summary_arg"))))
    {
        utility::string_t refVal_setSummaryArg;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("summary_arg"))), refVal_setSummaryArg );
        setSummaryArg(refVal_setSummaryArg);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("summary_arg_count"))))
    {
        int32_t refVal_setSummaryArgCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("summary_arg_count"))), refVal_setSummaryArgCount );
        setSummaryArgCount(refVal_setSummaryArgCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_subject"))))
    {
        utility::string_t refVal_setEmailSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_subject"))), refVal_setEmailSubject );
        setEmailSubject(refVal_setEmailSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_body"))))
    {
        utility::string_t refVal_setEmailBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_body"))), refVal_setEmailBody );
        setEmailBody(refVal_setEmailBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_from_name"))))
    {
        utility::string_t refVal_setEmailFromName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_from_name"))), refVal_setEmailFromName );
        setEmailFromName(refVal_setEmailFromName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_from_address"))))
    {
        utility::string_t refVal_setEmailFromAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_from_address"))), refVal_setEmailFromAddress );
        setEmailFromAddress(refVal_setEmailFromAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_preheader"))))
    {
        utility::string_t refVal_setEmailPreheader;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_preheader"))), refVal_setEmailPreheader );
        setEmailPreheader(refVal_setEmailPreheader);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_unsubscribed"))))
    {
        bool refVal_setIncludeUnsubscribed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_unsubscribed"))), refVal_setIncludeUnsubscribed );
        setIncludeUnsubscribed(refVal_setIncludeUnsubscribed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sms_from"))))
    {
        utility::string_t refVal_setSmsFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sms_from"))), refVal_setSmsFrom );
        setSmsFrom(refVal_setSmsFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sms_media_urls"))))
    {
        std::vector<utility::string_t> refVal_setSmsMediaUrls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sms_media_urls"))), refVal_setSmsMediaUrls );
        setSmsMediaUrls(refVal_setSmsMediaUrls);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filters"))))
    {
        std::vector<std::shared_ptr<Filter>> refVal_setFilters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filters"))), refVal_setFilters );
        setFilters(refVal_setFilters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_data"))))
    {
        std::shared_ptr<Object> refVal_setCustomData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_data"))), refVal_setCustomData );
        setCustomData(refVal_setCustomData);
    }
    return ok;
}

std::vector<utility::string_t>& BasicNotification::getIncludedSegments()
{
    return m_Included_segments;
}

void BasicNotification::setIncludedSegments(const std::vector<utility::string_t>& value)
{
    m_Included_segments = value;
    m_Included_segmentsIsSet = true;
}

bool BasicNotification::includedSegmentsIsSet() const
{
    return m_Included_segmentsIsSet;
}

void BasicNotification::unsetIncluded_segments()
{
    m_Included_segmentsIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getExcludedSegments()
{
    return m_Excluded_segments;
}

void BasicNotification::setExcludedSegments(const std::vector<utility::string_t>& value)
{
    m_Excluded_segments = value;
    m_Excluded_segmentsIsSet = true;
}

bool BasicNotification::excludedSegmentsIsSet() const
{
    return m_Excluded_segmentsIsSet;
}

void BasicNotification::unsetExcluded_segments()
{
    m_Excluded_segmentsIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getIncludePlayerIds()
{
    return m_Include_player_ids;
}

void BasicNotification::setIncludePlayerIds(const std::vector<utility::string_t>& value)
{
    m_Include_player_ids = value;
    m_Include_player_idsIsSet = true;
}

bool BasicNotification::includePlayerIdsIsSet() const
{
    return m_Include_player_idsIsSet;
}

void BasicNotification::unsetInclude_player_ids()
{
    m_Include_player_idsIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getIncludeExternalUserIds()
{
    return m_Include_external_user_ids;
}

void BasicNotification::setIncludeExternalUserIds(const std::vector<utility::string_t>& value)
{
    m_Include_external_user_ids = value;
    m_Include_external_user_idsIsSet = true;
}

bool BasicNotification::includeExternalUserIdsIsSet() const
{
    return m_Include_external_user_idsIsSet;
}

void BasicNotification::unsetInclude_external_user_ids()
{
    m_Include_external_user_idsIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getIncludeEmailTokens()
{
    return m_Include_email_tokens;
}

void BasicNotification::setIncludeEmailTokens(const std::vector<utility::string_t>& value)
{
    m_Include_email_tokens = value;
    m_Include_email_tokensIsSet = true;
}

bool BasicNotification::includeEmailTokensIsSet() const
{
    return m_Include_email_tokensIsSet;
}

void BasicNotification::unsetInclude_email_tokens()
{
    m_Include_email_tokensIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getIncludePhoneNumbers()
{
    return m_Include_phone_numbers;
}

void BasicNotification::setIncludePhoneNumbers(const std::vector<utility::string_t>& value)
{
    m_Include_phone_numbers = value;
    m_Include_phone_numbersIsSet = true;
}

bool BasicNotification::includePhoneNumbersIsSet() const
{
    return m_Include_phone_numbersIsSet;
}

void BasicNotification::unsetInclude_phone_numbers()
{
    m_Include_phone_numbersIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getIncludeIosTokens()
{
    return m_Include_ios_tokens;
}

void BasicNotification::setIncludeIosTokens(const std::vector<utility::string_t>& value)
{
    m_Include_ios_tokens = value;
    m_Include_ios_tokensIsSet = true;
}

bool BasicNotification::includeIosTokensIsSet() const
{
    return m_Include_ios_tokensIsSet;
}

void BasicNotification::unsetInclude_ios_tokens()
{
    m_Include_ios_tokensIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getIncludeWpWnsUris()
{
    return m_Include_wp_wns_uris;
}

void BasicNotification::setIncludeWpWnsUris(const std::vector<utility::string_t>& value)
{
    m_Include_wp_wns_uris = value;
    m_Include_wp_wns_urisIsSet = true;
}

bool BasicNotification::includeWpWnsUrisIsSet() const
{
    return m_Include_wp_wns_urisIsSet;
}

void BasicNotification::unsetInclude_wp_wns_uris()
{
    m_Include_wp_wns_urisIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getIncludeAmazonRegIds()
{
    return m_Include_amazon_reg_ids;
}

void BasicNotification::setIncludeAmazonRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_amazon_reg_ids = value;
    m_Include_amazon_reg_idsIsSet = true;
}

bool BasicNotification::includeAmazonRegIdsIsSet() const
{
    return m_Include_amazon_reg_idsIsSet;
}

void BasicNotification::unsetInclude_amazon_reg_ids()
{
    m_Include_amazon_reg_idsIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getIncludeChromeRegIds()
{
    return m_Include_chrome_reg_ids;
}

void BasicNotification::setIncludeChromeRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_chrome_reg_ids = value;
    m_Include_chrome_reg_idsIsSet = true;
}

bool BasicNotification::includeChromeRegIdsIsSet() const
{
    return m_Include_chrome_reg_idsIsSet;
}

void BasicNotification::unsetInclude_chrome_reg_ids()
{
    m_Include_chrome_reg_idsIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getIncludeChromeWebRegIds()
{
    return m_Include_chrome_web_reg_ids;
}

void BasicNotification::setIncludeChromeWebRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_chrome_web_reg_ids = value;
    m_Include_chrome_web_reg_idsIsSet = true;
}

bool BasicNotification::includeChromeWebRegIdsIsSet() const
{
    return m_Include_chrome_web_reg_idsIsSet;
}

void BasicNotification::unsetInclude_chrome_web_reg_ids()
{
    m_Include_chrome_web_reg_idsIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getIncludeAndroidRegIds()
{
    return m_Include_android_reg_ids;
}

void BasicNotification::setIncludeAndroidRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_android_reg_ids = value;
    m_Include_android_reg_idsIsSet = true;
}

bool BasicNotification::includeAndroidRegIdsIsSet() const
{
    return m_Include_android_reg_idsIsSet;
}

void BasicNotification::unsetInclude_android_reg_ids()
{
    m_Include_android_reg_idsIsSet = false;
}
std::shared_ptr<PlayerNotificationTarget_include_aliases> BasicNotification::getIncludeAliases() const
{
    return m_Include_aliases;
}

void BasicNotification::setIncludeAliases(const std::shared_ptr<PlayerNotificationTarget_include_aliases>& value)
{
    m_Include_aliases = value;
    m_Include_aliasesIsSet = true;
}

bool BasicNotification::includeAliasesIsSet() const
{
    return m_Include_aliasesIsSet;
}

void BasicNotification::unsetInclude_aliases()
{
    m_Include_aliasesIsSet = false;
}
utility::string_t BasicNotification::getTargetChannel() const
{
    return m_Target_channel;
}

void BasicNotification::setTargetChannel(const utility::string_t& value)
{
    m_Target_channel = value;
    m_Target_channelIsSet = true;
}

bool BasicNotification::targetChannelIsSet() const
{
    return m_Target_channelIsSet;
}

void BasicNotification::unsetTarget_channel()
{
    m_Target_channelIsSet = false;
}
utility::string_t BasicNotification::getId() const
{
    return m_Id;
}

void BasicNotification::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BasicNotification::idIsSet() const
{
    return m_IdIsSet;
}

void BasicNotification::unsetId()
{
    m_IdIsSet = false;
}
int32_t BasicNotification::getValue() const
{
    return m_Value;
}

void BasicNotification::setValue(int32_t value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool BasicNotification::valueIsSet() const
{
    return m_ValueIsSet;
}

void BasicNotification::unsetValue()
{
    m_ValueIsSet = false;
}
utility::string_t BasicNotification::getName() const
{
    return m_Name;
}

void BasicNotification::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BasicNotification::nameIsSet() const
{
    return m_NameIsSet;
}

void BasicNotification::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BasicNotification::getAggregation() const
{
    return m_Aggregation;
}

void BasicNotification::setAggregation(const utility::string_t& value)
{
    m_Aggregation = value;
    m_AggregationIsSet = true;
}

bool BasicNotification::aggregationIsSet() const
{
    return m_AggregationIsSet;
}

void BasicNotification::unsetAggregation()
{
    m_AggregationIsSet = false;
}
bool BasicNotification::isIsIos() const
{
    return m_IsIos;
}

void BasicNotification::setIsIos(bool value)
{
    m_IsIos = value;
    m_IsIosIsSet = true;
}

bool BasicNotification::isIosIsSet() const
{
    return m_IsIosIsSet;
}

void BasicNotification::unsetIsIos()
{
    m_IsIosIsSet = false;
}
bool BasicNotification::isIsAndroid() const
{
    return m_IsAndroid;
}

void BasicNotification::setIsAndroid(bool value)
{
    m_IsAndroid = value;
    m_IsAndroidIsSet = true;
}

bool BasicNotification::isAndroidIsSet() const
{
    return m_IsAndroidIsSet;
}

void BasicNotification::unsetIsAndroid()
{
    m_IsAndroidIsSet = false;
}
bool BasicNotification::isIsHuawei() const
{
    return m_IsHuawei;
}

void BasicNotification::setIsHuawei(bool value)
{
    m_IsHuawei = value;
    m_IsHuaweiIsSet = true;
}

bool BasicNotification::isHuaweiIsSet() const
{
    return m_IsHuaweiIsSet;
}

void BasicNotification::unsetIsHuawei()
{
    m_IsHuaweiIsSet = false;
}
bool BasicNotification::isIsAnyWeb() const
{
    return m_IsAnyWeb;
}

void BasicNotification::setIsAnyWeb(bool value)
{
    m_IsAnyWeb = value;
    m_IsAnyWebIsSet = true;
}

bool BasicNotification::isAnyWebIsSet() const
{
    return m_IsAnyWebIsSet;
}

void BasicNotification::unsetIsAnyWeb()
{
    m_IsAnyWebIsSet = false;
}
bool BasicNotification::isIsChromeWeb() const
{
    return m_IsChromeWeb;
}

void BasicNotification::setIsChromeWeb(bool value)
{
    m_IsChromeWeb = value;
    m_IsChromeWebIsSet = true;
}

bool BasicNotification::isChromeWebIsSet() const
{
    return m_IsChromeWebIsSet;
}

void BasicNotification::unsetIsChromeWeb()
{
    m_IsChromeWebIsSet = false;
}
bool BasicNotification::isIsFirefox() const
{
    return m_IsFirefox;
}

void BasicNotification::setIsFirefox(bool value)
{
    m_IsFirefox = value;
    m_IsFirefoxIsSet = true;
}

bool BasicNotification::isFirefoxIsSet() const
{
    return m_IsFirefoxIsSet;
}

void BasicNotification::unsetIsFirefox()
{
    m_IsFirefoxIsSet = false;
}
bool BasicNotification::isIsSafari() const
{
    return m_IsSafari;
}

void BasicNotification::setIsSafari(bool value)
{
    m_IsSafari = value;
    m_IsSafariIsSet = true;
}

bool BasicNotification::isSafariIsSet() const
{
    return m_IsSafariIsSet;
}

void BasicNotification::unsetIsSafari()
{
    m_IsSafariIsSet = false;
}
bool BasicNotification::isIsWPWNS() const
{
    return m_IsWP_WNS;
}

void BasicNotification::setIsWPWNS(bool value)
{
    m_IsWP_WNS = value;
    m_IsWP_WNSIsSet = true;
}

bool BasicNotification::isWPWNSIsSet() const
{
    return m_IsWP_WNSIsSet;
}

void BasicNotification::unsetIsWP_WNS()
{
    m_IsWP_WNSIsSet = false;
}
bool BasicNotification::isIsAdm() const
{
    return m_IsAdm;
}

void BasicNotification::setIsAdm(bool value)
{
    m_IsAdm = value;
    m_IsAdmIsSet = true;
}

bool BasicNotification::isAdmIsSet() const
{
    return m_IsAdmIsSet;
}

void BasicNotification::unsetIsAdm()
{
    m_IsAdmIsSet = false;
}
bool BasicNotification::isIsChrome() const
{
    return m_IsChrome;
}

void BasicNotification::setIsChrome(bool value)
{
    m_IsChrome = value;
    m_IsChromeIsSet = true;
}

bool BasicNotification::isChromeIsSet() const
{
    return m_IsChromeIsSet;
}

void BasicNotification::unsetIsChrome()
{
    m_IsChromeIsSet = false;
}
utility::string_t BasicNotification::getChannelForExternalUserIds() const
{
    return m_Channel_for_external_user_ids;
}

void BasicNotification::setChannelForExternalUserIds(const utility::string_t& value)
{
    m_Channel_for_external_user_ids = value;
    m_Channel_for_external_user_idsIsSet = true;
}

bool BasicNotification::channelForExternalUserIdsIsSet() const
{
    return m_Channel_for_external_user_idsIsSet;
}

void BasicNotification::unsetChannel_for_external_user_ids()
{
    m_Channel_for_external_user_idsIsSet = false;
}
utility::string_t BasicNotification::getAppId() const
{
    return m_App_id;
}

void BasicNotification::setAppId(const utility::string_t& value)
{
    m_App_id = value;
    m_App_idIsSet = true;
}

bool BasicNotification::appIdIsSet() const
{
    return m_App_idIsSet;
}

void BasicNotification::unsetApp_id()
{
    m_App_idIsSet = false;
}
utility::string_t BasicNotification::getExternalId() const
{
    return m_External_id;
}

void BasicNotification::setExternalId(const utility::string_t& value)
{
    m_External_id = value;
    m_External_idIsSet = true;
}

bool BasicNotification::externalIdIsSet() const
{
    return m_External_idIsSet;
}

void BasicNotification::unsetExternal_id()
{
    m_External_idIsSet = false;
}
utility::string_t BasicNotification::getIdempotencyKey() const
{
    return m_Idempotency_key;
}

void BasicNotification::setIdempotencyKey(const utility::string_t& value)
{
    m_Idempotency_key = value;
    m_Idempotency_keyIsSet = true;
}

bool BasicNotification::idempotencyKeyIsSet() const
{
    return m_Idempotency_keyIsSet;
}

void BasicNotification::unsetIdempotency_key()
{
    m_Idempotency_keyIsSet = false;
}
std::shared_ptr<StringMap> BasicNotification::getContents() const
{
    return m_Contents;
}

void BasicNotification::setContents(const std::shared_ptr<StringMap>& value)
{
    m_Contents = value;
    m_ContentsIsSet = true;
}

bool BasicNotification::contentsIsSet() const
{
    return m_ContentsIsSet;
}

void BasicNotification::unsetContents()
{
    m_ContentsIsSet = false;
}
std::shared_ptr<StringMap> BasicNotification::getHeadings() const
{
    return m_Headings;
}

void BasicNotification::setHeadings(const std::shared_ptr<StringMap>& value)
{
    m_Headings = value;
    m_HeadingsIsSet = true;
}

bool BasicNotification::headingsIsSet() const
{
    return m_HeadingsIsSet;
}

void BasicNotification::unsetHeadings()
{
    m_HeadingsIsSet = false;
}
std::shared_ptr<StringMap> BasicNotification::getSubtitle() const
{
    return m_Subtitle;
}

void BasicNotification::setSubtitle(const std::shared_ptr<StringMap>& value)
{
    m_Subtitle = value;
    m_SubtitleIsSet = true;
}

bool BasicNotification::subtitleIsSet() const
{
    return m_SubtitleIsSet;
}

void BasicNotification::unsetSubtitle()
{
    m_SubtitleIsSet = false;
}
std::shared_ptr<Object> BasicNotification::getData() const
{
    return m_Data;
}

void BasicNotification::setData(const std::shared_ptr<Object>& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool BasicNotification::dataIsSet() const
{
    return m_DataIsSet;
}

void BasicNotification::unsetData()
{
    m_DataIsSet = false;
}
utility::string_t BasicNotification::getHuaweiMsgType() const
{
    return m_Huawei_msg_type;
}

void BasicNotification::setHuaweiMsgType(const utility::string_t& value)
{
    m_Huawei_msg_type = value;
    m_Huawei_msg_typeIsSet = true;
}

bool BasicNotification::huaweiMsgTypeIsSet() const
{
    return m_Huawei_msg_typeIsSet;
}

void BasicNotification::unsetHuawei_msg_type()
{
    m_Huawei_msg_typeIsSet = false;
}
utility::string_t BasicNotification::getUrl() const
{
    return m_Url;
}

void BasicNotification::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool BasicNotification::urlIsSet() const
{
    return m_UrlIsSet;
}

void BasicNotification::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t BasicNotification::getWebUrl() const
{
    return m_Web_url;
}

void BasicNotification::setWebUrl(const utility::string_t& value)
{
    m_Web_url = value;
    m_Web_urlIsSet = true;
}

bool BasicNotification::webUrlIsSet() const
{
    return m_Web_urlIsSet;
}

void BasicNotification::unsetWeb_url()
{
    m_Web_urlIsSet = false;
}
utility::string_t BasicNotification::getAppUrl() const
{
    return m_App_url;
}

void BasicNotification::setAppUrl(const utility::string_t& value)
{
    m_App_url = value;
    m_App_urlIsSet = true;
}

bool BasicNotification::appUrlIsSet() const
{
    return m_App_urlIsSet;
}

void BasicNotification::unsetApp_url()
{
    m_App_urlIsSet = false;
}
std::shared_ptr<Object> BasicNotification::getIosAttachments() const
{
    return m_Ios_attachments;
}

void BasicNotification::setIosAttachments(const std::shared_ptr<Object>& value)
{
    m_Ios_attachments = value;
    m_Ios_attachmentsIsSet = true;
}

bool BasicNotification::iosAttachmentsIsSet() const
{
    return m_Ios_attachmentsIsSet;
}

void BasicNotification::unsetIos_attachments()
{
    m_Ios_attachmentsIsSet = false;
}
utility::string_t BasicNotification::getTemplateId() const
{
    return m_Template_id;
}

void BasicNotification::setTemplateId(const utility::string_t& value)
{
    m_Template_id = value;
    m_Template_idIsSet = true;
}

bool BasicNotification::templateIdIsSet() const
{
    return m_Template_idIsSet;
}

void BasicNotification::unsetTemplate_id()
{
    m_Template_idIsSet = false;
}
bool BasicNotification::isContentAvailable() const
{
    return m_Content_available;
}

void BasicNotification::setContentAvailable(bool value)
{
    m_Content_available = value;
    m_Content_availableIsSet = true;
}

bool BasicNotification::contentAvailableIsSet() const
{
    return m_Content_availableIsSet;
}

void BasicNotification::unsetContent_available()
{
    m_Content_availableIsSet = false;
}
bool BasicNotification::isMutableContent() const
{
    return m_Mutable_content;
}

void BasicNotification::setMutableContent(bool value)
{
    m_Mutable_content = value;
    m_Mutable_contentIsSet = true;
}

bool BasicNotification::mutableContentIsSet() const
{
    return m_Mutable_contentIsSet;
}

void BasicNotification::unsetMutable_content()
{
    m_Mutable_contentIsSet = false;
}
utility::string_t BasicNotification::getTargetContentIdentifier() const
{
    return m_Target_content_identifier;
}

void BasicNotification::setTargetContentIdentifier(const utility::string_t& value)
{
    m_Target_content_identifier = value;
    m_Target_content_identifierIsSet = true;
}

bool BasicNotification::targetContentIdentifierIsSet() const
{
    return m_Target_content_identifierIsSet;
}

void BasicNotification::unsetTarget_content_identifier()
{
    m_Target_content_identifierIsSet = false;
}
utility::string_t BasicNotification::getBigPicture() const
{
    return m_Big_picture;
}

void BasicNotification::setBigPicture(const utility::string_t& value)
{
    m_Big_picture = value;
    m_Big_pictureIsSet = true;
}

bool BasicNotification::bigPictureIsSet() const
{
    return m_Big_pictureIsSet;
}

void BasicNotification::unsetBig_picture()
{
    m_Big_pictureIsSet = false;
}
utility::string_t BasicNotification::getHuaweiBigPicture() const
{
    return m_Huawei_big_picture;
}

void BasicNotification::setHuaweiBigPicture(const utility::string_t& value)
{
    m_Huawei_big_picture = value;
    m_Huawei_big_pictureIsSet = true;
}

bool BasicNotification::huaweiBigPictureIsSet() const
{
    return m_Huawei_big_pictureIsSet;
}

void BasicNotification::unsetHuawei_big_picture()
{
    m_Huawei_big_pictureIsSet = false;
}
utility::string_t BasicNotification::getAdmBigPicture() const
{
    return m_Adm_big_picture;
}

void BasicNotification::setAdmBigPicture(const utility::string_t& value)
{
    m_Adm_big_picture = value;
    m_Adm_big_pictureIsSet = true;
}

bool BasicNotification::admBigPictureIsSet() const
{
    return m_Adm_big_pictureIsSet;
}

void BasicNotification::unsetAdm_big_picture()
{
    m_Adm_big_pictureIsSet = false;
}
utility::string_t BasicNotification::getChromeBigPicture() const
{
    return m_Chrome_big_picture;
}

void BasicNotification::setChromeBigPicture(const utility::string_t& value)
{
    m_Chrome_big_picture = value;
    m_Chrome_big_pictureIsSet = true;
}

bool BasicNotification::chromeBigPictureIsSet() const
{
    return m_Chrome_big_pictureIsSet;
}

void BasicNotification::unsetChrome_big_picture()
{
    m_Chrome_big_pictureIsSet = false;
}
utility::string_t BasicNotification::getChromeWebImage() const
{
    return m_Chrome_web_image;
}

void BasicNotification::setChromeWebImage(const utility::string_t& value)
{
    m_Chrome_web_image = value;
    m_Chrome_web_imageIsSet = true;
}

bool BasicNotification::chromeWebImageIsSet() const
{
    return m_Chrome_web_imageIsSet;
}

void BasicNotification::unsetChrome_web_image()
{
    m_Chrome_web_imageIsSet = false;
}
std::vector<std::shared_ptr<Button>>& BasicNotification::getButtons()
{
    return m_Buttons;
}

void BasicNotification::setButtons(const std::vector<std::shared_ptr<Button>>& value)
{
    m_Buttons = value;
    m_ButtonsIsSet = true;
}

bool BasicNotification::buttonsIsSet() const
{
    return m_ButtonsIsSet;
}

void BasicNotification::unsetButtons()
{
    m_ButtonsIsSet = false;
}
std::vector<std::shared_ptr<Button>>& BasicNotification::getWebButtons()
{
    return m_Web_buttons;
}

void BasicNotification::setWebButtons(const std::vector<std::shared_ptr<Button>>& value)
{
    m_Web_buttons = value;
    m_Web_buttonsIsSet = true;
}

bool BasicNotification::webButtonsIsSet() const
{
    return m_Web_buttonsIsSet;
}

void BasicNotification::unsetWeb_buttons()
{
    m_Web_buttonsIsSet = false;
}
utility::string_t BasicNotification::getIosCategory() const
{
    return m_Ios_category;
}

void BasicNotification::setIosCategory(const utility::string_t& value)
{
    m_Ios_category = value;
    m_Ios_categoryIsSet = true;
}

bool BasicNotification::iosCategoryIsSet() const
{
    return m_Ios_categoryIsSet;
}

void BasicNotification::unsetIos_category()
{
    m_Ios_categoryIsSet = false;
}
utility::string_t BasicNotification::getAndroidChannelId() const
{
    return m_Android_channel_id;
}

void BasicNotification::setAndroidChannelId(const utility::string_t& value)
{
    m_Android_channel_id = value;
    m_Android_channel_idIsSet = true;
}

bool BasicNotification::androidChannelIdIsSet() const
{
    return m_Android_channel_idIsSet;
}

void BasicNotification::unsetAndroid_channel_id()
{
    m_Android_channel_idIsSet = false;
}
utility::string_t BasicNotification::getHuaweiChannelId() const
{
    return m_Huawei_channel_id;
}

void BasicNotification::setHuaweiChannelId(const utility::string_t& value)
{
    m_Huawei_channel_id = value;
    m_Huawei_channel_idIsSet = true;
}

bool BasicNotification::huaweiChannelIdIsSet() const
{
    return m_Huawei_channel_idIsSet;
}

void BasicNotification::unsetHuawei_channel_id()
{
    m_Huawei_channel_idIsSet = false;
}
utility::string_t BasicNotification::getExistingAndroidChannelId() const
{
    return m_Existing_android_channel_id;
}

void BasicNotification::setExistingAndroidChannelId(const utility::string_t& value)
{
    m_Existing_android_channel_id = value;
    m_Existing_android_channel_idIsSet = true;
}

bool BasicNotification::existingAndroidChannelIdIsSet() const
{
    return m_Existing_android_channel_idIsSet;
}

void BasicNotification::unsetExisting_android_channel_id()
{
    m_Existing_android_channel_idIsSet = false;
}
utility::string_t BasicNotification::getHuaweiExistingChannelId() const
{
    return m_Huawei_existing_channel_id;
}

void BasicNotification::setHuaweiExistingChannelId(const utility::string_t& value)
{
    m_Huawei_existing_channel_id = value;
    m_Huawei_existing_channel_idIsSet = true;
}

bool BasicNotification::huaweiExistingChannelIdIsSet() const
{
    return m_Huawei_existing_channel_idIsSet;
}

void BasicNotification::unsetHuawei_existing_channel_id()
{
    m_Huawei_existing_channel_idIsSet = false;
}
std::shared_ptr<BasicNotification_allOf_android_background_layout> BasicNotification::getAndroidBackgroundLayout() const
{
    return m_Android_background_layout;
}

void BasicNotification::setAndroidBackgroundLayout(const std::shared_ptr<BasicNotification_allOf_android_background_layout>& value)
{
    m_Android_background_layout = value;
    m_Android_background_layoutIsSet = true;
}

bool BasicNotification::androidBackgroundLayoutIsSet() const
{
    return m_Android_background_layoutIsSet;
}

void BasicNotification::unsetAndroid_background_layout()
{
    m_Android_background_layoutIsSet = false;
}
utility::string_t BasicNotification::getSmallIcon() const
{
    return m_Small_icon;
}

void BasicNotification::setSmallIcon(const utility::string_t& value)
{
    m_Small_icon = value;
    m_Small_iconIsSet = true;
}

bool BasicNotification::smallIconIsSet() const
{
    return m_Small_iconIsSet;
}

void BasicNotification::unsetSmall_icon()
{
    m_Small_iconIsSet = false;
}
utility::string_t BasicNotification::getHuaweiSmallIcon() const
{
    return m_Huawei_small_icon;
}

void BasicNotification::setHuaweiSmallIcon(const utility::string_t& value)
{
    m_Huawei_small_icon = value;
    m_Huawei_small_iconIsSet = true;
}

bool BasicNotification::huaweiSmallIconIsSet() const
{
    return m_Huawei_small_iconIsSet;
}

void BasicNotification::unsetHuawei_small_icon()
{
    m_Huawei_small_iconIsSet = false;
}
utility::string_t BasicNotification::getLargeIcon() const
{
    return m_Large_icon;
}

void BasicNotification::setLargeIcon(const utility::string_t& value)
{
    m_Large_icon = value;
    m_Large_iconIsSet = true;
}

bool BasicNotification::largeIconIsSet() const
{
    return m_Large_iconIsSet;
}

void BasicNotification::unsetLarge_icon()
{
    m_Large_iconIsSet = false;
}
utility::string_t BasicNotification::getHuaweiLargeIcon() const
{
    return m_Huawei_large_icon;
}

void BasicNotification::setHuaweiLargeIcon(const utility::string_t& value)
{
    m_Huawei_large_icon = value;
    m_Huawei_large_iconIsSet = true;
}

bool BasicNotification::huaweiLargeIconIsSet() const
{
    return m_Huawei_large_iconIsSet;
}

void BasicNotification::unsetHuawei_large_icon()
{
    m_Huawei_large_iconIsSet = false;
}
utility::string_t BasicNotification::getAdmSmallIcon() const
{
    return m_Adm_small_icon;
}

void BasicNotification::setAdmSmallIcon(const utility::string_t& value)
{
    m_Adm_small_icon = value;
    m_Adm_small_iconIsSet = true;
}

bool BasicNotification::admSmallIconIsSet() const
{
    return m_Adm_small_iconIsSet;
}

void BasicNotification::unsetAdm_small_icon()
{
    m_Adm_small_iconIsSet = false;
}
utility::string_t BasicNotification::getAdmLargeIcon() const
{
    return m_Adm_large_icon;
}

void BasicNotification::setAdmLargeIcon(const utility::string_t& value)
{
    m_Adm_large_icon = value;
    m_Adm_large_iconIsSet = true;
}

bool BasicNotification::admLargeIconIsSet() const
{
    return m_Adm_large_iconIsSet;
}

void BasicNotification::unsetAdm_large_icon()
{
    m_Adm_large_iconIsSet = false;
}
utility::string_t BasicNotification::getChromeWebIcon() const
{
    return m_Chrome_web_icon;
}

void BasicNotification::setChromeWebIcon(const utility::string_t& value)
{
    m_Chrome_web_icon = value;
    m_Chrome_web_iconIsSet = true;
}

bool BasicNotification::chromeWebIconIsSet() const
{
    return m_Chrome_web_iconIsSet;
}

void BasicNotification::unsetChrome_web_icon()
{
    m_Chrome_web_iconIsSet = false;
}
utility::string_t BasicNotification::getChromeWebBadge() const
{
    return m_Chrome_web_badge;
}

void BasicNotification::setChromeWebBadge(const utility::string_t& value)
{
    m_Chrome_web_badge = value;
    m_Chrome_web_badgeIsSet = true;
}

bool BasicNotification::chromeWebBadgeIsSet() const
{
    return m_Chrome_web_badgeIsSet;
}

void BasicNotification::unsetChrome_web_badge()
{
    m_Chrome_web_badgeIsSet = false;
}
utility::string_t BasicNotification::getFirefoxIcon() const
{
    return m_Firefox_icon;
}

void BasicNotification::setFirefoxIcon(const utility::string_t& value)
{
    m_Firefox_icon = value;
    m_Firefox_iconIsSet = true;
}

bool BasicNotification::firefoxIconIsSet() const
{
    return m_Firefox_iconIsSet;
}

void BasicNotification::unsetFirefox_icon()
{
    m_Firefox_iconIsSet = false;
}
utility::string_t BasicNotification::getChromeIcon() const
{
    return m_Chrome_icon;
}

void BasicNotification::setChromeIcon(const utility::string_t& value)
{
    m_Chrome_icon = value;
    m_Chrome_iconIsSet = true;
}

bool BasicNotification::chromeIconIsSet() const
{
    return m_Chrome_iconIsSet;
}

void BasicNotification::unsetChrome_icon()
{
    m_Chrome_iconIsSet = false;
}
utility::string_t BasicNotification::getIosSound() const
{
    return m_Ios_sound;
}

void BasicNotification::setIosSound(const utility::string_t& value)
{
    m_Ios_sound = value;
    m_Ios_soundIsSet = true;
}

bool BasicNotification::iosSoundIsSet() const
{
    return m_Ios_soundIsSet;
}

void BasicNotification::unsetIos_sound()
{
    m_Ios_soundIsSet = false;
}
utility::string_t BasicNotification::getAndroidSound() const
{
    return m_Android_sound;
}

void BasicNotification::setAndroidSound(const utility::string_t& value)
{
    m_Android_sound = value;
    m_Android_soundIsSet = true;
}

bool BasicNotification::androidSoundIsSet() const
{
    return m_Android_soundIsSet;
}

void BasicNotification::unsetAndroid_sound()
{
    m_Android_soundIsSet = false;
}
utility::string_t BasicNotification::getHuaweiSound() const
{
    return m_Huawei_sound;
}

void BasicNotification::setHuaweiSound(const utility::string_t& value)
{
    m_Huawei_sound = value;
    m_Huawei_soundIsSet = true;
}

bool BasicNotification::huaweiSoundIsSet() const
{
    return m_Huawei_soundIsSet;
}

void BasicNotification::unsetHuawei_sound()
{
    m_Huawei_soundIsSet = false;
}
utility::string_t BasicNotification::getAdmSound() const
{
    return m_Adm_sound;
}

void BasicNotification::setAdmSound(const utility::string_t& value)
{
    m_Adm_sound = value;
    m_Adm_soundIsSet = true;
}

bool BasicNotification::admSoundIsSet() const
{
    return m_Adm_soundIsSet;
}

void BasicNotification::unsetAdm_sound()
{
    m_Adm_soundIsSet = false;
}
utility::string_t BasicNotification::getWpWnsSound() const
{
    return m_Wp_wns_sound;
}

void BasicNotification::setWpWnsSound(const utility::string_t& value)
{
    m_Wp_wns_sound = value;
    m_Wp_wns_soundIsSet = true;
}

bool BasicNotification::wpWnsSoundIsSet() const
{
    return m_Wp_wns_soundIsSet;
}

void BasicNotification::unsetWp_wns_sound()
{
    m_Wp_wns_soundIsSet = false;
}
utility::string_t BasicNotification::getAndroidLedColor() const
{
    return m_Android_led_color;
}

void BasicNotification::setAndroidLedColor(const utility::string_t& value)
{
    m_Android_led_color = value;
    m_Android_led_colorIsSet = true;
}

bool BasicNotification::androidLedColorIsSet() const
{
    return m_Android_led_colorIsSet;
}

void BasicNotification::unsetAndroid_led_color()
{
    m_Android_led_colorIsSet = false;
}
utility::string_t BasicNotification::getHuaweiLedColor() const
{
    return m_Huawei_led_color;
}

void BasicNotification::setHuaweiLedColor(const utility::string_t& value)
{
    m_Huawei_led_color = value;
    m_Huawei_led_colorIsSet = true;
}

bool BasicNotification::huaweiLedColorIsSet() const
{
    return m_Huawei_led_colorIsSet;
}

void BasicNotification::unsetHuawei_led_color()
{
    m_Huawei_led_colorIsSet = false;
}
utility::string_t BasicNotification::getAndroidAccentColor() const
{
    return m_Android_accent_color;
}

void BasicNotification::setAndroidAccentColor(const utility::string_t& value)
{
    m_Android_accent_color = value;
    m_Android_accent_colorIsSet = true;
}

bool BasicNotification::androidAccentColorIsSet() const
{
    return m_Android_accent_colorIsSet;
}

void BasicNotification::unsetAndroid_accent_color()
{
    m_Android_accent_colorIsSet = false;
}
utility::string_t BasicNotification::getHuaweiAccentColor() const
{
    return m_Huawei_accent_color;
}

void BasicNotification::setHuaweiAccentColor(const utility::string_t& value)
{
    m_Huawei_accent_color = value;
    m_Huawei_accent_colorIsSet = true;
}

bool BasicNotification::huaweiAccentColorIsSet() const
{
    return m_Huawei_accent_colorIsSet;
}

void BasicNotification::unsetHuawei_accent_color()
{
    m_Huawei_accent_colorIsSet = false;
}
int32_t BasicNotification::getAndroidVisibility() const
{
    return m_Android_visibility;
}

void BasicNotification::setAndroidVisibility(int32_t value)
{
    m_Android_visibility = value;
    m_Android_visibilityIsSet = true;
}

bool BasicNotification::androidVisibilityIsSet() const
{
    return m_Android_visibilityIsSet;
}

void BasicNotification::unsetAndroid_visibility()
{
    m_Android_visibilityIsSet = false;
}
int32_t BasicNotification::getHuaweiVisibility() const
{
    return m_Huawei_visibility;
}

void BasicNotification::setHuaweiVisibility(int32_t value)
{
    m_Huawei_visibility = value;
    m_Huawei_visibilityIsSet = true;
}

bool BasicNotification::huaweiVisibilityIsSet() const
{
    return m_Huawei_visibilityIsSet;
}

void BasicNotification::unsetHuawei_visibility()
{
    m_Huawei_visibilityIsSet = false;
}
utility::string_t BasicNotification::getIosBadgeType() const
{
    return m_Ios_badgeType;
}

void BasicNotification::setIosBadgeType(const utility::string_t& value)
{
    m_Ios_badgeType = value;
    m_Ios_badgeTypeIsSet = true;
}

bool BasicNotification::iosBadgeTypeIsSet() const
{
    return m_Ios_badgeTypeIsSet;
}

void BasicNotification::unsetIos_badgeType()
{
    m_Ios_badgeTypeIsSet = false;
}
int32_t BasicNotification::getIosBadgeCount() const
{
    return m_Ios_badgeCount;
}

void BasicNotification::setIosBadgeCount(int32_t value)
{
    m_Ios_badgeCount = value;
    m_Ios_badgeCountIsSet = true;
}

bool BasicNotification::iosBadgeCountIsSet() const
{
    return m_Ios_badgeCountIsSet;
}

void BasicNotification::unsetIos_badgeCount()
{
    m_Ios_badgeCountIsSet = false;
}
utility::string_t BasicNotification::getCollapseId() const
{
    return m_Collapse_id;
}

void BasicNotification::setCollapseId(const utility::string_t& value)
{
    m_Collapse_id = value;
    m_Collapse_idIsSet = true;
}

bool BasicNotification::collapseIdIsSet() const
{
    return m_Collapse_idIsSet;
}

void BasicNotification::unsetCollapse_id()
{
    m_Collapse_idIsSet = false;
}
utility::string_t BasicNotification::getWebPushTopic() const
{
    return m_Web_push_topic;
}

void BasicNotification::setWebPushTopic(const utility::string_t& value)
{
    m_Web_push_topic = value;
    m_Web_push_topicIsSet = true;
}

bool BasicNotification::webPushTopicIsSet() const
{
    return m_Web_push_topicIsSet;
}

void BasicNotification::unsetWeb_push_topic()
{
    m_Web_push_topicIsSet = false;
}
std::shared_ptr<Object> BasicNotification::getApnsAlert() const
{
    return m_Apns_alert;
}

void BasicNotification::setApnsAlert(const std::shared_ptr<Object>& value)
{
    m_Apns_alert = value;
    m_Apns_alertIsSet = true;
}

bool BasicNotification::apnsAlertIsSet() const
{
    return m_Apns_alertIsSet;
}

void BasicNotification::unsetApns_alert()
{
    m_Apns_alertIsSet = false;
}
utility::string_t BasicNotification::getDelayedOption() const
{
    return m_Delayed_option;
}

void BasicNotification::setDelayedOption(const utility::string_t& value)
{
    m_Delayed_option = value;
    m_Delayed_optionIsSet = true;
}

bool BasicNotification::delayedOptionIsSet() const
{
    return m_Delayed_optionIsSet;
}

void BasicNotification::unsetDelayed_option()
{
    m_Delayed_optionIsSet = false;
}
utility::string_t BasicNotification::getDeliveryTimeOfDay() const
{
    return m_Delivery_time_of_day;
}

void BasicNotification::setDeliveryTimeOfDay(const utility::string_t& value)
{
    m_Delivery_time_of_day = value;
    m_Delivery_time_of_dayIsSet = true;
}

bool BasicNotification::deliveryTimeOfDayIsSet() const
{
    return m_Delivery_time_of_dayIsSet;
}

void BasicNotification::unsetDelivery_time_of_day()
{
    m_Delivery_time_of_dayIsSet = false;
}
int32_t BasicNotification::getTtl() const
{
    return m_Ttl;
}

void BasicNotification::setTtl(int32_t value)
{
    m_Ttl = value;
    m_TtlIsSet = true;
}

bool BasicNotification::ttlIsSet() const
{
    return m_TtlIsSet;
}

void BasicNotification::unsetTtl()
{
    m_TtlIsSet = false;
}
int32_t BasicNotification::getPriority() const
{
    return m_Priority;
}

void BasicNotification::setPriority(int32_t value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}

bool BasicNotification::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void BasicNotification::unsetPriority()
{
    m_PriorityIsSet = false;
}
utility::string_t BasicNotification::getApnsPushTypeOverride() const
{
    return m_Apns_push_type_override;
}

void BasicNotification::setApnsPushTypeOverride(const utility::string_t& value)
{
    m_Apns_push_type_override = value;
    m_Apns_push_type_overrideIsSet = true;
}

bool BasicNotification::apnsPushTypeOverrideIsSet() const
{
    return m_Apns_push_type_overrideIsSet;
}

void BasicNotification::unsetApns_push_type_override()
{
    m_Apns_push_type_overrideIsSet = false;
}
utility::string_t BasicNotification::getThrottleRatePerMinute() const
{
    return m_Throttle_rate_per_minute;
}

void BasicNotification::setThrottleRatePerMinute(const utility::string_t& value)
{
    m_Throttle_rate_per_minute = value;
    m_Throttle_rate_per_minuteIsSet = true;
}

bool BasicNotification::throttleRatePerMinuteIsSet() const
{
    return m_Throttle_rate_per_minuteIsSet;
}

void BasicNotification::unsetThrottle_rate_per_minute()
{
    m_Throttle_rate_per_minuteIsSet = false;
}
utility::string_t BasicNotification::getAndroidGroup() const
{
    return m_Android_group;
}

void BasicNotification::setAndroidGroup(const utility::string_t& value)
{
    m_Android_group = value;
    m_Android_groupIsSet = true;
}

bool BasicNotification::androidGroupIsSet() const
{
    return m_Android_groupIsSet;
}

void BasicNotification::unsetAndroid_group()
{
    m_Android_groupIsSet = false;
}
utility::string_t BasicNotification::getAndroidGroupMessage() const
{
    return m_Android_group_message;
}

void BasicNotification::setAndroidGroupMessage(const utility::string_t& value)
{
    m_Android_group_message = value;
    m_Android_group_messageIsSet = true;
}

bool BasicNotification::androidGroupMessageIsSet() const
{
    return m_Android_group_messageIsSet;
}

void BasicNotification::unsetAndroid_group_message()
{
    m_Android_group_messageIsSet = false;
}
utility::string_t BasicNotification::getAdmGroup() const
{
    return m_Adm_group;
}

void BasicNotification::setAdmGroup(const utility::string_t& value)
{
    m_Adm_group = value;
    m_Adm_groupIsSet = true;
}

bool BasicNotification::admGroupIsSet() const
{
    return m_Adm_groupIsSet;
}

void BasicNotification::unsetAdm_group()
{
    m_Adm_groupIsSet = false;
}
std::shared_ptr<Object> BasicNotification::getAdmGroupMessage() const
{
    return m_Adm_group_message;
}

void BasicNotification::setAdmGroupMessage(const std::shared_ptr<Object>& value)
{
    m_Adm_group_message = value;
    m_Adm_group_messageIsSet = true;
}

bool BasicNotification::admGroupMessageIsSet() const
{
    return m_Adm_group_messageIsSet;
}

void BasicNotification::unsetAdm_group_message()
{
    m_Adm_group_messageIsSet = false;
}
utility::string_t BasicNotification::getThreadId() const
{
    return m_Thread_id;
}

void BasicNotification::setThreadId(const utility::string_t& value)
{
    m_Thread_id = value;
    m_Thread_idIsSet = true;
}

bool BasicNotification::threadIdIsSet() const
{
    return m_Thread_idIsSet;
}

void BasicNotification::unsetThread_id()
{
    m_Thread_idIsSet = false;
}
utility::string_t BasicNotification::getSummaryArg() const
{
    return m_Summary_arg;
}

void BasicNotification::setSummaryArg(const utility::string_t& value)
{
    m_Summary_arg = value;
    m_Summary_argIsSet = true;
}

bool BasicNotification::summaryArgIsSet() const
{
    return m_Summary_argIsSet;
}

void BasicNotification::unsetSummary_arg()
{
    m_Summary_argIsSet = false;
}
int32_t BasicNotification::getSummaryArgCount() const
{
    return m_Summary_arg_count;
}

void BasicNotification::setSummaryArgCount(int32_t value)
{
    m_Summary_arg_count = value;
    m_Summary_arg_countIsSet = true;
}

bool BasicNotification::summaryArgCountIsSet() const
{
    return m_Summary_arg_countIsSet;
}

void BasicNotification::unsetSummary_arg_count()
{
    m_Summary_arg_countIsSet = false;
}
utility::string_t BasicNotification::getEmailSubject() const
{
    return m_Email_subject;
}

void BasicNotification::setEmailSubject(const utility::string_t& value)
{
    m_Email_subject = value;
    m_Email_subjectIsSet = true;
}

bool BasicNotification::emailSubjectIsSet() const
{
    return m_Email_subjectIsSet;
}

void BasicNotification::unsetEmail_subject()
{
    m_Email_subjectIsSet = false;
}
utility::string_t BasicNotification::getEmailBody() const
{
    return m_Email_body;
}

void BasicNotification::setEmailBody(const utility::string_t& value)
{
    m_Email_body = value;
    m_Email_bodyIsSet = true;
}

bool BasicNotification::emailBodyIsSet() const
{
    return m_Email_bodyIsSet;
}

void BasicNotification::unsetEmail_body()
{
    m_Email_bodyIsSet = false;
}
utility::string_t BasicNotification::getEmailFromName() const
{
    return m_Email_from_name;
}

void BasicNotification::setEmailFromName(const utility::string_t& value)
{
    m_Email_from_name = value;
    m_Email_from_nameIsSet = true;
}

bool BasicNotification::emailFromNameIsSet() const
{
    return m_Email_from_nameIsSet;
}

void BasicNotification::unsetEmail_from_name()
{
    m_Email_from_nameIsSet = false;
}
utility::string_t BasicNotification::getEmailFromAddress() const
{
    return m_Email_from_address;
}

void BasicNotification::setEmailFromAddress(const utility::string_t& value)
{
    m_Email_from_address = value;
    m_Email_from_addressIsSet = true;
}

bool BasicNotification::emailFromAddressIsSet() const
{
    return m_Email_from_addressIsSet;
}

void BasicNotification::unsetEmail_from_address()
{
    m_Email_from_addressIsSet = false;
}
utility::string_t BasicNotification::getEmailPreheader() const
{
    return m_Email_preheader;
}

void BasicNotification::setEmailPreheader(const utility::string_t& value)
{
    m_Email_preheader = value;
    m_Email_preheaderIsSet = true;
}

bool BasicNotification::emailPreheaderIsSet() const
{
    return m_Email_preheaderIsSet;
}

void BasicNotification::unsetEmail_preheader()
{
    m_Email_preheaderIsSet = false;
}
bool BasicNotification::isIncludeUnsubscribed() const
{
    return m_Include_unsubscribed;
}

void BasicNotification::setIncludeUnsubscribed(bool value)
{
    m_Include_unsubscribed = value;
    m_Include_unsubscribedIsSet = true;
}

bool BasicNotification::includeUnsubscribedIsSet() const
{
    return m_Include_unsubscribedIsSet;
}

void BasicNotification::unsetInclude_unsubscribed()
{
    m_Include_unsubscribedIsSet = false;
}
utility::string_t BasicNotification::getSmsFrom() const
{
    return m_Sms_from;
}

void BasicNotification::setSmsFrom(const utility::string_t& value)
{
    m_Sms_from = value;
    m_Sms_fromIsSet = true;
}

bool BasicNotification::smsFromIsSet() const
{
    return m_Sms_fromIsSet;
}

void BasicNotification::unsetSms_from()
{
    m_Sms_fromIsSet = false;
}
std::vector<utility::string_t>& BasicNotification::getSmsMediaUrls()
{
    return m_Sms_media_urls;
}

void BasicNotification::setSmsMediaUrls(const std::vector<utility::string_t>& value)
{
    m_Sms_media_urls = value;
    m_Sms_media_urlsIsSet = true;
}

bool BasicNotification::smsMediaUrlsIsSet() const
{
    return m_Sms_media_urlsIsSet;
}

void BasicNotification::unsetSms_media_urls()
{
    m_Sms_media_urlsIsSet = false;
}
std::vector<std::shared_ptr<Filter>>& BasicNotification::getFilters()
{
    return m_Filters;
}

void BasicNotification::setFilters(const std::vector<std::shared_ptr<Filter>>& value)
{
    m_Filters = value;
    m_FiltersIsSet = true;
}

bool BasicNotification::filtersIsSet() const
{
    return m_FiltersIsSet;
}

void BasicNotification::unsetFilters()
{
    m_FiltersIsSet = false;
}
std::shared_ptr<Object> BasicNotification::getCustomData() const
{
    return m_Custom_data;
}

void BasicNotification::setCustomData(const std::shared_ptr<Object>& value)
{
    m_Custom_data = value;
    m_Custom_dataIsSet = true;
}

bool BasicNotification::customDataIsSet() const
{
    return m_Custom_dataIsSet;
}

void BasicNotification::unsetCustom_data()
{
    m_Custom_dataIsSet = false;
}
}
}
}
}


