/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/CreateNotificationSuccessResponse.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



CreateNotificationSuccessResponse::CreateNotificationSuccessResponse()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Recipients = 0;
    m_RecipientsIsSet = false;
    m_External_id = utility::conversions::to_string_t("");
    m_External_idIsSet = false;
    m_ErrorsIsSet = false;
}

CreateNotificationSuccessResponse::~CreateNotificationSuccessResponse()
{
}

void CreateNotificationSuccessResponse::validate()
{
    // TODO: implement validation
}

web::json::value CreateNotificationSuccessResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_RecipientsIsSet)
    {
        val[utility::conversions::to_string_t(U("recipients"))] = ModelBase::toJson(m_Recipients);
    }
    if(m_External_idIsSet)
    {
        val[utility::conversions::to_string_t(U("external_id"))] = ModelBase::toJson(m_External_id);
    }
    if(m_ErrorsIsSet)
    {
        val[utility::conversions::to_string_t(U("errors"))] = ModelBase::toJson(m_Errors);
    }

    return val;
}

bool CreateNotificationSuccessResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipients"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipients")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipients);
            setRecipients(refVal_setRecipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("external_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("external_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExternalId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExternalId);
            setExternalId(refVal_setExternalId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errors")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Notification200Errors> refVal_setErrors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrors);
            setErrors(refVal_setErrors);
        }
    }
    return ok;
}

void CreateNotificationSuccessResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_RecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipients")), m_Recipients));
    }
    if(m_External_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("external_id")), m_External_id));
    }
    if(m_ErrorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errors")), m_Errors));
    }
}

bool CreateNotificationSuccessResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipients"))))
    {
        int32_t refVal_setRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipients"))), refVal_setRecipients );
        setRecipients(refVal_setRecipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("external_id"))))
    {
        utility::string_t refVal_setExternalId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("external_id"))), refVal_setExternalId );
        setExternalId(refVal_setExternalId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errors"))))
    {
        std::shared_ptr<Notification200Errors> refVal_setErrors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errors"))), refVal_setErrors );
        setErrors(refVal_setErrors);
    }
    return ok;
}

utility::string_t CreateNotificationSuccessResponse::getId() const
{
    return m_Id;
}

void CreateNotificationSuccessResponse::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool CreateNotificationSuccessResponse::idIsSet() const
{
    return m_IdIsSet;
}

void CreateNotificationSuccessResponse::unsetId()
{
    m_IdIsSet = false;
}
int32_t CreateNotificationSuccessResponse::getRecipients() const
{
    return m_Recipients;
}

void CreateNotificationSuccessResponse::setRecipients(int32_t value)
{
    m_Recipients = value;
    m_RecipientsIsSet = true;
}

bool CreateNotificationSuccessResponse::recipientsIsSet() const
{
    return m_RecipientsIsSet;
}

void CreateNotificationSuccessResponse::unsetRecipients()
{
    m_RecipientsIsSet = false;
}
utility::string_t CreateNotificationSuccessResponse::getExternalId() const
{
    return m_External_id;
}

void CreateNotificationSuccessResponse::setExternalId(const utility::string_t& value)
{
    m_External_id = value;
    m_External_idIsSet = true;
}

bool CreateNotificationSuccessResponse::externalIdIsSet() const
{
    return m_External_idIsSet;
}

void CreateNotificationSuccessResponse::unsetExternal_id()
{
    m_External_idIsSet = false;
}
std::shared_ptr<Notification200Errors> CreateNotificationSuccessResponse::getErrors() const
{
    return m_Errors;
}

void CreateNotificationSuccessResponse::setErrors(const std::shared_ptr<Notification200Errors>& value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}

bool CreateNotificationSuccessResponse::errorsIsSet() const
{
    return m_ErrorsIsSet;
}

void CreateNotificationSuccessResponse::unsetErrors()
{
    m_ErrorsIsSet = false;
}
}
}
}
}


