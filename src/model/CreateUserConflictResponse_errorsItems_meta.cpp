/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/CreateUserConflictResponse_errorsItems_meta.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



CreateUserConflictResponse_errorsItems_meta::CreateUserConflictResponse_errorsItems_meta()
{
    m_Conflicting_aliasesIsSet = false;
}

CreateUserConflictResponse_errorsItems_meta::~CreateUserConflictResponse_errorsItems_meta()
{
}

void CreateUserConflictResponse_errorsItems_meta::validate()
{
    // TODO: implement validation
}

web::json::value CreateUserConflictResponse_errorsItems_meta::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Conflicting_aliasesIsSet)
    {
        val[utility::conversions::to_string_t(U("conflicting_aliases"))] = ModelBase::toJson(m_Conflicting_aliases);
    }

    return val;
}

bool CreateUserConflictResponse_errorsItems_meta::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("conflicting_aliases"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conflicting_aliases")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setConflictingAliases;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConflictingAliases);
            setConflictingAliases(refVal_setConflictingAliases);
        }
    }
    return ok;
}

void CreateUserConflictResponse_errorsItems_meta::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Conflicting_aliasesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conflicting_aliases")), m_Conflicting_aliases));
    }
}

bool CreateUserConflictResponse_errorsItems_meta::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("conflicting_aliases"))))
    {
        std::shared_ptr<Object> refVal_setConflictingAliases;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conflicting_aliases"))), refVal_setConflictingAliases );
        setConflictingAliases(refVal_setConflictingAliases);
    }
    return ok;
}

std::shared_ptr<Object> CreateUserConflictResponse_errorsItems_meta::getConflictingAliases() const
{
    return m_Conflicting_aliases;
}

void CreateUserConflictResponse_errorsItems_meta::setConflictingAliases(const std::shared_ptr<Object>& value)
{
    m_Conflicting_aliases = value;
    m_Conflicting_aliasesIsSet = true;
}

bool CreateUserConflictResponse_errorsItems_meta::conflictingAliasesIsSet() const
{
    return m_Conflicting_aliasesIsSet;
}

void CreateUserConflictResponse_errorsItems_meta::unsetConflicting_aliases()
{
    m_Conflicting_aliasesIsSet = false;
}
}
}
}
}


