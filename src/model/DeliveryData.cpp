/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/DeliveryData.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



DeliveryData::DeliveryData()
{
    m_Successful = 0;
    m_SuccessfulIsSet = false;
    m_Failed = 0;
    m_FailedIsSet = false;
    m_Errored = 0;
    m_ErroredIsSet = false;
    m_Converted = 0;
    m_ConvertedIsSet = false;
    m_Received = 0;
    m_ReceivedIsSet = false;
}

DeliveryData::~DeliveryData()
{
}

void DeliveryData::validate()
{
    // TODO: implement validation
}

web::json::value DeliveryData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SuccessfulIsSet)
    {
        val[utility::conversions::to_string_t(U("successful"))] = ModelBase::toJson(m_Successful);
    }
    if(m_FailedIsSet)
    {
        val[utility::conversions::to_string_t(U("failed"))] = ModelBase::toJson(m_Failed);
    }
    if(m_ErroredIsSet)
    {
        val[utility::conversions::to_string_t(U("errored"))] = ModelBase::toJson(m_Errored);
    }
    if(m_ConvertedIsSet)
    {
        val[utility::conversions::to_string_t(U("converted"))] = ModelBase::toJson(m_Converted);
    }
    if(m_ReceivedIsSet)
    {
        val[utility::conversions::to_string_t(U("received"))] = ModelBase::toJson(m_Received);
    }

    return val;
}

bool DeliveryData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("successful"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("successful")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSuccessful;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuccessful);
            setSuccessful(refVal_setSuccessful);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("failed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("failed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFailed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFailed);
            setFailed(refVal_setFailed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errored"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errored")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setErrored;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrored);
            setErrored(refVal_setErrored);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("converted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("converted")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setConverted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConverted);
            setConverted(refVal_setConverted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("received"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("received")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setReceived;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReceived);
            setReceived(refVal_setReceived);
        }
    }
    return ok;
}

void DeliveryData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SuccessfulIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("successful")), m_Successful));
    }
    if(m_FailedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("failed")), m_Failed));
    }
    if(m_ErroredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errored")), m_Errored));
    }
    if(m_ConvertedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("converted")), m_Converted));
    }
    if(m_ReceivedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("received")), m_Received));
    }
}

bool DeliveryData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("successful"))))
    {
        int32_t refVal_setSuccessful;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("successful"))), refVal_setSuccessful );
        setSuccessful(refVal_setSuccessful);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("failed"))))
    {
        int32_t refVal_setFailed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("failed"))), refVal_setFailed );
        setFailed(refVal_setFailed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errored"))))
    {
        int32_t refVal_setErrored;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errored"))), refVal_setErrored );
        setErrored(refVal_setErrored);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("converted"))))
    {
        int32_t refVal_setConverted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("converted"))), refVal_setConverted );
        setConverted(refVal_setConverted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("received"))))
    {
        int32_t refVal_setReceived;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("received"))), refVal_setReceived );
        setReceived(refVal_setReceived);
    }
    return ok;
}

int32_t DeliveryData::getSuccessful() const
{
    return m_Successful;
}

void DeliveryData::setSuccessful(int32_t value)
{
    m_Successful = value;
    m_SuccessfulIsSet = true;
}

bool DeliveryData::successfulIsSet() const
{
    return m_SuccessfulIsSet;
}

void DeliveryData::unsetSuccessful()
{
    m_SuccessfulIsSet = false;
}
int32_t DeliveryData::getFailed() const
{
    return m_Failed;
}

void DeliveryData::setFailed(int32_t value)
{
    m_Failed = value;
    m_FailedIsSet = true;
}

bool DeliveryData::failedIsSet() const
{
    return m_FailedIsSet;
}

void DeliveryData::unsetFailed()
{
    m_FailedIsSet = false;
}
int32_t DeliveryData::getErrored() const
{
    return m_Errored;
}

void DeliveryData::setErrored(int32_t value)
{
    m_Errored = value;
    m_ErroredIsSet = true;
}

bool DeliveryData::erroredIsSet() const
{
    return m_ErroredIsSet;
}

void DeliveryData::unsetErrored()
{
    m_ErroredIsSet = false;
}
int32_t DeliveryData::getConverted() const
{
    return m_Converted;
}

void DeliveryData::setConverted(int32_t value)
{
    m_Converted = value;
    m_ConvertedIsSet = true;
}

bool DeliveryData::convertedIsSet() const
{
    return m_ConvertedIsSet;
}

void DeliveryData::unsetConverted()
{
    m_ConvertedIsSet = false;
}
int32_t DeliveryData::getReceived() const
{
    return m_Received;
}

void DeliveryData::setReceived(int32_t value)
{
    m_Received = value;
    m_ReceivedIsSet = true;
}

bool DeliveryData::receivedIsSet() const
{
    return m_ReceivedIsSet;
}

void DeliveryData::unsetReceived()
{
    m_ReceivedIsSet = false;
}
}
}
}
}


