/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/Filter.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



Filter::Filter()
{
    m_Field = utility::conversions::to_string_t("");
    m_FieldIsSet = false;
    m_Key = utility::conversions::to_string_t("");
    m_KeyIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
    m_Relation = utility::conversions::to_string_t("");
    m_RelationIsSet = false;
}

Filter::~Filter()
{
}

void Filter::validate()
{
    // TODO: implement validation
}

web::json::value Filter::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FieldIsSet)
    {
        val[utility::conversions::to_string_t(U("field"))] = ModelBase::toJson(m_Field);
    }
    if(m_KeyIsSet)
    {
        val[utility::conversions::to_string_t(U("key"))] = ModelBase::toJson(m_Key);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_RelationIsSet)
    {
        val[utility::conversions::to_string_t(U("relation"))] = ModelBase::toJson(m_Relation);
    }

    return val;
}

bool Filter::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("field"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("field")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setField;
            ok &= ModelBase::fromJson(fieldValue, refVal_setField);
            setField(refVal_setField);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKey);
            setKey(refVal_setKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("relation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("relation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRelation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRelation);
            setRelation(refVal_setRelation);
        }
    }
    return ok;
}

void Filter::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("field")), m_Field));
    }
    if(m_KeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("key")), m_Key));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_RelationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("relation")), m_Relation));
    }
}

bool Filter::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("field"))))
    {
        utility::string_t refVal_setField;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("field"))), refVal_setField );
        setField(refVal_setField);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("key"))))
    {
        utility::string_t refVal_setKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("key"))), refVal_setKey );
        setKey(refVal_setKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("relation"))))
    {
        utility::string_t refVal_setRelation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("relation"))), refVal_setRelation );
        setRelation(refVal_setRelation);
    }
    return ok;
}

utility::string_t Filter::getField() const
{
    return m_Field;
}

void Filter::setField(const utility::string_t& value)
{
    m_Field = value;
    m_FieldIsSet = true;
}

bool Filter::fieldIsSet() const
{
    return m_FieldIsSet;
}

void Filter::unsetField()
{
    m_FieldIsSet = false;
}
utility::string_t Filter::getKey() const
{
    return m_Key;
}

void Filter::setKey(const utility::string_t& value)
{
    m_Key = value;
    m_KeyIsSet = true;
}

bool Filter::keyIsSet() const
{
    return m_KeyIsSet;
}

void Filter::unsetKey()
{
    m_KeyIsSet = false;
}
utility::string_t Filter::getValue() const
{
    return m_Value;
}

void Filter::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool Filter::valueIsSet() const
{
    return m_ValueIsSet;
}

void Filter::unsetValue()
{
    m_ValueIsSet = false;
}
utility::string_t Filter::getRelation() const
{
    return m_Relation;
}

void Filter::setRelation(const utility::string_t& value)
{
    m_Relation = value;
    m_RelationIsSet = true;
}

bool Filter::relationIsSet() const
{
    return m_RelationIsSet;
}

void Filter::unsetRelation()
{
    m_RelationIsSet = false;
}
}
}
}
}


