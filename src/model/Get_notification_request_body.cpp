/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/Get_notification_request_body.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



Get_notification_request_body::Get_notification_request_body()
{
    m_Events = utility::conversions::to_string_t("");
    m_EventsIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_App_id = utility::conversions::to_string_t("");
    m_App_idIsSet = false;
}

Get_notification_request_body::~Get_notification_request_body()
{
}

void Get_notification_request_body::validate()
{
    // TODO: implement validation
}

web::json::value Get_notification_request_body::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EventsIsSet)
    {
        val[utility::conversions::to_string_t(U("events"))] = ModelBase::toJson(m_Events);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_Email);
    }
    if(m_App_idIsSet)
    {
        val[utility::conversions::to_string_t(U("app_id"))] = ModelBase::toJson(m_App_id);
    }

    return val;
}

bool Get_notification_request_body::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("events"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("events")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEvents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvents);
            setEvents(refVal_setEvents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmail);
            setEmail(refVal_setEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAppId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAppId);
            setAppId(refVal_setAppId);
        }
    }
    return ok;
}

void Get_notification_request_body::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EventsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("events")), m_Events));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_Email));
    }
    if(m_App_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_id")), m_App_id));
    }
}

bool Get_notification_request_body::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("events"))))
    {
        utility::string_t refVal_setEvents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("events"))), refVal_setEvents );
        setEvents(refVal_setEvents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_setEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_setEmail );
        setEmail(refVal_setEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_id"))))
    {
        utility::string_t refVal_setAppId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_id"))), refVal_setAppId );
        setAppId(refVal_setAppId);
    }
    return ok;
}

utility::string_t Get_notification_request_body::getEvents() const
{
    return m_Events;
}

void Get_notification_request_body::setEvents(const utility::string_t& value)
{
    m_Events = value;
    m_EventsIsSet = true;
}

bool Get_notification_request_body::eventsIsSet() const
{
    return m_EventsIsSet;
}

void Get_notification_request_body::unsetEvents()
{
    m_EventsIsSet = false;
}
utility::string_t Get_notification_request_body::getEmail() const
{
    return m_Email;
}

void Get_notification_request_body::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool Get_notification_request_body::emailIsSet() const
{
    return m_EmailIsSet;
}

void Get_notification_request_body::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t Get_notification_request_body::getAppId() const
{
    return m_App_id;
}

void Get_notification_request_body::setAppId(const utility::string_t& value)
{
    m_App_id = value;
    m_App_idIsSet = true;
}

bool Get_notification_request_body::appIdIsSet() const
{
    return m_App_idIsSet;
}

void Get_notification_request_body::unsetApp_id()
{
    m_App_idIsSet = false;
}
}
}
}
}


