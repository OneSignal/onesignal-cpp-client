/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/Player.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



Player::Player()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Invalid_identifier = false;
    m_Invalid_identifierIsSet = false;
    m_App_id = utility::conversions::to_string_t("");
    m_App_idIsSet = false;
    m_Device_type = 0;
    m_Device_typeIsSet = false;
    m_External_user_id = utility::conversions::to_string_t("");
    m_External_user_idIsSet = false;
    m_External_user_id_auth_hash = utility::conversions::to_string_t("");
    m_External_user_id_auth_hashIsSet = false;
    m_Email_auth_hash = utility::conversions::to_string_t("");
    m_Email_auth_hashIsSet = false;
    m_Identifier = utility::conversions::to_string_t("");
    m_IdentifierIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_Timezone = 0;
    m_TimezoneIsSet = false;
    m_Game_version = utility::conversions::to_string_t("");
    m_Game_versionIsSet = false;
    m_Device_model = utility::conversions::to_string_t("");
    m_Device_modelIsSet = false;
    m_Device_os = utility::conversions::to_string_t("");
    m_Device_osIsSet = false;
    m_Ad_id = utility::conversions::to_string_t("");
    m_Ad_idIsSet = false;
    m_Sdk = utility::conversions::to_string_t("");
    m_SdkIsSet = false;
    m_Session_count = 0;
    m_Session_countIsSet = false;
    m_TagsIsSet = false;
    m_Amount_spent = 0.0;
    m_Amount_spentIsSet = false;
    m_Created_at = 0L;
    m_Created_atIsSet = false;
    m_Playtime = 0L;
    m_PlaytimeIsSet = false;
    m_Badge_count = 0;
    m_Badge_countIsSet = false;
    m_Last_active = 0;
    m_Last_activeIsSet = false;
    m_Notification_types = 0;
    m_Notification_typesIsSet = false;
    m_Test_type = 0;
    m_Test_typeIsSet = false;
    m_long = 0.0;
    m_longIsSet = false;
    m_Lat = 0.0;
    m_LatIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
}

Player::~Player()
{
}

void Player::validate()
{
    // TODO: implement validation
}

web::json::value Player::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Invalid_identifierIsSet)
    {
        val[utility::conversions::to_string_t(U("invalid_identifier"))] = ModelBase::toJson(m_Invalid_identifier);
    }
    if(m_App_idIsSet)
    {
        val[utility::conversions::to_string_t(U("app_id"))] = ModelBase::toJson(m_App_id);
    }
    if(m_Device_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("device_type"))] = ModelBase::toJson(m_Device_type);
    }
    if(m_External_user_idIsSet)
    {
        val[utility::conversions::to_string_t(U("external_user_id"))] = ModelBase::toJson(m_External_user_id);
    }
    if(m_External_user_id_auth_hashIsSet)
    {
        val[utility::conversions::to_string_t(U("external_user_id_auth_hash"))] = ModelBase::toJson(m_External_user_id_auth_hash);
    }
    if(m_Email_auth_hashIsSet)
    {
        val[utility::conversions::to_string_t(U("email_auth_hash"))] = ModelBase::toJson(m_Email_auth_hash);
    }
    if(m_IdentifierIsSet)
    {
        val[utility::conversions::to_string_t(U("identifier"))] = ModelBase::toJson(m_Identifier);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_TimezoneIsSet)
    {
        val[utility::conversions::to_string_t(U("timezone"))] = ModelBase::toJson(m_Timezone);
    }
    if(m_Game_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("game_version"))] = ModelBase::toJson(m_Game_version);
    }
    if(m_Device_modelIsSet)
    {
        val[utility::conversions::to_string_t(U("device_model"))] = ModelBase::toJson(m_Device_model);
    }
    if(m_Device_osIsSet)
    {
        val[utility::conversions::to_string_t(U("device_os"))] = ModelBase::toJson(m_Device_os);
    }
    if(m_Ad_idIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_id"))] = ModelBase::toJson(m_Ad_id);
    }
    if(m_SdkIsSet)
    {
        val[utility::conversions::to_string_t(U("sdk"))] = ModelBase::toJson(m_Sdk);
    }
    if(m_Session_countIsSet)
    {
        val[utility::conversions::to_string_t(U("session_count"))] = ModelBase::toJson(m_Session_count);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_Tags);
    }
    if(m_Amount_spentIsSet)
    {
        val[utility::conversions::to_string_t(U("amount_spent"))] = ModelBase::toJson(m_Amount_spent);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_PlaytimeIsSet)
    {
        val[utility::conversions::to_string_t(U("playtime"))] = ModelBase::toJson(m_Playtime);
    }
    if(m_Badge_countIsSet)
    {
        val[utility::conversions::to_string_t(U("badge_count"))] = ModelBase::toJson(m_Badge_count);
    }
    if(m_Last_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("last_active"))] = ModelBase::toJson(m_Last_active);
    }
    if(m_Notification_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("notification_types"))] = ModelBase::toJson(m_Notification_types);
    }
    if(m_Test_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("test_type"))] = ModelBase::toJson(m_Test_type);
    }
    if(m_longIsSet)
    {
        val[utility::conversions::to_string_t(U("long"))] = ModelBase::toJson(m_long);
    }
    if(m_LatIsSet)
    {
        val[utility::conversions::to_string_t(U("lat"))] = ModelBase::toJson(m_Lat);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }

    return val;
}

bool Player::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invalid_identifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invalid_identifier")));
        if(!fieldValue.is_null())
        {
            bool refVal_setInvalidIdentifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInvalidIdentifier);
            setInvalidIdentifier(refVal_setInvalidIdentifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAppId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAppId);
            setAppId(refVal_setAppId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("device_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("device_type")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDeviceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceType);
            setDeviceType(refVal_setDeviceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("external_user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("external_user_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExternalUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExternalUserId);
            setExternalUserId(refVal_setExternalUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("external_user_id_auth_hash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("external_user_id_auth_hash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExternalUserIdAuthHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExternalUserIdAuthHash);
            setExternalUserIdAuthHash(refVal_setExternalUserIdAuthHash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_auth_hash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_auth_hash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailAuthHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailAuthHash);
            setEmailAuthHash(refVal_setEmailAuthHash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIdentifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIdentifier);
            setIdentifier(refVal_setIdentifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timezone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timezone")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTimezone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimezone);
            setTimezone(refVal_setTimezone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("game_version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("game_version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGameVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGameVersion);
            setGameVersion(refVal_setGameVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("device_model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("device_model")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeviceModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceModel);
            setDeviceModel(refVal_setDeviceModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("device_os"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("device_os")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeviceOs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceOs);
            setDeviceOs(refVal_setDeviceOs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdId);
            setAdId(refVal_setAdId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sdk"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sdk")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSdk;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSdk);
            setSdk(refVal_setSdk);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSessionCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionCount);
            setSessionCount(refVal_setSessionCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount_spent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount_spent")));
        if(!fieldValue.is_null())
        {
            double refVal_setAmountSpent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountSpent);
            setAmountSpent(refVal_setAmountSpent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("playtime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("playtime")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setPlaytime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlaytime);
            setPlaytime(refVal_setPlaytime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("badge_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("badge_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBadgeCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBadgeCount);
            setBadgeCount(refVal_setBadgeCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_active")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLastActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastActive);
            setLastActive(refVal_setLastActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("notification_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("notification_types")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNotificationTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNotificationTypes);
            setNotificationTypes(refVal_setNotificationTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("test_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("test_type")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTestType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTestType);
            setTestType(refVal_setTestType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("long"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("long")));
        if(!fieldValue.is_null())
        {
            double refVal_setLong;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLong);
            setLong(refVal_setLong);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lat"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lat")));
        if(!fieldValue.is_null())
        {
            double refVal_setLat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLat);
            setLat(refVal_setLat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountry);
            setCountry(refVal_setCountry);
        }
    }
    return ok;
}

void Player::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Invalid_identifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invalid_identifier")), m_Invalid_identifier));
    }
    if(m_App_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_id")), m_App_id));
    }
    if(m_Device_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("device_type")), m_Device_type));
    }
    if(m_External_user_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("external_user_id")), m_External_user_id));
    }
    if(m_External_user_id_auth_hashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("external_user_id_auth_hash")), m_External_user_id_auth_hash));
    }
    if(m_Email_auth_hashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_auth_hash")), m_Email_auth_hash));
    }
    if(m_IdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifier")), m_Identifier));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_TimezoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timezone")), m_Timezone));
    }
    if(m_Game_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("game_version")), m_Game_version));
    }
    if(m_Device_modelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("device_model")), m_Device_model));
    }
    if(m_Device_osIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("device_os")), m_Device_os));
    }
    if(m_Ad_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_id")), m_Ad_id));
    }
    if(m_SdkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sdk")), m_Sdk));
    }
    if(m_Session_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_count")), m_Session_count));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
    }
    if(m_Amount_spentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount_spent")), m_Amount_spent));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_PlaytimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("playtime")), m_Playtime));
    }
    if(m_Badge_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("badge_count")), m_Badge_count));
    }
    if(m_Last_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_active")), m_Last_active));
    }
    if(m_Notification_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("notification_types")), m_Notification_types));
    }
    if(m_Test_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("test_type")), m_Test_type));
    }
    if(m_longIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("long")), m_long));
    }
    if(m_LatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lat")), m_Lat));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
}

bool Player::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invalid_identifier"))))
    {
        bool refVal_setInvalidIdentifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invalid_identifier"))), refVal_setInvalidIdentifier );
        setInvalidIdentifier(refVal_setInvalidIdentifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_id"))))
    {
        utility::string_t refVal_setAppId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_id"))), refVal_setAppId );
        setAppId(refVal_setAppId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("device_type"))))
    {
        int32_t refVal_setDeviceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("device_type"))), refVal_setDeviceType );
        setDeviceType(refVal_setDeviceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("external_user_id"))))
    {
        utility::string_t refVal_setExternalUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("external_user_id"))), refVal_setExternalUserId );
        setExternalUserId(refVal_setExternalUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("external_user_id_auth_hash"))))
    {
        utility::string_t refVal_setExternalUserIdAuthHash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("external_user_id_auth_hash"))), refVal_setExternalUserIdAuthHash );
        setExternalUserIdAuthHash(refVal_setExternalUserIdAuthHash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_auth_hash"))))
    {
        utility::string_t refVal_setEmailAuthHash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_auth_hash"))), refVal_setEmailAuthHash );
        setEmailAuthHash(refVal_setEmailAuthHash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identifier"))))
    {
        utility::string_t refVal_setIdentifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifier"))), refVal_setIdentifier );
        setIdentifier(refVal_setIdentifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        utility::string_t refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timezone"))))
    {
        int32_t refVal_setTimezone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timezone"))), refVal_setTimezone );
        setTimezone(refVal_setTimezone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("game_version"))))
    {
        utility::string_t refVal_setGameVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("game_version"))), refVal_setGameVersion );
        setGameVersion(refVal_setGameVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("device_model"))))
    {
        utility::string_t refVal_setDeviceModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("device_model"))), refVal_setDeviceModel );
        setDeviceModel(refVal_setDeviceModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("device_os"))))
    {
        utility::string_t refVal_setDeviceOs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("device_os"))), refVal_setDeviceOs );
        setDeviceOs(refVal_setDeviceOs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_id"))))
    {
        utility::string_t refVal_setAdId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_id"))), refVal_setAdId );
        setAdId(refVal_setAdId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sdk"))))
    {
        utility::string_t refVal_setSdk;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sdk"))), refVal_setSdk );
        setSdk(refVal_setSdk);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_count"))))
    {
        int32_t refVal_setSessionCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_count"))), refVal_setSessionCount );
        setSessionCount(refVal_setSessionCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::shared_ptr<Object> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount_spent"))))
    {
        double refVal_setAmountSpent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount_spent"))), refVal_setAmountSpent );
        setAmountSpent(refVal_setAmountSpent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        int64_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("playtime"))))
    {
        int64_t refVal_setPlaytime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("playtime"))), refVal_setPlaytime );
        setPlaytime(refVal_setPlaytime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("badge_count"))))
    {
        int32_t refVal_setBadgeCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("badge_count"))), refVal_setBadgeCount );
        setBadgeCount(refVal_setBadgeCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_active"))))
    {
        int32_t refVal_setLastActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_active"))), refVal_setLastActive );
        setLastActive(refVal_setLastActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("notification_types"))))
    {
        int32_t refVal_setNotificationTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("notification_types"))), refVal_setNotificationTypes );
        setNotificationTypes(refVal_setNotificationTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("test_type"))))
    {
        int32_t refVal_setTestType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("test_type"))), refVal_setTestType );
        setTestType(refVal_setTestType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("long"))))
    {
        double refVal_setLong;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("long"))), refVal_setLong );
        setLong(refVal_setLong);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lat"))))
    {
        double refVal_setLat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lat"))), refVal_setLat );
        setLat(refVal_setLat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        utility::string_t refVal_setCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_setCountry );
        setCountry(refVal_setCountry);
    }
    return ok;
}

utility::string_t Player::getId() const
{
    return m_Id;
}

void Player::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Player::idIsSet() const
{
    return m_IdIsSet;
}

void Player::unsetId()
{
    m_IdIsSet = false;
}
bool Player::isInvalidIdentifier() const
{
    return m_Invalid_identifier;
}

void Player::setInvalidIdentifier(bool value)
{
    m_Invalid_identifier = value;
    m_Invalid_identifierIsSet = true;
}

bool Player::invalidIdentifierIsSet() const
{
    return m_Invalid_identifierIsSet;
}

void Player::unsetInvalid_identifier()
{
    m_Invalid_identifierIsSet = false;
}
utility::string_t Player::getAppId() const
{
    return m_App_id;
}

void Player::setAppId(const utility::string_t& value)
{
    m_App_id = value;
    m_App_idIsSet = true;
}

bool Player::appIdIsSet() const
{
    return m_App_idIsSet;
}

void Player::unsetApp_id()
{
    m_App_idIsSet = false;
}
int32_t Player::getDeviceType() const
{
    return m_Device_type;
}

void Player::setDeviceType(int32_t value)
{
    m_Device_type = value;
    m_Device_typeIsSet = true;
}

bool Player::deviceTypeIsSet() const
{
    return m_Device_typeIsSet;
}

void Player::unsetDevice_type()
{
    m_Device_typeIsSet = false;
}
utility::string_t Player::getExternalUserId() const
{
    return m_External_user_id;
}

void Player::setExternalUserId(const utility::string_t& value)
{
    m_External_user_id = value;
    m_External_user_idIsSet = true;
}

bool Player::externalUserIdIsSet() const
{
    return m_External_user_idIsSet;
}

void Player::unsetExternal_user_id()
{
    m_External_user_idIsSet = false;
}
utility::string_t Player::getExternalUserIdAuthHash() const
{
    return m_External_user_id_auth_hash;
}

void Player::setExternalUserIdAuthHash(const utility::string_t& value)
{
    m_External_user_id_auth_hash = value;
    m_External_user_id_auth_hashIsSet = true;
}

bool Player::externalUserIdAuthHashIsSet() const
{
    return m_External_user_id_auth_hashIsSet;
}

void Player::unsetExternal_user_id_auth_hash()
{
    m_External_user_id_auth_hashIsSet = false;
}
utility::string_t Player::getEmailAuthHash() const
{
    return m_Email_auth_hash;
}

void Player::setEmailAuthHash(const utility::string_t& value)
{
    m_Email_auth_hash = value;
    m_Email_auth_hashIsSet = true;
}

bool Player::emailAuthHashIsSet() const
{
    return m_Email_auth_hashIsSet;
}

void Player::unsetEmail_auth_hash()
{
    m_Email_auth_hashIsSet = false;
}
utility::string_t Player::getIdentifier() const
{
    return m_Identifier;
}

void Player::setIdentifier(const utility::string_t& value)
{
    m_Identifier = value;
    m_IdentifierIsSet = true;
}

bool Player::identifierIsSet() const
{
    return m_IdentifierIsSet;
}

void Player::unsetIdentifier()
{
    m_IdentifierIsSet = false;
}
utility::string_t Player::getLanguage() const
{
    return m_Language;
}

void Player::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool Player::languageIsSet() const
{
    return m_LanguageIsSet;
}

void Player::unsetLanguage()
{
    m_LanguageIsSet = false;
}
int32_t Player::getTimezone() const
{
    return m_Timezone;
}

void Player::setTimezone(int32_t value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}

bool Player::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}

void Player::unsetTimezone()
{
    m_TimezoneIsSet = false;
}
utility::string_t Player::getGameVersion() const
{
    return m_Game_version;
}

void Player::setGameVersion(const utility::string_t& value)
{
    m_Game_version = value;
    m_Game_versionIsSet = true;
}

bool Player::gameVersionIsSet() const
{
    return m_Game_versionIsSet;
}

void Player::unsetGame_version()
{
    m_Game_versionIsSet = false;
}
utility::string_t Player::getDeviceModel() const
{
    return m_Device_model;
}

void Player::setDeviceModel(const utility::string_t& value)
{
    m_Device_model = value;
    m_Device_modelIsSet = true;
}

bool Player::deviceModelIsSet() const
{
    return m_Device_modelIsSet;
}

void Player::unsetDevice_model()
{
    m_Device_modelIsSet = false;
}
utility::string_t Player::getDeviceOs() const
{
    return m_Device_os;
}

void Player::setDeviceOs(const utility::string_t& value)
{
    m_Device_os = value;
    m_Device_osIsSet = true;
}

bool Player::deviceOsIsSet() const
{
    return m_Device_osIsSet;
}

void Player::unsetDevice_os()
{
    m_Device_osIsSet = false;
}
utility::string_t Player::getAdId() const
{
    return m_Ad_id;
}

void Player::setAdId(const utility::string_t& value)
{
    m_Ad_id = value;
    m_Ad_idIsSet = true;
}

bool Player::adIdIsSet() const
{
    return m_Ad_idIsSet;
}

void Player::unsetAd_id()
{
    m_Ad_idIsSet = false;
}
utility::string_t Player::getSdk() const
{
    return m_Sdk;
}

void Player::setSdk(const utility::string_t& value)
{
    m_Sdk = value;
    m_SdkIsSet = true;
}

bool Player::sdkIsSet() const
{
    return m_SdkIsSet;
}

void Player::unsetSdk()
{
    m_SdkIsSet = false;
}
int32_t Player::getSessionCount() const
{
    return m_Session_count;
}

void Player::setSessionCount(int32_t value)
{
    m_Session_count = value;
    m_Session_countIsSet = true;
}

bool Player::sessionCountIsSet() const
{
    return m_Session_countIsSet;
}

void Player::unsetSession_count()
{
    m_Session_countIsSet = false;
}
std::shared_ptr<Object> Player::getTags() const
{
    return m_Tags;
}

void Player::setTags(const std::shared_ptr<Object>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool Player::tagsIsSet() const
{
    return m_TagsIsSet;
}

void Player::unsetTags()
{
    m_TagsIsSet = false;
}
double Player::getAmountSpent() const
{
    return m_Amount_spent;
}

void Player::setAmountSpent(double value)
{
    m_Amount_spent = value;
    m_Amount_spentIsSet = true;
}

bool Player::amountSpentIsSet() const
{
    return m_Amount_spentIsSet;
}

void Player::unsetAmount_spent()
{
    m_Amount_spentIsSet = false;
}
int64_t Player::getCreatedAt() const
{
    return m_Created_at;
}

void Player::setCreatedAt(int64_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool Player::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void Player::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
int64_t Player::getPlaytime() const
{
    return m_Playtime;
}

void Player::setPlaytime(int64_t value)
{
    m_Playtime = value;
    m_PlaytimeIsSet = true;
}

bool Player::playtimeIsSet() const
{
    return m_PlaytimeIsSet;
}

void Player::unsetPlaytime()
{
    m_PlaytimeIsSet = false;
}
int32_t Player::getBadgeCount() const
{
    return m_Badge_count;
}

void Player::setBadgeCount(int32_t value)
{
    m_Badge_count = value;
    m_Badge_countIsSet = true;
}

bool Player::badgeCountIsSet() const
{
    return m_Badge_countIsSet;
}

void Player::unsetBadge_count()
{
    m_Badge_countIsSet = false;
}
int32_t Player::getLastActive() const
{
    return m_Last_active;
}

void Player::setLastActive(int32_t value)
{
    m_Last_active = value;
    m_Last_activeIsSet = true;
}

bool Player::lastActiveIsSet() const
{
    return m_Last_activeIsSet;
}

void Player::unsetLast_active()
{
    m_Last_activeIsSet = false;
}
int32_t Player::getNotificationTypes() const
{
    return m_Notification_types;
}

void Player::setNotificationTypes(int32_t value)
{
    m_Notification_types = value;
    m_Notification_typesIsSet = true;
}

bool Player::notificationTypesIsSet() const
{
    return m_Notification_typesIsSet;
}

void Player::unsetNotification_types()
{
    m_Notification_typesIsSet = false;
}
int32_t Player::getTestType() const
{
    return m_Test_type;
}

void Player::setTestType(int32_t value)
{
    m_Test_type = value;
    m_Test_typeIsSet = true;
}

bool Player::testTypeIsSet() const
{
    return m_Test_typeIsSet;
}

void Player::unsetTest_type()
{
    m_Test_typeIsSet = false;
}
double Player::getLong() const
{
    return m_long;
}

void Player::setLong(double value)
{
    m_long = value;
    m_longIsSet = true;
}

bool Player::r_longIsSet() const
{
    return m_longIsSet;
}

void Player::unsetlong()
{
    m_longIsSet = false;
}
double Player::getLat() const
{
    return m_Lat;
}

void Player::setLat(double value)
{
    m_Lat = value;
    m_LatIsSet = true;
}

bool Player::latIsSet() const
{
    return m_LatIsSet;
}

void Player::unsetLat()
{
    m_LatIsSet = false;
}
utility::string_t Player::getCountry() const
{
    return m_Country;
}

void Player::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool Player::countryIsSet() const
{
    return m_CountryIsSet;
}

void Player::unsetCountry()
{
    m_CountryIsSet = false;
}
}
}
}
}


