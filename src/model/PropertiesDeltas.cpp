/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/PropertiesDeltas.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



PropertiesDeltas::PropertiesDeltas()
{
    m_Session_time = 0.0;
    m_Session_timeIsSet = false;
    m_Session_count = 0.0;
    m_Session_countIsSet = false;
    m_PurchasesIsSet = false;
}

PropertiesDeltas::~PropertiesDeltas()
{
}

void PropertiesDeltas::validate()
{
    // TODO: implement validation
}

web::json::value PropertiesDeltas::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Session_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("session_time"))] = ModelBase::toJson(m_Session_time);
    }
    if(m_Session_countIsSet)
    {
        val[utility::conversions::to_string_t(U("session_count"))] = ModelBase::toJson(m_Session_count);
    }
    if(m_PurchasesIsSet)
    {
        val[utility::conversions::to_string_t(U("purchases"))] = ModelBase::toJson(m_Purchases);
    }

    return val;
}

bool PropertiesDeltas::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("session_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_time")));
        if(!fieldValue.is_null())
        {
            double refVal_setSessionTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionTime);
            setSessionTime(refVal_setSessionTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_count")));
        if(!fieldValue.is_null())
        {
            double refVal_setSessionCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionCount);
            setSessionCount(refVal_setSessionCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("purchases"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("purchases")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Purchase>> refVal_setPurchases;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPurchases);
            setPurchases(refVal_setPurchases);
        }
    }
    return ok;
}

void PropertiesDeltas::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Session_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_time")), m_Session_time));
    }
    if(m_Session_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_count")), m_Session_count));
    }
    if(m_PurchasesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("purchases")), m_Purchases));
    }
}

bool PropertiesDeltas::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("session_time"))))
    {
        double refVal_setSessionTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_time"))), refVal_setSessionTime );
        setSessionTime(refVal_setSessionTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_count"))))
    {
        double refVal_setSessionCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_count"))), refVal_setSessionCount );
        setSessionCount(refVal_setSessionCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("purchases"))))
    {
        std::vector<std::shared_ptr<Purchase>> refVal_setPurchases;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("purchases"))), refVal_setPurchases );
        setPurchases(refVal_setPurchases);
    }
    return ok;
}

double PropertiesDeltas::getSessionTime() const
{
    return m_Session_time;
}

void PropertiesDeltas::setSessionTime(double value)
{
    m_Session_time = value;
    m_Session_timeIsSet = true;
}

bool PropertiesDeltas::sessionTimeIsSet() const
{
    return m_Session_timeIsSet;
}

void PropertiesDeltas::unsetSession_time()
{
    m_Session_timeIsSet = false;
}
double PropertiesDeltas::getSessionCount() const
{
    return m_Session_count;
}

void PropertiesDeltas::setSessionCount(double value)
{
    m_Session_count = value;
    m_Session_countIsSet = true;
}

bool PropertiesDeltas::sessionCountIsSet() const
{
    return m_Session_countIsSet;
}

void PropertiesDeltas::unsetSession_count()
{
    m_Session_countIsSet = false;
}
std::vector<std::shared_ptr<Purchase>>& PropertiesDeltas::getPurchases()
{
    return m_Purchases;
}

void PropertiesDeltas::setPurchases(const std::vector<std::shared_ptr<Purchase>>& value)
{
    m_Purchases = value;
    m_PurchasesIsSet = true;
}

bool PropertiesDeltas::purchasesIsSet() const
{
    return m_PurchasesIsSet;
}

void PropertiesDeltas::unsetPurchases()
{
    m_PurchasesIsSet = false;
}
}
}
}
}


