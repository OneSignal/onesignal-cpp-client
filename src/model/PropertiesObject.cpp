/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/PropertiesObject.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



PropertiesObject::PropertiesObject()
{
    m_TagsIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_Timezone_id = utility::conversions::to_string_t("");
    m_Timezone_idIsSet = false;
    m_Lat = 0.0;
    m_LatIsSet = false;
    m_long = 0.0;
    m_longIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_First_active = 0.0;
    m_First_activeIsSet = false;
    m_Last_active = 0.0;
    m_Last_activeIsSet = false;
    m_Amount_spent = 0.0;
    m_Amount_spentIsSet = false;
    m_PurchasesIsSet = false;
    m_Ip = utility::conversions::to_string_t("");
    m_IpIsSet = false;
}

PropertiesObject::~PropertiesObject()
{
}

void PropertiesObject::validate()
{
    // TODO: implement validation
}

web::json::value PropertiesObject::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_Tags);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_Timezone_idIsSet)
    {
        val[utility::conversions::to_string_t(U("timezone_id"))] = ModelBase::toJson(m_Timezone_id);
    }
    if(m_LatIsSet)
    {
        val[utility::conversions::to_string_t(U("lat"))] = ModelBase::toJson(m_Lat);
    }
    if(m_longIsSet)
    {
        val[utility::conversions::to_string_t(U("long"))] = ModelBase::toJson(m_long);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_First_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("first_active"))] = ModelBase::toJson(m_First_active);
    }
    if(m_Last_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("last_active"))] = ModelBase::toJson(m_Last_active);
    }
    if(m_Amount_spentIsSet)
    {
        val[utility::conversions::to_string_t(U("amount_spent"))] = ModelBase::toJson(m_Amount_spent);
    }
    if(m_PurchasesIsSet)
    {
        val[utility::conversions::to_string_t(U("purchases"))] = ModelBase::toJson(m_Purchases);
    }
    if(m_IpIsSet)
    {
        val[utility::conversions::to_string_t(U("ip"))] = ModelBase::toJson(m_Ip);
    }

    return val;
}

bool PropertiesObject::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timezone_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timezone_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimezoneId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimezoneId);
            setTimezoneId(refVal_setTimezoneId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lat"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lat")));
        if(!fieldValue.is_null())
        {
            double refVal_setLat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLat);
            setLat(refVal_setLat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("long"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("long")));
        if(!fieldValue.is_null())
        {
            double refVal_setLong;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLong);
            setLong(refVal_setLong);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountry);
            setCountry(refVal_setCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("first_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("first_active")));
        if(!fieldValue.is_null())
        {
            double refVal_setFirstActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFirstActive);
            setFirstActive(refVal_setFirstActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_active")));
        if(!fieldValue.is_null())
        {
            double refVal_setLastActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastActive);
            setLastActive(refVal_setLastActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount_spent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount_spent")));
        if(!fieldValue.is_null())
        {
            double refVal_setAmountSpent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountSpent);
            setAmountSpent(refVal_setAmountSpent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("purchases"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("purchases")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Purchase>> refVal_setPurchases;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPurchases);
            setPurchases(refVal_setPurchases);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ip"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ip")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIp);
            setIp(refVal_setIp);
        }
    }
    return ok;
}

void PropertiesObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_Timezone_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timezone_id")), m_Timezone_id));
    }
    if(m_LatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lat")), m_Lat));
    }
    if(m_longIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("long")), m_long));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_First_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("first_active")), m_First_active));
    }
    if(m_Last_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_active")), m_Last_active));
    }
    if(m_Amount_spentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount_spent")), m_Amount_spent));
    }
    if(m_PurchasesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("purchases")), m_Purchases));
    }
    if(m_IpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ip")), m_Ip));
    }
}

bool PropertiesObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        utility::string_t refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timezone_id"))))
    {
        utility::string_t refVal_setTimezoneId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timezone_id"))), refVal_setTimezoneId );
        setTimezoneId(refVal_setTimezoneId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lat"))))
    {
        double refVal_setLat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lat"))), refVal_setLat );
        setLat(refVal_setLat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("long"))))
    {
        double refVal_setLong;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("long"))), refVal_setLong );
        setLong(refVal_setLong);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        utility::string_t refVal_setCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_setCountry );
        setCountry(refVal_setCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("first_active"))))
    {
        double refVal_setFirstActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("first_active"))), refVal_setFirstActive );
        setFirstActive(refVal_setFirstActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_active"))))
    {
        double refVal_setLastActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_active"))), refVal_setLastActive );
        setLastActive(refVal_setLastActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount_spent"))))
    {
        double refVal_setAmountSpent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount_spent"))), refVal_setAmountSpent );
        setAmountSpent(refVal_setAmountSpent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("purchases"))))
    {
        std::vector<std::shared_ptr<Purchase>> refVal_setPurchases;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("purchases"))), refVal_setPurchases );
        setPurchases(refVal_setPurchases);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ip"))))
    {
        utility::string_t refVal_setIp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ip"))), refVal_setIp );
        setIp(refVal_setIp);
    }
    return ok;
}

std::map<utility::string_t, utility::string_t>& PropertiesObject::getTags()
{
    return m_Tags;
}

void PropertiesObject::setTags(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool PropertiesObject::tagsIsSet() const
{
    return m_TagsIsSet;
}

void PropertiesObject::unsetTags()
{
    m_TagsIsSet = false;
}
utility::string_t PropertiesObject::getLanguage() const
{
    return m_Language;
}

void PropertiesObject::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool PropertiesObject::languageIsSet() const
{
    return m_LanguageIsSet;
}

void PropertiesObject::unsetLanguage()
{
    m_LanguageIsSet = false;
}
utility::string_t PropertiesObject::getTimezoneId() const
{
    return m_Timezone_id;
}

void PropertiesObject::setTimezoneId(const utility::string_t& value)
{
    m_Timezone_id = value;
    m_Timezone_idIsSet = true;
}

bool PropertiesObject::timezoneIdIsSet() const
{
    return m_Timezone_idIsSet;
}

void PropertiesObject::unsetTimezone_id()
{
    m_Timezone_idIsSet = false;
}
double PropertiesObject::getLat() const
{
    return m_Lat;
}

void PropertiesObject::setLat(double value)
{
    m_Lat = value;
    m_LatIsSet = true;
}

bool PropertiesObject::latIsSet() const
{
    return m_LatIsSet;
}

void PropertiesObject::unsetLat()
{
    m_LatIsSet = false;
}
double PropertiesObject::getLong() const
{
    return m_long;
}

void PropertiesObject::setLong(double value)
{
    m_long = value;
    m_longIsSet = true;
}

bool PropertiesObject::r_longIsSet() const
{
    return m_longIsSet;
}

void PropertiesObject::unsetlong()
{
    m_longIsSet = false;
}
utility::string_t PropertiesObject::getCountry() const
{
    return m_Country;
}

void PropertiesObject::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool PropertiesObject::countryIsSet() const
{
    return m_CountryIsSet;
}

void PropertiesObject::unsetCountry()
{
    m_CountryIsSet = false;
}
double PropertiesObject::getFirstActive() const
{
    return m_First_active;
}

void PropertiesObject::setFirstActive(double value)
{
    m_First_active = value;
    m_First_activeIsSet = true;
}

bool PropertiesObject::firstActiveIsSet() const
{
    return m_First_activeIsSet;
}

void PropertiesObject::unsetFirst_active()
{
    m_First_activeIsSet = false;
}
double PropertiesObject::getLastActive() const
{
    return m_Last_active;
}

void PropertiesObject::setLastActive(double value)
{
    m_Last_active = value;
    m_Last_activeIsSet = true;
}

bool PropertiesObject::lastActiveIsSet() const
{
    return m_Last_activeIsSet;
}

void PropertiesObject::unsetLast_active()
{
    m_Last_activeIsSet = false;
}
double PropertiesObject::getAmountSpent() const
{
    return m_Amount_spent;
}

void PropertiesObject::setAmountSpent(double value)
{
    m_Amount_spent = value;
    m_Amount_spentIsSet = true;
}

bool PropertiesObject::amountSpentIsSet() const
{
    return m_Amount_spentIsSet;
}

void PropertiesObject::unsetAmount_spent()
{
    m_Amount_spentIsSet = false;
}
std::vector<std::shared_ptr<Purchase>>& PropertiesObject::getPurchases()
{
    return m_Purchases;
}

void PropertiesObject::setPurchases(const std::vector<std::shared_ptr<Purchase>>& value)
{
    m_Purchases = value;
    m_PurchasesIsSet = true;
}

bool PropertiesObject::purchasesIsSet() const
{
    return m_PurchasesIsSet;
}

void PropertiesObject::unsetPurchases()
{
    m_PurchasesIsSet = false;
}
utility::string_t PropertiesObject::getIp() const
{
    return m_Ip;
}

void PropertiesObject::setIp(const utility::string_t& value)
{
    m_Ip = value;
    m_IpIsSet = true;
}

bool PropertiesObject::ipIsSet() const
{
    return m_IpIsSet;
}

void PropertiesObject::unsetIp()
{
    m_IpIsSet = false;
}
}
}
}
}


