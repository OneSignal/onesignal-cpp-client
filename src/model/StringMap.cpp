/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/StringMap.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



StringMap::StringMap()
{
    m_En = utility::conversions::to_string_t("");
    m_EnIsSet = false;
    m_Ar = utility::conversions::to_string_t("");
    m_ArIsSet = false;
    m_Bs = utility::conversions::to_string_t("");
    m_BsIsSet = false;
    m_Bg = utility::conversions::to_string_t("");
    m_BgIsSet = false;
    m_Ca = utility::conversions::to_string_t("");
    m_CaIsSet = false;
    m_Zh_Hans = utility::conversions::to_string_t("");
    m_Zh_HansIsSet = false;
    m_Zh_Hant = utility::conversions::to_string_t("");
    m_Zh_HantIsSet = false;
    m_Zh = utility::conversions::to_string_t("");
    m_ZhIsSet = false;
    m_Hr = utility::conversions::to_string_t("");
    m_HrIsSet = false;
    m_Cs = utility::conversions::to_string_t("");
    m_CsIsSet = false;
    m_Da = utility::conversions::to_string_t("");
    m_DaIsSet = false;
    m_Nl = utility::conversions::to_string_t("");
    m_NlIsSet = false;
    m_Et = utility::conversions::to_string_t("");
    m_EtIsSet = false;
    m_Fi = utility::conversions::to_string_t("");
    m_FiIsSet = false;
    m_Fr = utility::conversions::to_string_t("");
    m_FrIsSet = false;
    m_Ka = utility::conversions::to_string_t("");
    m_KaIsSet = false;
    m_De = utility::conversions::to_string_t("");
    m_DeIsSet = false;
    m_El = utility::conversions::to_string_t("");
    m_ElIsSet = false;
    m_Hi = utility::conversions::to_string_t("");
    m_HiIsSet = false;
    m_He = utility::conversions::to_string_t("");
    m_HeIsSet = false;
    m_Hu = utility::conversions::to_string_t("");
    m_HuIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_It = utility::conversions::to_string_t("");
    m_ItIsSet = false;
    m_Ja = utility::conversions::to_string_t("");
    m_JaIsSet = false;
    m_Ko = utility::conversions::to_string_t("");
    m_KoIsSet = false;
    m_Lv = utility::conversions::to_string_t("");
    m_LvIsSet = false;
    m_Lt = utility::conversions::to_string_t("");
    m_LtIsSet = false;
    m_Ms = utility::conversions::to_string_t("");
    m_MsIsSet = false;
    m_Nb = utility::conversions::to_string_t("");
    m_NbIsSet = false;
    m_Pl = utility::conversions::to_string_t("");
    m_PlIsSet = false;
    m_Fa = utility::conversions::to_string_t("");
    m_FaIsSet = false;
    m_Pt = utility::conversions::to_string_t("");
    m_PtIsSet = false;
    m_Pa = utility::conversions::to_string_t("");
    m_PaIsSet = false;
    m_Ro = utility::conversions::to_string_t("");
    m_RoIsSet = false;
    m_Ru = utility::conversions::to_string_t("");
    m_RuIsSet = false;
    m_Sr = utility::conversions::to_string_t("");
    m_SrIsSet = false;
    m_Sk = utility::conversions::to_string_t("");
    m_SkIsSet = false;
    m_Es = utility::conversions::to_string_t("");
    m_EsIsSet = false;
    m_Sv = utility::conversions::to_string_t("");
    m_SvIsSet = false;
    m_Th = utility::conversions::to_string_t("");
    m_ThIsSet = false;
    m_Tr = utility::conversions::to_string_t("");
    m_TrIsSet = false;
    m_Uk = utility::conversions::to_string_t("");
    m_UkIsSet = false;
    m_Vi = utility::conversions::to_string_t("");
    m_ViIsSet = false;
}

StringMap::~StringMap()
{
}

void StringMap::validate()
{
    // TODO: implement validation
}

web::json::value StringMap::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EnIsSet)
    {
        val[utility::conversions::to_string_t(U("en"))] = ModelBase::toJson(m_En);
    }
    if(m_ArIsSet)
    {
        val[utility::conversions::to_string_t(U("ar"))] = ModelBase::toJson(m_Ar);
    }
    if(m_BsIsSet)
    {
        val[utility::conversions::to_string_t(U("bs"))] = ModelBase::toJson(m_Bs);
    }
    if(m_BgIsSet)
    {
        val[utility::conversions::to_string_t(U("bg"))] = ModelBase::toJson(m_Bg);
    }
    if(m_CaIsSet)
    {
        val[utility::conversions::to_string_t(U("ca"))] = ModelBase::toJson(m_Ca);
    }
    if(m_Zh_HansIsSet)
    {
        val[utility::conversions::to_string_t(U("zh-Hans"))] = ModelBase::toJson(m_Zh_Hans);
    }
    if(m_Zh_HantIsSet)
    {
        val[utility::conversions::to_string_t(U("zh-Hant"))] = ModelBase::toJson(m_Zh_Hant);
    }
    if(m_ZhIsSet)
    {
        val[utility::conversions::to_string_t(U("zh"))] = ModelBase::toJson(m_Zh);
    }
    if(m_HrIsSet)
    {
        val[utility::conversions::to_string_t(U("hr"))] = ModelBase::toJson(m_Hr);
    }
    if(m_CsIsSet)
    {
        val[utility::conversions::to_string_t(U("cs"))] = ModelBase::toJson(m_Cs);
    }
    if(m_DaIsSet)
    {
        val[utility::conversions::to_string_t(U("da"))] = ModelBase::toJson(m_Da);
    }
    if(m_NlIsSet)
    {
        val[utility::conversions::to_string_t(U("nl"))] = ModelBase::toJson(m_Nl);
    }
    if(m_EtIsSet)
    {
        val[utility::conversions::to_string_t(U("et"))] = ModelBase::toJson(m_Et);
    }
    if(m_FiIsSet)
    {
        val[utility::conversions::to_string_t(U("fi"))] = ModelBase::toJson(m_Fi);
    }
    if(m_FrIsSet)
    {
        val[utility::conversions::to_string_t(U("fr"))] = ModelBase::toJson(m_Fr);
    }
    if(m_KaIsSet)
    {
        val[utility::conversions::to_string_t(U("ka"))] = ModelBase::toJson(m_Ka);
    }
    if(m_DeIsSet)
    {
        val[utility::conversions::to_string_t(U("de"))] = ModelBase::toJson(m_De);
    }
    if(m_ElIsSet)
    {
        val[utility::conversions::to_string_t(U("el"))] = ModelBase::toJson(m_El);
    }
    if(m_HiIsSet)
    {
        val[utility::conversions::to_string_t(U("hi"))] = ModelBase::toJson(m_Hi);
    }
    if(m_HeIsSet)
    {
        val[utility::conversions::to_string_t(U("he"))] = ModelBase::toJson(m_He);
    }
    if(m_HuIsSet)
    {
        val[utility::conversions::to_string_t(U("hu"))] = ModelBase::toJson(m_Hu);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ItIsSet)
    {
        val[utility::conversions::to_string_t(U("it"))] = ModelBase::toJson(m_It);
    }
    if(m_JaIsSet)
    {
        val[utility::conversions::to_string_t(U("ja"))] = ModelBase::toJson(m_Ja);
    }
    if(m_KoIsSet)
    {
        val[utility::conversions::to_string_t(U("ko"))] = ModelBase::toJson(m_Ko);
    }
    if(m_LvIsSet)
    {
        val[utility::conversions::to_string_t(U("lv"))] = ModelBase::toJson(m_Lv);
    }
    if(m_LtIsSet)
    {
        val[utility::conversions::to_string_t(U("lt"))] = ModelBase::toJson(m_Lt);
    }
    if(m_MsIsSet)
    {
        val[utility::conversions::to_string_t(U("ms"))] = ModelBase::toJson(m_Ms);
    }
    if(m_NbIsSet)
    {
        val[utility::conversions::to_string_t(U("nb"))] = ModelBase::toJson(m_Nb);
    }
    if(m_PlIsSet)
    {
        val[utility::conversions::to_string_t(U("pl"))] = ModelBase::toJson(m_Pl);
    }
    if(m_FaIsSet)
    {
        val[utility::conversions::to_string_t(U("fa"))] = ModelBase::toJson(m_Fa);
    }
    if(m_PtIsSet)
    {
        val[utility::conversions::to_string_t(U("pt"))] = ModelBase::toJson(m_Pt);
    }
    if(m_PaIsSet)
    {
        val[utility::conversions::to_string_t(U("pa"))] = ModelBase::toJson(m_Pa);
    }
    if(m_RoIsSet)
    {
        val[utility::conversions::to_string_t(U("ro"))] = ModelBase::toJson(m_Ro);
    }
    if(m_RuIsSet)
    {
        val[utility::conversions::to_string_t(U("ru"))] = ModelBase::toJson(m_Ru);
    }
    if(m_SrIsSet)
    {
        val[utility::conversions::to_string_t(U("sr"))] = ModelBase::toJson(m_Sr);
    }
    if(m_SkIsSet)
    {
        val[utility::conversions::to_string_t(U("sk"))] = ModelBase::toJson(m_Sk);
    }
    if(m_EsIsSet)
    {
        val[utility::conversions::to_string_t(U("es"))] = ModelBase::toJson(m_Es);
    }
    if(m_SvIsSet)
    {
        val[utility::conversions::to_string_t(U("sv"))] = ModelBase::toJson(m_Sv);
    }
    if(m_ThIsSet)
    {
        val[utility::conversions::to_string_t(U("th"))] = ModelBase::toJson(m_Th);
    }
    if(m_TrIsSet)
    {
        val[utility::conversions::to_string_t(U("tr"))] = ModelBase::toJson(m_Tr);
    }
    if(m_UkIsSet)
    {
        val[utility::conversions::to_string_t(U("uk"))] = ModelBase::toJson(m_Uk);
    }
    if(m_ViIsSet)
    {
        val[utility::conversions::to_string_t(U("vi"))] = ModelBase::toJson(m_Vi);
    }

    return val;
}

bool StringMap::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("en"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("en")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEn);
            setEn(refVal_setEn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ar"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ar")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAr);
            setAr(refVal_setAr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bs")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBs);
            setBs(refVal_setBs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bg"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bg")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBg;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBg);
            setBg(refVal_setBg);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ca"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ca")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCa;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCa);
            setCa(refVal_setCa);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("zh-Hans"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("zh-Hans")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setZhHans;
            ok &= ModelBase::fromJson(fieldValue, refVal_setZhHans);
            setZhHans(refVal_setZhHans);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("zh-Hant"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("zh-Hant")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setZhHant;
            ok &= ModelBase::fromJson(fieldValue, refVal_setZhHant);
            setZhHant(refVal_setZhHant);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("zh"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("zh")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setZh;
            ok &= ModelBase::fromJson(fieldValue, refVal_setZh);
            setZh(refVal_setZh);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hr")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHr);
            setHr(refVal_setHr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cs")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCs);
            setCs(refVal_setCs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("da"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("da")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDa;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDa);
            setDa(refVal_setDa);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNl);
            setNl(refVal_setNl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("et"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("et")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEt);
            setEt(refVal_setEt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFi);
            setFi(refVal_setFi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fr")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFr);
            setFr(refVal_setFr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ka"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ka")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKa;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKa);
            setKa(refVal_setKa);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("de"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("de")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDe;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDe);
            setDe(refVal_setDe);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("el"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("el")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEl);
            setEl(refVal_setEl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHi);
            setHi(refVal_setHi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("he"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("he")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHe;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHe);
            setHe(refVal_setHe);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hu"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hu")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHu;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHu);
            setHu(refVal_setHu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("it"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("it")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIt);
            setIt(refVal_setIt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ja"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ja")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setJa;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJa);
            setJa(refVal_setJa);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ko"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ko")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKo);
            setKo(refVal_setKo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lv"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lv")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLv;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLv);
            setLv(refVal_setLv);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLt);
            setLt(refVal_setLt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ms")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMs);
            setMs(refVal_setMs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nb")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNb);
            setNb(refVal_setNb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPl);
            setPl(refVal_setPl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fa"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fa")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFa;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFa);
            setFa(refVal_setFa);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPt);
            setPt(refVal_setPt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pa"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pa")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPa;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPa);
            setPa(refVal_setPa);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ro"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ro")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRo);
            setRo(refVal_setRo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ru"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ru")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRu;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRu);
            setRu(refVal_setRu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sr")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSr);
            setSr(refVal_setSr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sk"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sk")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSk;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSk);
            setSk(refVal_setSk);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("es"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("es")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEs);
            setEs(refVal_setEs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sv"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sv")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSv;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSv);
            setSv(refVal_setSv);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("th"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("th")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTh;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTh);
            setTh(refVal_setTh);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tr")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTr);
            setTr(refVal_setTr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uk"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uk")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUk;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUk);
            setUk(refVal_setUk);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVi);
            setVi(refVal_setVi);
        }
    }
    return ok;
}

void StringMap::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("en")), m_En));
    }
    if(m_ArIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ar")), m_Ar));
    }
    if(m_BsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bs")), m_Bs));
    }
    if(m_BgIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bg")), m_Bg));
    }
    if(m_CaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ca")), m_Ca));
    }
    if(m_Zh_HansIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("zh-Hans")), m_Zh_Hans));
    }
    if(m_Zh_HantIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("zh-Hant")), m_Zh_Hant));
    }
    if(m_ZhIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("zh")), m_Zh));
    }
    if(m_HrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hr")), m_Hr));
    }
    if(m_CsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cs")), m_Cs));
    }
    if(m_DaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("da")), m_Da));
    }
    if(m_NlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nl")), m_Nl));
    }
    if(m_EtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("et")), m_Et));
    }
    if(m_FiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fi")), m_Fi));
    }
    if(m_FrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fr")), m_Fr));
    }
    if(m_KaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ka")), m_Ka));
    }
    if(m_DeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("de")), m_De));
    }
    if(m_ElIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("el")), m_El));
    }
    if(m_HiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hi")), m_Hi));
    }
    if(m_HeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("he")), m_He));
    }
    if(m_HuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hu")), m_Hu));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ItIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("it")), m_It));
    }
    if(m_JaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ja")), m_Ja));
    }
    if(m_KoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ko")), m_Ko));
    }
    if(m_LvIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lv")), m_Lv));
    }
    if(m_LtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lt")), m_Lt));
    }
    if(m_MsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ms")), m_Ms));
    }
    if(m_NbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nb")), m_Nb));
    }
    if(m_PlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pl")), m_Pl));
    }
    if(m_FaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fa")), m_Fa));
    }
    if(m_PtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pt")), m_Pt));
    }
    if(m_PaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pa")), m_Pa));
    }
    if(m_RoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ro")), m_Ro));
    }
    if(m_RuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ru")), m_Ru));
    }
    if(m_SrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sr")), m_Sr));
    }
    if(m_SkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sk")), m_Sk));
    }
    if(m_EsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("es")), m_Es));
    }
    if(m_SvIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sv")), m_Sv));
    }
    if(m_ThIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("th")), m_Th));
    }
    if(m_TrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tr")), m_Tr));
    }
    if(m_UkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uk")), m_Uk));
    }
    if(m_ViIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vi")), m_Vi));
    }
}

bool StringMap::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("en"))))
    {
        utility::string_t refVal_setEn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("en"))), refVal_setEn );
        setEn(refVal_setEn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ar"))))
    {
        utility::string_t refVal_setAr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ar"))), refVal_setAr );
        setAr(refVal_setAr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bs"))))
    {
        utility::string_t refVal_setBs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bs"))), refVal_setBs );
        setBs(refVal_setBs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bg"))))
    {
        utility::string_t refVal_setBg;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bg"))), refVal_setBg );
        setBg(refVal_setBg);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ca"))))
    {
        utility::string_t refVal_setCa;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ca"))), refVal_setCa );
        setCa(refVal_setCa);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("zh-Hans"))))
    {
        utility::string_t refVal_setZhHans;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("zh-Hans"))), refVal_setZhHans );
        setZhHans(refVal_setZhHans);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("zh-Hant"))))
    {
        utility::string_t refVal_setZhHant;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("zh-Hant"))), refVal_setZhHant );
        setZhHant(refVal_setZhHant);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("zh"))))
    {
        utility::string_t refVal_setZh;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("zh"))), refVal_setZh );
        setZh(refVal_setZh);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hr"))))
    {
        utility::string_t refVal_setHr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hr"))), refVal_setHr );
        setHr(refVal_setHr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cs"))))
    {
        utility::string_t refVal_setCs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cs"))), refVal_setCs );
        setCs(refVal_setCs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("da"))))
    {
        utility::string_t refVal_setDa;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("da"))), refVal_setDa );
        setDa(refVal_setDa);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nl"))))
    {
        utility::string_t refVal_setNl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nl"))), refVal_setNl );
        setNl(refVal_setNl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("et"))))
    {
        utility::string_t refVal_setEt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("et"))), refVal_setEt );
        setEt(refVal_setEt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fi"))))
    {
        utility::string_t refVal_setFi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fi"))), refVal_setFi );
        setFi(refVal_setFi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fr"))))
    {
        utility::string_t refVal_setFr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fr"))), refVal_setFr );
        setFr(refVal_setFr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ka"))))
    {
        utility::string_t refVal_setKa;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ka"))), refVal_setKa );
        setKa(refVal_setKa);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("de"))))
    {
        utility::string_t refVal_setDe;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("de"))), refVal_setDe );
        setDe(refVal_setDe);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("el"))))
    {
        utility::string_t refVal_setEl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("el"))), refVal_setEl );
        setEl(refVal_setEl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hi"))))
    {
        utility::string_t refVal_setHi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hi"))), refVal_setHi );
        setHi(refVal_setHi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("he"))))
    {
        utility::string_t refVal_setHe;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("he"))), refVal_setHe );
        setHe(refVal_setHe);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hu"))))
    {
        utility::string_t refVal_setHu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hu"))), refVal_setHu );
        setHu(refVal_setHu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("it"))))
    {
        utility::string_t refVal_setIt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("it"))), refVal_setIt );
        setIt(refVal_setIt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ja"))))
    {
        utility::string_t refVal_setJa;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ja"))), refVal_setJa );
        setJa(refVal_setJa);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ko"))))
    {
        utility::string_t refVal_setKo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ko"))), refVal_setKo );
        setKo(refVal_setKo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lv"))))
    {
        utility::string_t refVal_setLv;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lv"))), refVal_setLv );
        setLv(refVal_setLv);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lt"))))
    {
        utility::string_t refVal_setLt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lt"))), refVal_setLt );
        setLt(refVal_setLt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ms"))))
    {
        utility::string_t refVal_setMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ms"))), refVal_setMs );
        setMs(refVal_setMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nb"))))
    {
        utility::string_t refVal_setNb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nb"))), refVal_setNb );
        setNb(refVal_setNb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pl"))))
    {
        utility::string_t refVal_setPl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pl"))), refVal_setPl );
        setPl(refVal_setPl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fa"))))
    {
        utility::string_t refVal_setFa;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fa"))), refVal_setFa );
        setFa(refVal_setFa);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pt"))))
    {
        utility::string_t refVal_setPt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pt"))), refVal_setPt );
        setPt(refVal_setPt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pa"))))
    {
        utility::string_t refVal_setPa;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pa"))), refVal_setPa );
        setPa(refVal_setPa);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ro"))))
    {
        utility::string_t refVal_setRo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ro"))), refVal_setRo );
        setRo(refVal_setRo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ru"))))
    {
        utility::string_t refVal_setRu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ru"))), refVal_setRu );
        setRu(refVal_setRu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sr"))))
    {
        utility::string_t refVal_setSr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sr"))), refVal_setSr );
        setSr(refVal_setSr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sk"))))
    {
        utility::string_t refVal_setSk;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sk"))), refVal_setSk );
        setSk(refVal_setSk);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("es"))))
    {
        utility::string_t refVal_setEs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("es"))), refVal_setEs );
        setEs(refVal_setEs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sv"))))
    {
        utility::string_t refVal_setSv;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sv"))), refVal_setSv );
        setSv(refVal_setSv);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("th"))))
    {
        utility::string_t refVal_setTh;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("th"))), refVal_setTh );
        setTh(refVal_setTh);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tr"))))
    {
        utility::string_t refVal_setTr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tr"))), refVal_setTr );
        setTr(refVal_setTr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uk"))))
    {
        utility::string_t refVal_setUk;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uk"))), refVal_setUk );
        setUk(refVal_setUk);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vi"))))
    {
        utility::string_t refVal_setVi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vi"))), refVal_setVi );
        setVi(refVal_setVi);
    }
    return ok;
}

utility::string_t StringMap::getEn() const
{
    return m_En;
}

void StringMap::setEn(const utility::string_t& value)
{
    m_En = value;
    m_EnIsSet = true;
}

bool StringMap::enIsSet() const
{
    return m_EnIsSet;
}

void StringMap::unsetEn()
{
    m_EnIsSet = false;
}
utility::string_t StringMap::getAr() const
{
    return m_Ar;
}

void StringMap::setAr(const utility::string_t& value)
{
    m_Ar = value;
    m_ArIsSet = true;
}

bool StringMap::arIsSet() const
{
    return m_ArIsSet;
}

void StringMap::unsetAr()
{
    m_ArIsSet = false;
}
utility::string_t StringMap::getBs() const
{
    return m_Bs;
}

void StringMap::setBs(const utility::string_t& value)
{
    m_Bs = value;
    m_BsIsSet = true;
}

bool StringMap::bsIsSet() const
{
    return m_BsIsSet;
}

void StringMap::unsetBs()
{
    m_BsIsSet = false;
}
utility::string_t StringMap::getBg() const
{
    return m_Bg;
}

void StringMap::setBg(const utility::string_t& value)
{
    m_Bg = value;
    m_BgIsSet = true;
}

bool StringMap::bgIsSet() const
{
    return m_BgIsSet;
}

void StringMap::unsetBg()
{
    m_BgIsSet = false;
}
utility::string_t StringMap::getCa() const
{
    return m_Ca;
}

void StringMap::setCa(const utility::string_t& value)
{
    m_Ca = value;
    m_CaIsSet = true;
}

bool StringMap::caIsSet() const
{
    return m_CaIsSet;
}

void StringMap::unsetCa()
{
    m_CaIsSet = false;
}
utility::string_t StringMap::getZhHans() const
{
    return m_Zh_Hans;
}

void StringMap::setZhHans(const utility::string_t& value)
{
    m_Zh_Hans = value;
    m_Zh_HansIsSet = true;
}

bool StringMap::zhHansIsSet() const
{
    return m_Zh_HansIsSet;
}

void StringMap::unsetZh_Hans()
{
    m_Zh_HansIsSet = false;
}
utility::string_t StringMap::getZhHant() const
{
    return m_Zh_Hant;
}

void StringMap::setZhHant(const utility::string_t& value)
{
    m_Zh_Hant = value;
    m_Zh_HantIsSet = true;
}

bool StringMap::zhHantIsSet() const
{
    return m_Zh_HantIsSet;
}

void StringMap::unsetZh_Hant()
{
    m_Zh_HantIsSet = false;
}
utility::string_t StringMap::getZh() const
{
    return m_Zh;
}

void StringMap::setZh(const utility::string_t& value)
{
    m_Zh = value;
    m_ZhIsSet = true;
}

bool StringMap::zhIsSet() const
{
    return m_ZhIsSet;
}

void StringMap::unsetZh()
{
    m_ZhIsSet = false;
}
utility::string_t StringMap::getHr() const
{
    return m_Hr;
}

void StringMap::setHr(const utility::string_t& value)
{
    m_Hr = value;
    m_HrIsSet = true;
}

bool StringMap::hrIsSet() const
{
    return m_HrIsSet;
}

void StringMap::unsetHr()
{
    m_HrIsSet = false;
}
utility::string_t StringMap::getCs() const
{
    return m_Cs;
}

void StringMap::setCs(const utility::string_t& value)
{
    m_Cs = value;
    m_CsIsSet = true;
}

bool StringMap::csIsSet() const
{
    return m_CsIsSet;
}

void StringMap::unsetCs()
{
    m_CsIsSet = false;
}
utility::string_t StringMap::getDa() const
{
    return m_Da;
}

void StringMap::setDa(const utility::string_t& value)
{
    m_Da = value;
    m_DaIsSet = true;
}

bool StringMap::daIsSet() const
{
    return m_DaIsSet;
}

void StringMap::unsetDa()
{
    m_DaIsSet = false;
}
utility::string_t StringMap::getNl() const
{
    return m_Nl;
}

void StringMap::setNl(const utility::string_t& value)
{
    m_Nl = value;
    m_NlIsSet = true;
}

bool StringMap::nlIsSet() const
{
    return m_NlIsSet;
}

void StringMap::unsetNl()
{
    m_NlIsSet = false;
}
utility::string_t StringMap::getEt() const
{
    return m_Et;
}

void StringMap::setEt(const utility::string_t& value)
{
    m_Et = value;
    m_EtIsSet = true;
}

bool StringMap::etIsSet() const
{
    return m_EtIsSet;
}

void StringMap::unsetEt()
{
    m_EtIsSet = false;
}
utility::string_t StringMap::getFi() const
{
    return m_Fi;
}

void StringMap::setFi(const utility::string_t& value)
{
    m_Fi = value;
    m_FiIsSet = true;
}

bool StringMap::fiIsSet() const
{
    return m_FiIsSet;
}

void StringMap::unsetFi()
{
    m_FiIsSet = false;
}
utility::string_t StringMap::getFr() const
{
    return m_Fr;
}

void StringMap::setFr(const utility::string_t& value)
{
    m_Fr = value;
    m_FrIsSet = true;
}

bool StringMap::frIsSet() const
{
    return m_FrIsSet;
}

void StringMap::unsetFr()
{
    m_FrIsSet = false;
}
utility::string_t StringMap::getKa() const
{
    return m_Ka;
}

void StringMap::setKa(const utility::string_t& value)
{
    m_Ka = value;
    m_KaIsSet = true;
}

bool StringMap::kaIsSet() const
{
    return m_KaIsSet;
}

void StringMap::unsetKa()
{
    m_KaIsSet = false;
}
utility::string_t StringMap::getDe() const
{
    return m_De;
}

void StringMap::setDe(const utility::string_t& value)
{
    m_De = value;
    m_DeIsSet = true;
}

bool StringMap::deIsSet() const
{
    return m_DeIsSet;
}

void StringMap::unsetDe()
{
    m_DeIsSet = false;
}
utility::string_t StringMap::getEl() const
{
    return m_El;
}

void StringMap::setEl(const utility::string_t& value)
{
    m_El = value;
    m_ElIsSet = true;
}

bool StringMap::elIsSet() const
{
    return m_ElIsSet;
}

void StringMap::unsetEl()
{
    m_ElIsSet = false;
}
utility::string_t StringMap::getHi() const
{
    return m_Hi;
}

void StringMap::setHi(const utility::string_t& value)
{
    m_Hi = value;
    m_HiIsSet = true;
}

bool StringMap::hiIsSet() const
{
    return m_HiIsSet;
}

void StringMap::unsetHi()
{
    m_HiIsSet = false;
}
utility::string_t StringMap::getHe() const
{
    return m_He;
}

void StringMap::setHe(const utility::string_t& value)
{
    m_He = value;
    m_HeIsSet = true;
}

bool StringMap::heIsSet() const
{
    return m_HeIsSet;
}

void StringMap::unsetHe()
{
    m_HeIsSet = false;
}
utility::string_t StringMap::getHu() const
{
    return m_Hu;
}

void StringMap::setHu(const utility::string_t& value)
{
    m_Hu = value;
    m_HuIsSet = true;
}

bool StringMap::huIsSet() const
{
    return m_HuIsSet;
}

void StringMap::unsetHu()
{
    m_HuIsSet = false;
}
utility::string_t StringMap::getId() const
{
    return m_Id;
}

void StringMap::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool StringMap::idIsSet() const
{
    return m_IdIsSet;
}

void StringMap::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t StringMap::getIt() const
{
    return m_It;
}

void StringMap::setIt(const utility::string_t& value)
{
    m_It = value;
    m_ItIsSet = true;
}

bool StringMap::itIsSet() const
{
    return m_ItIsSet;
}

void StringMap::unsetIt()
{
    m_ItIsSet = false;
}
utility::string_t StringMap::getJa() const
{
    return m_Ja;
}

void StringMap::setJa(const utility::string_t& value)
{
    m_Ja = value;
    m_JaIsSet = true;
}

bool StringMap::jaIsSet() const
{
    return m_JaIsSet;
}

void StringMap::unsetJa()
{
    m_JaIsSet = false;
}
utility::string_t StringMap::getKo() const
{
    return m_Ko;
}

void StringMap::setKo(const utility::string_t& value)
{
    m_Ko = value;
    m_KoIsSet = true;
}

bool StringMap::koIsSet() const
{
    return m_KoIsSet;
}

void StringMap::unsetKo()
{
    m_KoIsSet = false;
}
utility::string_t StringMap::getLv() const
{
    return m_Lv;
}

void StringMap::setLv(const utility::string_t& value)
{
    m_Lv = value;
    m_LvIsSet = true;
}

bool StringMap::lvIsSet() const
{
    return m_LvIsSet;
}

void StringMap::unsetLv()
{
    m_LvIsSet = false;
}
utility::string_t StringMap::getLt() const
{
    return m_Lt;
}

void StringMap::setLt(const utility::string_t& value)
{
    m_Lt = value;
    m_LtIsSet = true;
}

bool StringMap::ltIsSet() const
{
    return m_LtIsSet;
}

void StringMap::unsetLt()
{
    m_LtIsSet = false;
}
utility::string_t StringMap::getMs() const
{
    return m_Ms;
}

void StringMap::setMs(const utility::string_t& value)
{
    m_Ms = value;
    m_MsIsSet = true;
}

bool StringMap::msIsSet() const
{
    return m_MsIsSet;
}

void StringMap::unsetMs()
{
    m_MsIsSet = false;
}
utility::string_t StringMap::getNb() const
{
    return m_Nb;
}

void StringMap::setNb(const utility::string_t& value)
{
    m_Nb = value;
    m_NbIsSet = true;
}

bool StringMap::nbIsSet() const
{
    return m_NbIsSet;
}

void StringMap::unsetNb()
{
    m_NbIsSet = false;
}
utility::string_t StringMap::getPl() const
{
    return m_Pl;
}

void StringMap::setPl(const utility::string_t& value)
{
    m_Pl = value;
    m_PlIsSet = true;
}

bool StringMap::plIsSet() const
{
    return m_PlIsSet;
}

void StringMap::unsetPl()
{
    m_PlIsSet = false;
}
utility::string_t StringMap::getFa() const
{
    return m_Fa;
}

void StringMap::setFa(const utility::string_t& value)
{
    m_Fa = value;
    m_FaIsSet = true;
}

bool StringMap::faIsSet() const
{
    return m_FaIsSet;
}

void StringMap::unsetFa()
{
    m_FaIsSet = false;
}
utility::string_t StringMap::getPt() const
{
    return m_Pt;
}

void StringMap::setPt(const utility::string_t& value)
{
    m_Pt = value;
    m_PtIsSet = true;
}

bool StringMap::ptIsSet() const
{
    return m_PtIsSet;
}

void StringMap::unsetPt()
{
    m_PtIsSet = false;
}
utility::string_t StringMap::getPa() const
{
    return m_Pa;
}

void StringMap::setPa(const utility::string_t& value)
{
    m_Pa = value;
    m_PaIsSet = true;
}

bool StringMap::paIsSet() const
{
    return m_PaIsSet;
}

void StringMap::unsetPa()
{
    m_PaIsSet = false;
}
utility::string_t StringMap::getRo() const
{
    return m_Ro;
}

void StringMap::setRo(const utility::string_t& value)
{
    m_Ro = value;
    m_RoIsSet = true;
}

bool StringMap::roIsSet() const
{
    return m_RoIsSet;
}

void StringMap::unsetRo()
{
    m_RoIsSet = false;
}
utility::string_t StringMap::getRu() const
{
    return m_Ru;
}

void StringMap::setRu(const utility::string_t& value)
{
    m_Ru = value;
    m_RuIsSet = true;
}

bool StringMap::ruIsSet() const
{
    return m_RuIsSet;
}

void StringMap::unsetRu()
{
    m_RuIsSet = false;
}
utility::string_t StringMap::getSr() const
{
    return m_Sr;
}

void StringMap::setSr(const utility::string_t& value)
{
    m_Sr = value;
    m_SrIsSet = true;
}

bool StringMap::srIsSet() const
{
    return m_SrIsSet;
}

void StringMap::unsetSr()
{
    m_SrIsSet = false;
}
utility::string_t StringMap::getSk() const
{
    return m_Sk;
}

void StringMap::setSk(const utility::string_t& value)
{
    m_Sk = value;
    m_SkIsSet = true;
}

bool StringMap::skIsSet() const
{
    return m_SkIsSet;
}

void StringMap::unsetSk()
{
    m_SkIsSet = false;
}
utility::string_t StringMap::getEs() const
{
    return m_Es;
}

void StringMap::setEs(const utility::string_t& value)
{
    m_Es = value;
    m_EsIsSet = true;
}

bool StringMap::esIsSet() const
{
    return m_EsIsSet;
}

void StringMap::unsetEs()
{
    m_EsIsSet = false;
}
utility::string_t StringMap::getSv() const
{
    return m_Sv;
}

void StringMap::setSv(const utility::string_t& value)
{
    m_Sv = value;
    m_SvIsSet = true;
}

bool StringMap::svIsSet() const
{
    return m_SvIsSet;
}

void StringMap::unsetSv()
{
    m_SvIsSet = false;
}
utility::string_t StringMap::getTh() const
{
    return m_Th;
}

void StringMap::setTh(const utility::string_t& value)
{
    m_Th = value;
    m_ThIsSet = true;
}

bool StringMap::thIsSet() const
{
    return m_ThIsSet;
}

void StringMap::unsetTh()
{
    m_ThIsSet = false;
}
utility::string_t StringMap::getTr() const
{
    return m_Tr;
}

void StringMap::setTr(const utility::string_t& value)
{
    m_Tr = value;
    m_TrIsSet = true;
}

bool StringMap::trIsSet() const
{
    return m_TrIsSet;
}

void StringMap::unsetTr()
{
    m_TrIsSet = false;
}
utility::string_t StringMap::getUk() const
{
    return m_Uk;
}

void StringMap::setUk(const utility::string_t& value)
{
    m_Uk = value;
    m_UkIsSet = true;
}

bool StringMap::ukIsSet() const
{
    return m_UkIsSet;
}

void StringMap::unsetUk()
{
    m_UkIsSet = false;
}
utility::string_t StringMap::getVi() const
{
    return m_Vi;
}

void StringMap::setVi(const utility::string_t& value)
{
    m_Vi = value;
    m_ViIsSet = true;
}

bool StringMap::viIsSet() const
{
    return m_ViIsSet;
}

void StringMap::unsetVi()
{
    m_ViIsSet = false;
}
}
}
}
}


